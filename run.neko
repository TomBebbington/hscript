@classes = $new(null);
@enum_to_string = function()
    return neko.Boot.__enum_str(this)
@serialize = function()
    return neko.Boot.__serialize(this)
@tag_serialize = function()
    return neko.Boot.__tagserialize(this)
@lazy_error = function(e)
    return $varargs(function(_)
        return $throw(e)
    )
@default__string = function()
    return {
        var @s = this.toString();
        if $typeof(@s) != $tobject
            return null;
        return @s.__s;
    }

@closure0 = function(@this,@fun)
    return if @fun == null
        null
    else
        function() {
            this = @this;
            @fun();
        }


@closure1 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a) {
            this = @this;
            @fun(a);
        }


@closure2 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b) {
            this = @this;
            @fun(a,b);
        }


@closure3 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c) {
            this = @this;
            @fun(a,b,c);
        }


@closure4 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d) {
            this = @this;
            @fun(a,b,c,d);
        }


@closure5 = function(@this,@fun)
    return if @fun == null
        null
    else
        function(a,b,c,d,e) {
            this = @this;
            @fun(a,b,c,d,e);
        }


{
}
neko = $new(null);
@classes.neko = neko;
_Map = $new(null);
@classes._Map = _Map;
haxe = $new(null);
@classes.haxe = haxe;
haxe._Constraints = $new(null);
haxe._EnumFlags = $new(null);
haxe.ds = $new(null);
haxe.ds._HashMap = $new(null);
haxe.io = $new(null);
haxe.macro = $new(null);
hscript = $new(null);
@classes.hscript = hscript;
hscript.exec = $new(null);
hscript.exec._Interp = $new(null);
sys = $new(null);
@classes.sys = sys;
sys.io = $new(null);
{
    var @tmp = $new(null);
    neko.@Lib = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Lib = @tmp;
    @tmp.prototype = neko.@Lib;
    @tmp.unserialize = function(s) {
        return neko.Lib.__unserialize(s.b,$loader);
    }
    @tmp.stringReference = function(b) {
        return String.new(b.b);
    }
    @tmp.serialize = function(v) {
        return haxe.io.Bytes.ofData(neko.Lib.__serialize(v));
    }
    @tmp.rethrow = function(e) {
        return $rethrow(e);
    }
    @tmp.println = function(v) {
        $print(v,String.new("\n"));
        return null;
    }
    @tmp.print = function(v) {
        $print(v);
        return null;
    }
    @tmp.nekoToHaxe = function(v) {
        var _g = $typeof(v);
        switch ( _g ){
        0 => 
            return v
        1 => 
            return v
        2 => 
            return v
        3 => 
            return v
        4 => 
            return String.new(v)
        6 => 
            {
                var a = Array.new1(v,$asize(v));
                {
                    var _g2 = 0;
                    var _g1 = a.length;
                    while ( _g2 < _g1 ) {
                        var i = _g2 ++= 1;
                        a[i] = neko.Lib.nekoToHaxe(a[i]);
                    }
                }
                return a;
            }

        5 => 
            {
                var f = $objfields(v);
                var i = 0;
                var l = $asize(f);
                var o = $new(v);
                if ( $objgetproto(v) != null )
                    $throw(String.new("Can't convert object prototype"));
                while ( i < l ) {
                    $objset(o,f[i],neko.Lib.nekoToHaxe($objget(v,f[i])));
                    i += 1;
                }
                return o;
            }

        default => 
            $throw(String.new("Can't convert ") + string(v))
        }
        return null;
    }
    @tmp.localUnserialize = function(s) {
        return neko.Lib.__unserialize(s.b,{
            loadmodule => function(m,l) {
                return $exports;
            }
            , 
            loadprim => function(p,n) {
                return $loader.loadprim(p,n);
            }


        });
    }
    @tmp.loadLazy = function(lib,prim,nargs) {
        try {
            return neko.Lib.load(lib,prim,nargs);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = $array(@tmp);
                {
                    return $varargs(function(_) {
                        $throw(e[0]);
                        return null;
                    }
                    );
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.load = function(lib,prim,nargs) {
        return $loader.loadprim(( (lib + String.new("@")) + prim ).__s,nargs);
    }
    @tmp.haxeToNeko = function(v) {
        var _g = $typeof(v);
        switch ( _g ){
        0 => 
            return v
        1 => 
            return v
        2 => 
            return v
        3 => 
            return v
        5 => 
            {
                var cl = v.__class__;
                if ( cl == String )
                    return v.__s;
                if ( cl == Array ) {
                    var a = $amake(v.length);
                    {
                        var _g2 = 0;
                        var _g1 = v.length;
                        while ( _g2 < _g1 ) {
                            var i = _g2 ++= 1;
                            a[i] = neko.Lib.haxeToNeko(v[i]);
                        }
                    }
                    return a;
                }
                if ( (cl != null) || ($objgetproto(v) != null) )
                    $throw(String.new("Can't convert ") + string(v));
                var f = $objfields(v);
                var i = 0;
                var l = $asize(f);
                var o = $new(v);
                while ( i < l ) {
                    $objset(o,f[i],neko.Lib.haxeToNeko($objget(v,f[i])));
                    i += 1;
                }
                return o;
            }

        default => 
            $throw(String.new("Can't convert ") + string(v))
        }
        return null;
    }
    @tmp.getClasses = function() {
        return neko.Boot.__classes;
    }
    @tmp.bytesReference = function(s) {
        return haxe.io.Bytes.new(s.length,s.__s);
    }
    @tmp.__unserialize = $loader.loadprim(("std" + "@") + "unserialize",2);
    @tmp.__serialize = $loader.loadprim(("std" + "@") + "serialize",1);
    neko.@Lib.__class__ = neko.Lib;
}
{
    var @tmp = $new(null);
    @Array = @tmp;
    @tmp.unshift = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        var a = this.__a;
        $ablit(a,1,a,0,l);
        a[0] = x;
        return null;
    }
    @tmp.toString = function() {
        var s = StringBuf.new();
        StringBuf.__add(s.b,String.new("["));
        var it = this.iterator();
        {
            var @tmp = it;
            while @tmp.hasNext() {
                var i = @tmp.next();
                {
                    StringBuf.__add(s.b,i);
                    if ( it.hasNext() )
                        StringBuf.__add_char(s.b,44);
                }
            }
        }
        StringBuf.__add(s.b,String.new("]"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.splice = function(pos,len) {
        if ( len < 0 )
            return Array.new();
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > this.length ) {
            pos = 0;
            len = 0;
        }
        else
            if ( (pos + len) > this.length ) {
                len = (this.length - pos);
                if ( len < 0 )
                    len = 0;
            }

        var a = this.__a;
        var ret = Array.new1($asub(a,pos,len),len);
        var end = pos + len;
        $ablit(a,pos,a,end,this.length - end);
        this.length -= len;
        while ( (len -= 1) >= 0 )
            a[this.length + len] = null
        return ret;
    }
    @tmp.sort = function(f) {
        var a = this.__a;
        var i = 0;
        var l = this.length;
        while ( i < l ) {
            var swap = false;
            var j = 0;
            var max = (l - i) - 1;
            while ( j < max ) {
                if ( f(a[j],a[j + 1]) > 0 ) {
                    var tmp = a[j + 1];
                    a[j + 1] = a[j];
                    a[j] = tmp;
                    swap = true;
                }
                j += 1;
            }
            if ( $not(swap) )
                break;;
            i += 1;
        }
        return null;
    }
    @tmp.slice = function(pos,end) {
        if ( pos < 0 ) {
            pos = (this.length + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( end == null )
            end = this.length
        else
            if ( end < 0 )
                end = (this.length + end);

        if ( end > this.length )
            end = this.length;
        var len = end - pos;
        if ( len < 0 )
            return Array.new();
        return Array.new1($asub(this.__a,pos,len),len);
    }
    @tmp.shift = function() {
        var l = this.length;
        if ( l == 0 )
            return null;
        var a = this.__a;
        var x = a[0];
        l -= 1;
        $ablit(a,0,a,1,l);
        a[l] = null;
        this.length = l;
        return x;
    }
    @tmp.reverse = function() {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        var half = l >> 1;
        l -= 1;
        while ( i < half ) {
            var tmp = a[i];
            a[i] = a[l - i];
            a[l - i] = tmp;
            i += 1;
        }
        return null;
    }
    @tmp.remove = function(x) {
        var i = 0;
        var l = this.length;
        var a = this.__a;
        while ( i < l ) {
            if ( a[i] == x ) {
                $ablit(a,i,a,i + 1,(l - i) - 1);
                l -= 1;
                this.length = l;
                a[l] = null;
                return true;
            }
            i += 1;
        }
        return false;
    }
    @tmp.push = function(x) {
        var l = this.length;
        this.__grow(l + 1);
        this.__a[l] = x;
        return l + 1;
    }
    @tmp.pop = function() {
        if ( this.length == 0 )
            return null;
        this.length -= 1;
        var x = this.__a[this.length];
        this.__a[this.length] = null;
        return x;
    }
    @tmp.map = function(f) {
        var ret = Array.new1($array(),0);
        {
            var _g = 0;
            var _g1 = this;
            while ( _g < _g1.length ) {
                var elt = _g1[_g];
                _g += 1;
                ret.push(f(elt));
            }
        }
        return ret;
    }
    @tmp.length = null;
    @tmp.join = function(sep) {
        var s = StringBuf.new();
        var a = this.__a;
        var max = this.length - 1;
        {
            var _g1 = 0;
            var _g = this.length;
            while ( _g1 < _g ) {
                var p = _g1 ++= 1;
                StringBuf.__add(s.b,a[p]);
                if ( p != max )
                    StringBuf.__add(s.b,sep);
            }
        }
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.iterator = function() {
        return {
            a => this, 
            p => 0, 
            hasNext => function() {
                return this.p < this.a.length;
            }
            , 
            next => function() {
                var i = this.a.__a[this.p];
                this.p += 1;
                return i;
            }


        };
    }
    @tmp.insert = function(pos,x) {
        var l = this.length;
        if ( pos < 0 ) {
            pos = (l + pos);
            if ( pos < 0 )
                pos = 0;
        }
        if ( pos > l )
            pos = l;
        this.__grow(l + 1);
        var a = this.__a;
        $ablit(a,pos + 1,a,pos,l - pos);
        a[pos] = x;
        return null;
    }
    @tmp.filter = function(f) {
        var ret = Array.new1($array(),0);
        {
            var _g = 0;
            var _g1 = this;
            while ( _g < _g1.length ) {
                var elt = _g1[_g];
                _g += 1;
                if ( f(elt) )
                    ret.push(elt);
            }
        }
        return ret;
    }
    @tmp.copy = function() {
        return Array.new1($asub(this.__a,0,this.length),this.length);
    }
    @tmp.concat = function(a) {
        var a1 = this.__a;
        var a2 = a.__a;
        var s1 = this.length;
        var s2 = a.length;
        var a3 = $amake(s1 + s2);
        $ablit(a3,0,a1,0,s1);
        $ablit(a3,s1,a2,0,s2);
        return Array.new1(a3,s1 + s2);
    }
    @tmp.__set = function(pos,v) {
        var a = this.__a;
        if ( this.length <= pos ) {
            var l = pos + 1;
            var dlen = l - $asize(a);
            if ( dlen > 0 ) {
                if ( dlen == 1 ) {
                    this.__grow(l);
                    a = this.__a;
                }
                else {
                    a = $amake(l);
                    $ablit(a,0,this.__a,0,this.length);
                    this.__a = a;
                }
            }
            this.length = l;
        }
        a[pos] = v;
        return v;
    }
    @tmp.__neko = function() {
        var a = this.__a;
        var sz = $asize(a);
        if ( sz != this.length ) {
            a = $asub(a,0,this.length);
            this.__a = a;
        }
        return a;
    }
    @tmp.__grow = function(l) {
        var a = this.__a;
        var sz = $asize(a);
        if ( sz >= l ) {
            this.length = l;
            return null;
        }
        var big = (sz * 3) >> 1;
        if ( big < l )
            big = l;
        var a2 = $amake(big);
        $ablit(a2,0,a,0,this.length);
        this.__a = a2;
        this.length = l;
        return null;
    }
    @tmp.__get = function(pos) {
        return this.__a[pos];
    }
    @tmp.__a = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    Array = @tmp;
    @tmp.prototype = @Array;
    @tmp.new1 = function(a,l) {
        var inst = Array.new();
        inst.__a = a;
        inst.length = l;
        return inst;
    }
    @tmp.__construct__ = function() {
        this.__a = $amake(0);
        this.length = 0;
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@Array);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @Array.__class__ = Array;
    @classes.Array = Array;
}
{
    var @tmp = $new(null);
    @IntIterator = @tmp;
    @tmp.next = function() {
        return this.min ++= 1;
    }
    @tmp.min = null;
    @tmp.max = null;
    @tmp.hasNext = function() {
        return this.min < this.max;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    IntIterator = @tmp;
    @tmp.prototype = @IntIterator;
    @tmp.__construct__ = function(min,max) {
        this.min = min;
        this.max = max;
        return null;
    }
    @tmp.new = function(min,max) {
        var @o = $new(null);
        $objsetproto(@o,@IntIterator);
        $call(this.__construct__,@o,$array(min,max));
        return @o;
    }
    @IntIterator.__class__ = IntIterator;
    @classes.IntIterator = IntIterator;
}
{
    var @tmp = $new(null);
    @List = @tmp;
    @tmp.toString = function() {
        var s = StringBuf.new();
        var first = true;
        var l = this.h;
        StringBuf.__add(s.b,String.new("{"));
        while ( l != null ) {
            if ( first )
                first = false
            else
                StringBuf.__add(s.b,String.new(", "))
            StringBuf.__add(s.b,Std.string(l[0]));
            l = l[1];
        }
        StringBuf.__add(s.b,String.new("}"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.remove = function(v) {
        var prev = null;
        var l = this.h;
        while ( l != null ) {
            if ( l[0] == v ) {
                if ( prev == null )
                    this.h = l[1]
                else
                    prev[1] = l[1]
                if ( this.q == l )
                    this.q = prev;
                this.length --= 1;
                return true;
            }
            prev = l;
            l = l[1];
        }
        return false;
    }
    @tmp.q = null;
    @tmp.push = function(item) {
        var x = $array(item,this.h);
        this.h = x;
        if ( this.q == null )
            this.q = x;
        this.length ++= 1;
        return null;
    }
    @tmp.pop = function() {
        if ( this.h == null )
            return null;
        var x = this.h[0];
        this.h = this.h[1];
        if ( this.h == null )
            this.q = null;
        this.length --= 1;
        return x;
    }
    @tmp.map = function(f) {
        var b = List.new();
        var l = this.h;
        while ( l != null ) {
            var v = l[0];
            l = l[1];
            b.add(f(v));
        }
        return b;
    }
    @tmp.length = null;
    @tmp.last = function() {
        if ( this.q == null )
            return null
        else
            return this.q[0]
        return null;
    }
    @tmp.join = function(sep) {
        var s = StringBuf.new();
        var first = true;
        var l = this.h;
        while ( l != null ) {
            if ( first )
                first = false
            else
                StringBuf.__add(s.b,sep)
            StringBuf.__add(s.b,l[0]);
            l = l[1];
        }
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.iterator = function() {
        return {
            h => this.h, 
            hasNext => function() {
                return this.h != null;
            }
            , 
            next => function() {
                if ( this.h == null )
                    return null;
                var x = this.h[0];
                this.h = this.h[1];
                return x;
            }


        };
    }
    @tmp.isEmpty = function() {
        return this.h == null;
    }
    @tmp.h = null;
    @tmp.first = function() {
        if ( this.h == null )
            return null
        else
            return this.h[0]
        return null;
    }
    @tmp.filter = function(f) {
        var l2 = List.new();
        var l = this.h;
        while ( l != null ) {
            var v = l[0];
            l = l[1];
            if ( f(v) )
                l2.add(v);
        }
        return l2;
    }
    @tmp.clear = function() {
        this.h = null;
        this.q = null;
        this.length = 0;
        return null;
    }
    @tmp.add = function(item) {
        var x = $array(item,null);
        if ( this.h == null )
            this.h = x
        else
            this.q[1] = x
        this.q = x;
        this.length ++= 1;
        return null;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    List = @tmp;
    @tmp.prototype = @List;
    @tmp.__construct__ = function() {
        this.length = 0;
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@List);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @List.__class__ = List;
    @classes.List = List;
}
{
    var @tmp = $new(null);
    _Map.@Map_Impl_ = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    _Map.Map_Impl_ = @tmp;
    @tmp.prototype = _Map.@Map_Impl_;
    @tmp.toStringMap = function(t) {
        return haxe.ds.StringMap.new();
    }
    @tmp.toString = function(this1) {
        return this1.toString();
    }
    @tmp.toObjectMap = function(t) {
        return haxe.ds.ObjectMap.new();
    }
    @tmp.toIntMap = function(t) {
        return haxe.ds.IntMap.new();
    }
    @tmp.toEnumValueMapMap = function(t) {
        return haxe.ds.EnumValueMap.new();
    }
    @tmp.set = function(this1,key,value) {
        this1.set(key,value);
        return null;
    }
    @tmp.remove = function(this1,key) {
        return this1.remove(key);
    }
    @tmp.keys = function(this1) {
        return this1.keys();
    }
    @tmp.iterator = function(this1) {
        return this1.iterator();
    }
    @tmp.get = function(this1,key) {
        return this1.get(key);
    }
    @tmp.fromStringMap = function(map) {
        return map;
    }
    @tmp.fromObjectMap = function(map) {
        return map;
    }
    @tmp.fromIntMap = function(map) {
        return map;
    }
    @tmp.exists = function(this1,key) {
        return this1.exists(key);
    }
    @tmp.arrayWrite = function(this1,k,v) {
        this1.set(k,v);
        return v;
    }
    @tmp._new = null;
    _Map.@Map_Impl_.__class__ = _Map.Map_Impl_;
}
{
    var @tmp = $new(null);
    @IMap = @tmp;
    @tmp.toString = null;
    @tmp.set = null;
    @tmp.remove = null;
    @tmp.keys = null;
    @tmp.iterator = null;
    @tmp.get = null;
    @tmp.exists = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    IMap = @tmp;
    @tmp.prototype = @IMap;
    @IMap.__class__ = IMap;
    @classes.IMap = IMap;
}
{
    var @tmp = $new(null);
    @Math = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Math = @tmp;
    @tmp.prototype = @Math;
    @tmp.tan = function(v) {
        return 0.;
    }
    @tmp.sqrt = function(v) {
        return 0.;
    }
    @tmp.sin = function(v) {
        return 0.;
    }
    @tmp.round = function(v) {
        return 0;
    }
    @tmp.random = function() {
        return Math._rand_float(Math.__rnd);
    }
    @tmp.pow = function(v,exp) {
        return 0.;
    }
    @tmp.min = function(a,b) {
        if ( a < b )
            return a
        else
            if ( $isnan(a) )
                return a
            else
                return b

        return null;
    }
    @tmp.max = function(a,b) {
        if ( a < b )
            return b
        else
            if ( $isnan(b) )
                return b
            else
                return a

        return null;
    }
    @tmp.log = function(v) {
        return 0.;
    }
    @tmp.isNaN = function(f) {
        return $isnan(f);
    }
    @tmp.isFinite = function(f) {
        return $not(( $isinfinite(f) || $isnan(f) ));
    }
    @tmp.fround = function(v) {
        return 0.;
    }
    @tmp.floor = function(v) {
        return 0;
    }
    @tmp.ffloor = function(v) {
        return 0.;
    }
    @tmp.fceil = function(v) {
        return 0.;
    }
    @tmp.exp = function(v) {
        return 0.;
    }
    @tmp.cos = function(v) {
        return 0.;
    }
    @tmp.ceil = function(v) {
        return 0;
    }
    @tmp.atan2 = function(y,x) {
        return 0.;
    }
    @tmp.atan = function(v) {
        return 0.;
    }
    @tmp.asin = function(v) {
        return 0.;
    }
    @tmp.acos = function(v) {
        return 0.;
    }
    @tmp.abs = function(v) {
        return 0.;
    }
    @tmp._rand_int = $loader.loadprim(("std" + "@") + "random_int",2);
    @tmp._rand_float = $loader.loadprim(("std" + "@") + "random_float",1);
    @tmp.__rnd = null;
    @tmp.POSITIVE_INFINITY = null;
    @tmp.PI = null;
    @tmp.NaN = null;
    @tmp.NEGATIVE_INFINITY = null;
    @Math.__class__ = Math;
    @classes.Math = Math;
}
{
    var @tmp = $new(null);
    @Reflect = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Reflect = @tmp;
    @tmp.prototype = @Reflect;
    @tmp.setProperty = function(o,field,value) {
        if ( $typeof(o) == $tobject ) {
            var tmp;
            if ( (o.__properties__ != null) && (( tmp = $objget(o.__properties__,$fasthash(String.new("set_").__s + field.__s)) ) != null) )
                $call($objget(o,$fasthash(tmp)),o,$array(value))
            else
                $objset(o,$hash(field.__s),value)
        }
        return null;
    }
    @tmp.setField = function(o,field,value) {
        if ( $typeof(o) == $tobject )
            $objset(o,$hash(field.__s),value);
        return null;
    }
    @tmp.same_closure = null;
    @tmp.makeVarArgs = function(f) {
        f = $array(f);
        {
            return $varargs(function(a) {
                return f[0](Array.new1(a,$asize(a)));
            }
            );
        }
    }
    @tmp.isObject = function(v) {
        return ($typeof(v) == $tobject) && (v.__enum__ == null);
    }
    @tmp.isFunction = function(f) {
        return $typeof(f) == $tfunction;
    }
    @tmp.isEnumValue = function(v) {
        return ($typeof(v) == $tobject) && (v.__enum__ != null);
    }
    @tmp.hasField = function(o,field) {
        return ($typeof(o) == $tobject) && $objfield(o,$fasthash(field.__s));
    }
    @tmp.getProperty = function(o,field) {
        var tmp;
        if ( $typeof(o) != $tobject )
            return null
        else
            if ( (o.__properties__ != null) && (( tmp = $objget(o.__properties__,$fasthash(String.new("get_").__s + field.__s)) ) != null) )
                return $call($objget(o,$fasthash(tmp)),o,$array())
            else
                return $objget(o,$fasthash(field.__s))

        return null;
    }
    @tmp.fields = function(o) {
        if ( $typeof(o) != $tobject )
            return Array.new()
        else {
            var a = $objfields(o);
            var i = 0;
            var hasid = false;
            var l = $asize(a);
            while ( i < l ) {
                var fid = a[i];
                if ( fid == -190054693 )
                    hasid = true;
                a[i] = String.new($field(fid));
                i ++= 1;
            }
            var a1 = Array.new1(a,l);
            if ( hasid )
                a1.remove(String.new("__id__"));
            return a1;
        }
        return null;
    }
    @tmp.field = function(o,field) {
        if ( $typeof(o) != $tobject )
            return null
        else
            return $objget(o,$fasthash(field.__s))
        return null;
    }
    @tmp.deleteField = function(o,field) {
        return $objremove(o,$fasthash(field.__s));
    }
    @tmp.copy = function(o) {
        return $new(o);
    }
    @tmp.compareMethods = function(f1,f2) {
        return Reflect.same_closure(f1,f2);
    }
    @tmp.compare = function(a,b) {
        return $compare(a,b);
    }
    @tmp.callMethod = function(o,func,args) {
        return $call(func,o,args.__neko());
    }
    @Reflect.__class__ = Reflect;
    @classes.Reflect = Reflect;
}
{
    var @tmp = $new(null);
    neko.@Boot = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.Boot = @tmp;
    @tmp.prototype = neko.@Boot;
    @tmp.__unserialize = function(v) {
        if ( $typeof(v) != $tarray )
            $throw(String.new("Invalid serialized class data"));
        {
            var _g1 = 0;
            var _g = $asize(v);
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                if ( $typeof(v[i]) != $tstring )
                    $throw(String.new("Invalid serialized class data"));
            }
        }
        var cl = neko.Boot.__classes;
        {
            var _g1 = 0;
            var _g = $asize(v);
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                cl = $objget(cl,$hash(v[i]));
                if ( cl == null )
                    $throw(String.new("Class not found ") + Std.string(v));
            }
        }
        if ( $typeof(cl) == $tobject ) {
            if ( (cl.__name__ != null) || (cl.__ename__ != null) )
                return cl.prototype;
            if ( (cl.__enum__ != null) && ($typeof(cl.tag) == $tstring) )
                return cl;
        }
        $throw(String.new("Invalid class ") + Std.string(v));
        return null;
    }
    @tmp.__tmp_str = function() {
        return String.new("<...>").__s;
    }
    @tmp.__tagserialize = function(o) {
        var n = o.__enum__.__ename__;
        var x = $amake(n.length + 1);
        {
            var _g1 = 0;
            var _g = n.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                x[i] = n[i].__s;
            }
        }
        x[n.length] = o.tag;
        return x;
    }
    @tmp.__serialize = function(o) {
        if ( o.__class__ != null ) {
            var n = o.__class__.__name__;
            var x = $amake(n.length);
            {
                var _g1 = 0;
                var _g = n.length;
                while ( _g1 < _g ) {
                    var i = _g1 ++= 1;
                    x[i] = n[i].__s;
                }
            }
            return x;
        }
        if ( o.__enum__ != null ) {
            var n = o.__enum__.__ename__;
            var x = $amake(n.length);
            {
                var _g1 = 0;
                var _g = n.length;
                while ( _g1 < _g ) {
                    var i = _g1 ++= 1;
                    x[i] = n[i].__s;
                }
            }
            return x;
        }
        $throw(String.new("Can't serialize"));
        return null;
    }
    @tmp.__interfLoop = function(cc,cl) {
        if ( cc == null )
            return false;
        if ( cc == cl )
            return true;
        var intf = cc.__interfaces__;
        if ( intf != null ) {
            var _g1 = 0;
            var _g = intf.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                var i1 = intf[i];
                if ( (i1 == cl) || neko.Boot.__interfLoop(i1,cl) )
                    return true;
            }
        }
        return neko.Boot.__interfLoop(cc.__super__,cl);
    }
    @tmp.__instanceof = function(o,cl) {
        if ( cl == Dynamic )
            return true;
        {
            var _g = $typeof(o);
            switch ( _g ){
            1 => 
                return (cl == Int) || (cl == Float)
            2 => 
                return (cl == Float) || ((cl == Int) && ($int(o) == o))
            3 => 
                return cl == Bool
            5 => 
                {
                    if ( cl == null )
                        return false;
                    return ((neko.Boot.__interfLoop(o.__class__,cl) || (o.__enum__ == cl)) || ((cl == Class) && (o.__name__ != null))) || ((cl == Enum) && (o.__ename__ != null));
                }

            default => 
                return false
            }
        }
        return null;
    }
    @tmp.__init = function() {
        $exports.__unserialize = neko.Boot.__unserialize;
        $exports.__classes = neko.Boot.__classes;
        return null;
    }
    @tmp.__enum_str = function(e) {
        if ( e.args == null )
            return e.tag;
        var s = e.tag + String.new("(").__s;
        var i = 0;
        var l = $asize(e.args);
        var old = e.__string;
        e.__string = neko.Boot.__tmp_str;
        while ( i < l ) {
            if ( i != 0 )
                s += String.new(",").__s;
            try {
                s += $string(e.args[i]);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var err = @tmp;
                    {
                        s += neko.Boot.__tmp_str();
                    }
                }
                else
                    $rethrow(@tmp)
            }
            i += 1;
        }
        e.__string = old;
        return s + String.new(")").__s;
    }
    neko.@Boot.__class__ = neko.Boot;
}
{
    var @tmp = $new(null);
    @Std = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Std = @tmp;
    @tmp.prototype = @Std;
    @tmp.string = function(s) {
        return String.new($string(s));
    }
    @tmp.random = function(x) {
        return Math._rand_int(Math.__rnd,x);
    }
    @tmp.parseInt = function(x) {
        var t = $typeof(x);
        if ( t == $tint )
            return x;
        if ( t == $tfloat )
            return $int(x);
        if ( t != $tobject )
            return null;
        return $int(x.__s);
    }
    @tmp.parseFloat = function(x) {
        if ( x == null )
            return Math.NaN;
        var t = $float(x.__s);
        if ( t == null )
            t = Math.NaN;
        return t;
    }
    @tmp.is = function(v,t) {
        return neko.Boot.__instanceof(v,t);
    }
    @tmp.int = function(x) {
        if ( x < 0 )
            return Math.ceil(x);
        return Math.floor(x);
    }
    @tmp.instance = function(v,c) {
        if ( Std.is(v,c) )
            return v
        else
            return null
        return null;
    }
    @Std.__class__ = Std;
    @classes.Std = Std;
}
{
    var @tmp = $new(null);
    @String = @tmp;
    @tmp.toUpperCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 97) && (c <= 122) )
                $sset(s2,i,(c - 97) + 65);
            i ++= 1;
        }
        return String.new(s2);
    }
    @tmp.toString = function() {
        return this;
    }
    @tmp.toLowerCase = function() {
        var s = this.__s;
        var l = this.length;
        var s2 = $scopy(s);
        var i = 0;
        while ( i < l ) {
            var c = $sget(s,i);
            if ( (c >= 65) && (c <= 90) )
                $sset(s2,i,(c - 65) + 97);
            i ++= 1;
        }
        return String.new(s2);
    }
    @tmp.substring = function(startIndex,endIndex) {
        if ( endIndex == null )
            endIndex = this.length
        else
            if ( endIndex < 0 )
                endIndex = 0
            else
                if ( endIndex > this.length )
                    endIndex = this.length;


        if ( startIndex < 0 )
            startIndex = 0
        else
            if ( startIndex > this.length )
                startIndex = this.length;

        if ( startIndex > endIndex ) {
            var tmp = startIndex;
            startIndex = endIndex;
            endIndex = tmp;
        }
        return this.substr(startIndex,endIndex - startIndex);
    }
    @tmp.substr = function(pos,len) {
        if ( len == 0 )
            return String.new("");
        var sl = this.length;
        if ( len == null )
            len = sl;
        if ( pos == null )
            pos = 0;
        if ( (pos != 0) && (len < 0) )
            return String.new("");
        if ( pos < 0 ) {
            pos = (sl + pos);
            if ( pos < 0 )
                pos = 0;
        }
        else
            if ( len < 0 )
                len = ((sl + len) - pos);

        if ( (pos + len) > sl )
            len = (sl - pos);
        if ( (pos < 0) || (len <= 0) )
            return String.new("");
        return String.new($ssub(this.__s,pos,len));
    }
    @tmp.split = function(delimiter) {
        var l = String.__split(this.__s,delimiter.__s);
        var a = Array.new();
        if ( l == null ) {
            a.push(String.new(""));
            return a;
        }
        do  {
            a.push(String.new(l[0]));
            l = l[1];
        }
        while ( l != null )
        return a;
    }
    @tmp.length = null;
    @tmp.lastIndexOf = function(str,startIndex) {
        var last = -1;
        if ( startIndex == null )
            startIndex = $ssize(this.__s);
        while ( true ) {
            var p;
            try {
                p = $sfind(this.__s,last + 1,str.__s);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var e = @tmp;
                    {
                        p = null;
                    }
                }
                else
                    $rethrow(@tmp)
            }
            if ( (p == null) || (p > startIndex) )
                return last;
            last = p;
        }
        return null;
    }
    @tmp.indexOf = function(str,startIndex) {
        var p;
        try {
            p = $sfind(this.__s,if ( startIndex == null )
                0
            else
                startIndex
            ,str.__s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    p = null;
                }
            }
            else
                $rethrow(@tmp)
        }
        if ( p == null )
            return -1;
        return p;
    }
    @tmp.charCodeAt = function(index) {
        return $sget(this.__s,index);
    }
    @tmp.charAt = function(index) {
        try {
            var s = $smake(1);
            $sset(s,0,$sget(this.__s,index));
            return String.new(s);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    return String.new("");
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.__radd = function(s) {
        return String.new($string(s) + this.__s);
    }
    @tmp.__compare = function(o) {
        return $compare(this.__s,o.__s);
    }
    @tmp.__add = function(s) {
        return String.new(this.__s + $string(s));
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    String = @tmp;
    @tmp.prototype = @String;
    @tmp.fromCharCode = function(code) {
        var s = $smake(1);
        $sset(s,0,code);
        return String.new(s);
    }
    @tmp.__split = $loader.loadprim(("std" + "@") + "string_split",2);
    @tmp.__is_String = null;
    @tmp.__construct__ = function(string) {
        if ( $typeof(string) != $tstring )
            string = $string(string);
        this.__s = string;
        this.length = $ssize(string);
        return null;
    }
    @tmp.new = function(string) {
        var @o = $new(null);
        $objsetproto(@o,@String);
        $call(this.__construct__,@o,$array(string));
        return @o;
    }
    @String.__class__ = String;
    @classes.String = String;
}
{
    var @tmp = $new(null);
    @StringBuf = @tmp;
    @tmp.toString = function() {
        return String.new(StringBuf.__to_string(this.b));
    }
    @tmp.get_length = function() {
        return $ssize(StringBuf.__to_string(this.b));
    }
    @tmp.b = null;
    @tmp.addSub = function(s,pos,len) {
        StringBuf.__add_sub(this.b,s.__s,pos,if ( len == null )
            s.length - pos
        else
            len
        );
        return null;
    }
    @tmp.addChar = function(c) {
        StringBuf.__add_char(this.b,c);
        return null;
    }
    @tmp.add = function(x) {
        StringBuf.__add(this.b,x);
        return null;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    StringBuf = @tmp;
    @tmp.prototype = @StringBuf;
    @tmp.__to_string = $loader.loadprim(("std" + "@") + "buffer_string",1);
    @tmp.__make = $loader.loadprim(("std" + "@") + "buffer_new",0);
    @tmp.__add_sub = $loader.loadprim(("std" + "@") + "buffer_add_sub",4);
    @tmp.__add_char = $loader.loadprim(("std" + "@") + "buffer_add_char",2);
    @tmp.__add = $loader.loadprim(("std" + "@") + "buffer_add",2);
    @tmp.__construct__ = function() {
        this.b = StringBuf.__make();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,@StringBuf);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @StringBuf.__class__ = StringBuf;
    @StringBuf.__properties__ = {
        get_length => "get_length"

    };
    @classes.StringBuf = StringBuf;
}
{
    var @tmp = $new(null);
    @StringTools = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    StringTools = @tmp;
    @tmp.prototype = @StringTools;
    @tmp.urlEncode = function(s) {
        return String.new(StringTools._urlEncode(s.__s));
    }
    @tmp.urlDecode = function(s) {
        return String.new(StringTools._urlDecode(s.__s));
    }
    @tmp.trim = function(s) {
        return StringTools.ltrim(StringTools.rtrim(s));
    }
    @tmp.startsWith = function(s,start) {
        return (s.length >= start.length) && (s.substr(0,start.length) == start);
    }
    @tmp.rtrim = function(s) {
        var l = s.length;
        var r = 0;
        while ( (r < l) && StringTools.isSpace(s,(l - r) - 1) )
            r ++= 1
        if ( r > 0 )
            return s.substr(0,l - r)
        else
            return s
        return null;
    }
    @tmp.rpad = function(s,c,l) {
        if ( c.length <= 0 )
            return s;
        while ( s.length < l )
            s = (s + c)
        return s;
    }
    @tmp.replace = function(s,sub,by) {
        return s.split(sub).join(by);
    }
    @tmp.ltrim = function(s) {
        var l = s.length;
        var r = 0;
        while ( (r < l) && StringTools.isSpace(s,r) )
            r ++= 1
        if ( r > 0 )
            return s.substr(r,l - r)
        else
            return s
        return null;
    }
    @tmp.lpad = function(s,c,l) {
        if ( c.length <= 0 )
            return s;
        while ( s.length < l )
            s = (c + s)
        return s;
    }
    @tmp.isSpace = function(s,pos) {
        var c = s.charCodeAt(pos);
        return ((c > 8) && (c < 14)) || (c == 32);
    }
    @tmp.isEof = function(c) {
        return c == null;
    }
    @tmp.htmlUnescape = function(s) {
        return s.split(String.new("&gt;")).join(String.new(">")).split(String.new("&lt;")).join(String.new("<")).split(String.new("&quot;")).join(String.new("\"")).split(String.new("&#039;")).join(String.new("'")).split(String.new("&amp;")).join(String.new("&"));
    }
    @tmp.htmlEscape = function(s,quotes) {
        s = s.split(String.new("&")).join(String.new("&amp;")).split(String.new("<")).join(String.new("&lt;")).split(String.new(">")).join(String.new("&gt;"));
        if ( quotes )
            return s.split(String.new("\"")).join(String.new("&quot;")).split(String.new("'")).join(String.new("&#039;"))
        else
            return s
        return null;
    }
    @tmp.hex = function(n,digits) {
        var s = String.new("");
        var hexChars = String.new("0123456789ABCDEF");
        do  {
            s = (hexChars.charAt(n & 15) + s);
            n >>>= 4;
        }
        while ( n > 0 )
        if ( digits != null )
            while ( s.length < digits )
                s = (String.new("0") + s)
            ;
        return s;
    }
    @tmp.fastCodeAt = function(s,index) {
        return $sget(s.__s,index);
    }
    @tmp.endsWith = function(s,end) {
        var elen = end.length;
        var slen = s.length;
        return (slen >= elen) && (s.substr(slen - elen,elen) == end);
    }
    @tmp._urlEncode = $loader.loadprim(("std" + "@") + "url_encode",1);
    @tmp._urlDecode = $loader.loadprim(("std" + "@") + "url_decode",1);
    @StringTools.__class__ = StringTools;
    @classes.StringTools = StringTools;
}
{
    var @tmp = $new(null);
    @Test = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Test = @tmp;
    @tmp.prototype = @Test;
    @tmp.print = function(s) {
        haxe.Log.trace(s,null);
        return null;
    }
    @tmp.main = function() {
        var p = hscript.Parser.new().parseString((String.new("{") + sys.io.File.getContent(String.new("test.hxs"))) + String.new("}"));
        hscript.exec.Interp.new().execute(p);
        return null;
    }
    @Test.__class__ = Test;
    @classes.Test = Test;
}
{
    ValueType = $new(null);
    ValueType = ValueType;
    ValueType.prototype = {
        __enum__ => ValueType, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    ValueType.TUnknown = {
        var @tmp = {
            tag => "TUnknown", 
            index => 8, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TObject = {
        var @tmp = {
            tag => "TObject", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TNull = {
        var @tmp = {
            tag => "TNull", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TInt = {
        var @tmp = {
            tag => "TInt", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TFunction = {
        var @tmp = {
            tag => "TFunction", 
            index => 5, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TFloat = {
        var @tmp = {
            tag => "TFloat", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TEnum = function(e) {
        var @tmp = {
            tag => "TEnum", 
            index => 7, 
            args => $array(e)

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TClass = function(c) {
        var @tmp = {
            tag => "TClass", 
            index => 6, 
            args => $array(c)

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    ValueType.TBool = {
        var @tmp = {
            tag => "TBool", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,ValueType.prototype);
        @tmp;
    }
    @classes.ValueType = ValueType;
}
{
    var @tmp = $new(null);
    @Type = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    Type = @tmp;
    @tmp.prototype = @Type;
    @tmp.typeof = function(v) {
        var _g = $typeof(v);
        switch ( _g ){
        0 => 
            return ValueType.TNull
        1 => 
            return ValueType.TInt
        2 => 
            return ValueType.TFloat
        3 => 
            return ValueType.TBool
        7 => 
            return ValueType.TFunction
        5 => 
            {
                var c = v.__class__;
                if ( c != null )
                    return ValueType.TClass(c)
                else {
                    var e = v.__enum__;
                    if ( e != null )
                        return ValueType.TEnum(e)
                    else
                        return ValueType.TObject
                }
            }

        default => 
            return ValueType.TUnknown
        }
        return null;
    }
    @tmp.resolveEnum = function(name) {
        var path = name.split(String.new("."));
        {
            var o = neko.Boot.__classes;
            if ( $typeof(o) != $tobject )
                e = null
            else
                e = $objget(o,$fasthash(path[0].__s))
        }
        var i = 1;
        while ( (e != null) && (i < path.length) ) {
            e = if ( $typeof(e) != $tobject )
                null
            else
                $objget(e,$fasthash(path[i].__s))
            i += 1;
        }
        if ( (e == null) || (e.__ename__ == null) )
            return null;
        return e;
    }
    @tmp.resolveClass = function(name) {
        var path = name.split(String.new("."));
        {
            var o = neko.Boot.__classes;
            if ( $typeof(o) != $tobject )
                cl = null
            else
                cl = $objget(o,$fasthash(path[0].__s))
        }
        var i = 1;
        while ( (cl != null) && (i < path.length) ) {
            cl = if ( $typeof(cl) != $tobject )
                null
            else
                $objget(cl,$fasthash(path[i].__s))
            i += 1;
        }
        if ( (cl == null) || (cl.__name__ == null) )
            return null;
        return cl;
    }
    @tmp.getSuperClass = function(c) {
        return c.__super__;
    }
    @tmp.getInstanceFields = function(c) {
        var a = Reflect.fields(c.prototype);
        c = c.__super__;
        while ( c != null ) {
            {
                var _g = 0;
                var _g1 = Reflect.fields(c.prototype);
                while ( _g < _g1.length ) {
                    var f = _g1[_g];
                    _g += 1;
                    a.remove(f);
                    a.push(f);
                }
            }
            c = c.__super__;
        }
        a.remove(String.new("__class__"));
        a.remove(String.new("__serialize"));
        a.remove(String.new("__string"));
        a.remove(String.new("__properties__"));
        return a;
    }
    @tmp.getEnumName = function(e) {
        var a = e.__ename__;
        return a.join(String.new("."));
    }
    @tmp.getEnumConstructs = function(e) {
        var a = e.__constructs__;
        return a.copy();
    }
    @tmp.getEnum = function(o) {
        if ( $typeof(o) != $tobject )
            return null;
        return o.__enum__;
    }
    @tmp.getClassName = function(c) {
        if ( c == null )
            return null;
        var a = c.__name__;
        return a.join(String.new("."));
    }
    @tmp.getClassFields = function(c) {
        var a = Reflect.fields(c);
        a.remove(String.new("__name__"));
        a.remove(String.new("__interfaces__"));
        a.remove(String.new("__super__"));
        a.remove(String.new("__string"));
        a.remove(String.new("__construct__"));
        a.remove(String.new("__properties__"));
        a.remove(String.new("prototype"));
        a.remove(String.new("new"));
        return a;
    }
    @tmp.getClass = function(o) {
        if ( $typeof(o) != $tobject )
            return null;
        var p = $objgetproto(o);
        if ( p == null )
            return null;
        return p.__class__;
    }
    @tmp.enumParameters = function(e) {
        if ( e.args == null )
            return Array.new1($array(),0)
        else
            return Array.new1(e.args,$asize(e.args))
        return null;
    }
    @tmp.enumIndex = function(e) {
        return e.index;
    }
    @tmp.enumEq = function(a,b) {
        if ( a == b )
            return true;
        try {
            if ( (a.__enum__ == null) || (a.index != b.index) )
                return false;
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    return false;
                }
            }
            else
                $rethrow(@tmp)
        }
        {
            var _g1 = 0;
            var _g = $asize(a.args);
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                if ( $not(Type.enumEq(a.args[i],b.args[i])) )
                    return false;
            }
        }
        return true;
    }
    @tmp.enumConstructor = function(e) {
        return String.new(e.tag);
    }
    @tmp.createInstance = function(cl,args) {
        var fnew = $objget(cl,$hash(String.new("new").__s));
        var n = $nargs(fnew);
        if ( args.length < n ) {
            args = args.copy();
            while ( args.length < n )
                args.push(null)
        }
        return $call(fnew,cl,args.__neko());
    }
    @tmp.createEnumIndex = function(e,index,params) {
        var c = e.__constructs__[index];
        if ( c == null )
            $throw(index + String.new(" is not a valid enum constructor index"));
        return Type.createEnum(e,c,params);
    }
    @tmp.createEnum = function(e,constr,params) {
        var f = if ( $typeof(e) != $tobject )
            null
        else
            $objget(e,$fasthash(constr.__s))
        ;
        if ( f == null )
            $throw(String.new("No such constructor ") + constr);
        if ( Reflect.isFunction(f) ) {
            if ( params == null )
                $throw((String.new("Constructor ") + constr) + String.new(" need parameters"));
            return $call(f,e,params.__neko());
        }
        if ( (params != null) && (params.length != 0) )
            $throw((String.new("Constructor ") + constr) + String.new(" does not need parameters"));
        return f;
    }
    @tmp.createEmptyInstance = function(cl) {
        var o = $new(null);
        $objsetproto(o,cl.prototype);
        return o;
    }
    @tmp.allEnums = function(e) {
        var all = Array.new1($array(),0);
        var cst = e.__constructs__;
        {
            var _g = 0;
            while ( _g < cst.length ) {
                var c = cst[_g];
                _g += 1;
                var v = if ( $typeof(e) != $tobject )
                    null
                else
                    $objget(e,$fasthash(c.__s))
                ;
                if ( $not(Reflect.isFunction(v)) )
                    all.push(v);
            }
        }
        return all;
    }
    @Type.__class__ = Type;
    @classes.Type = Type;
}
{
    var @tmp = $new(null);
    haxe._EnumFlags.@EnumFlags_Impl_ = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe._EnumFlags.EnumFlags_Impl_ = @tmp;
    @tmp.prototype = haxe._EnumFlags.@EnumFlags_Impl_;
    @tmp.unset = function(this1,v) {
        this1 &= (268435455 - ( 1 << v.index ));
        return null;
    }
    @tmp.toInt = function(this1) {
        return this1;
    }
    @tmp.set = function(this1,v) {
        this1 |= (1 << v.index);
        return null;
    }
    @tmp.ofInt = function(i) {
        return i;
    }
    @tmp.has = function(this1,v) {
        return ( this1 & (1 << v.index) ) != 0;
    }
    @tmp._new = function(i) {
        if ( i == null )
            i = 0;
        {
            return i;
        }
    }
    haxe._EnumFlags.@EnumFlags_Impl_.__class__ = haxe._EnumFlags.EnumFlags_Impl_;
}
{
    var @tmp = $new(null);
    haxe.@Log = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.Log = @tmp;
    @tmp.prototype = haxe.@Log;
    @tmp.trace = function(v,infos) {
        $print(((infos.fileName + String.new(":")) + infos.lineNumber) + String.new(": "),v);
        if ( infos.customParams != null ) {
            var _g = 0;
            var _g1 = infos.customParams;
            while ( _g < _g1.length ) {
                var v1 = _g1[_g];
                _g += 1;
                $print(String.new(","),v1);
            }
        }
        $print(String.new("\n"));
        return null;
    }
    haxe.@Log.__class__ = haxe.Log;
}
{
    var @tmp = $new(null);
    haxe.ds.@BalancedTree = @tmp;
    @tmp.toString = function() {
        return (String.new("{") + this.root.toString()) + String.new("}");
    }
    @tmp.setLoop = function(k,v,node) {
        if ( node == null )
            return haxe.ds.TreeNode.new(null,k,v,null,null);
        var c = this.compare(k,node.key);
        if ( c == 0 )
            return haxe.ds.TreeNode.new(node.left,k,v,node.right,if ( node == null )
                0
            else
                node._height
            )
        else
            if ( c < 0 ) {
                var nl = this.setLoop(k,v,node.left);
                return this.balance(nl,node.key,node.value,node.right);
            }
            else {
                var nr = this.setLoop(k,v,node.right);
                return this.balance(node.left,node.key,node.value,nr);
            }

        return null;
    }
    @tmp.set = function(key,value) {
        this.root = this.setLoop(key,value,this.root);
        return null;
    }
    @tmp.root = null;
    @tmp.removeMinBinding = function(t) {
        if ( t.left == null )
            return t.right
        else
            return this.balance(this.removeMinBinding(t.left),t.key,t.value,t.right)
        return null;
    }
    @tmp.removeLoop = function(k,node) {
        if ( node == null )
            $throw(String.new("Not_found"));
        var c = this.compare(k,node.key);
        if ( c == 0 )
            return this.merge(node.left,node.right)
        else
            if ( c < 0 )
                return this.balance(this.removeLoop(k,node.left),node.key,node.value,node.right)
            else
                return this.balance(node.left,node.key,node.value,this.removeLoop(k,node.right))

        return null;
    }
    @tmp.remove = function(key) {
        try {
            this.root = this.removeLoop(key,this.root);
            return true;
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,String) {
                var e = @tmp;
                {
                    return false;
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.minBinding = function(t) {
        if ( t == null )
            $throw(String.new("Not_found"))
        else
            if ( t.left == null )
                return t
            else
                return this.minBinding(t.left)

        return null;
    }
    @tmp.merge = function(t1,t2) {
        if ( t1 == null )
            return t2;
        if ( t2 == null )
            return t1;
        var t = this.minBinding(t2);
        return this.balance(t1,t.key,t.value,this.removeMinBinding(t2));
    }
    @tmp.keysLoop = function(node,acc) {
        if ( node != null ) {
            this.keysLoop(node.left,acc);
            acc.push(node.key);
            this.keysLoop(node.right,acc);
        }
        return null;
    }
    @tmp.keys = function() {
        var ret = Array.new1($array(),0);
        this.keysLoop(this.root,ret);
        return ret.iterator();
    }
    @tmp.iteratorLoop = function(node,acc) {
        if ( node != null ) {
            this.iteratorLoop(node.left,acc);
            acc.push(node.value);
            this.iteratorLoop(node.right,acc);
        }
        return null;
    }
    @tmp.iterator = function() {
        var ret = Array.new1($array(),0);
        this.iteratorLoop(this.root,ret);
        return ret.iterator();
    }
    @tmp.get = function(key) {
        var node = this.root;
        while ( node != null ) {
            var c = this.compare(key,node.key);
            if ( c == 0 )
                return node.value;
            if ( c < 0 )
                node = node.left
            else
                node = node.right
        }
        return null;
    }
    @tmp.exists = function(key) {
        var node = this.root;
        while ( node != null ) {
            var c = this.compare(key,node.key);
            if ( c == 0 )
                return true
            else
                if ( c < 0 )
                    node = node.left
                else
                    node = node.right

        }
        return false;
    }
    @tmp.compare = function(k1,k2) {
        return $compare(k1,k2);
    }
    @tmp.balance = function(l,k,v,r) {
        var hl;
        if ( l == null )
            hl = 0
        else
            hl = l._height
        var hr;
        if ( r == null )
            hr = 0
        else
            hr = r._height
        if ( hl > (hr + 2) ) {
            if ( {
                var _this = l.left;
                if ( _this == null )
                    0
                else
                    _this._height
            }
             >= {
                var _this = l.right;
                if ( _this == null )
                    0
                else
                    _this._height
            }
             )
                return haxe.ds.TreeNode.new(l.left,l.key,l.value,haxe.ds.TreeNode.new(l.right,k,v,r,null),null)
            else
                return haxe.ds.TreeNode.new(haxe.ds.TreeNode.new(l.left,l.key,l.value,l.right.left,null),l.right.key,l.right.value,haxe.ds.TreeNode.new(l.right.right,k,v,r,null),null)
        }
        else
            if ( hr > (hl + 2) ) {
                if ( {
                    var _this = r.right;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                 > {
                    var _this = r.left;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                 )
                    return haxe.ds.TreeNode.new(haxe.ds.TreeNode.new(l,k,v,r.left,null),r.key,r.value,r.right,null)
                else
                    return haxe.ds.TreeNode.new(haxe.ds.TreeNode.new(l,k,v,r.left.left,null),r.left.key,r.left.value,haxe.ds.TreeNode.new(r.left.right,r.key,r.value,r.right,null),null)
            }
            else
                return haxe.ds.TreeNode.new(l,k,v,r,( if ( hl > hr )
                    hl
                else
                    hr
                 ) + 1)

        return null;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.BalancedTree = @tmp;
    @tmp.prototype = haxe.ds.@BalancedTree;
    @tmp.__construct__ = function() {
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@BalancedTree);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.ds.@BalancedTree.__class__ = haxe.ds.BalancedTree;
}
{
    var @tmp = $new(null);
    haxe.ds.@TreeNode = @tmp;
    @tmp.value = null;
    @tmp.toString = function() {
        return (( if ( this.left == null )
            String.new("")
        else
            this.left.toString() + String.new(", ")
         ) + ( ((String.new("") + Std.string(this.key)) + String.new("=")) + Std.string(this.value) )) + ( if ( this.right == null )
            String.new("")
        else
            String.new(", ") + this.right.toString()
         );
    }
    @tmp.right = null;
    @tmp.left = null;
    @tmp.key = null;
    @tmp._height = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.TreeNode = @tmp;
    @tmp.prototype = haxe.ds.@TreeNode;
    @tmp.__construct__ = function(l,k,v,r,h) {
        if ( h == null )
            h = -1;
        {
            this.left = l;
            this.key = k;
            this.value = v;
            this.right = r;
            if ( h == -1 )
                this._height = (( if ( {
                    var _this = this.left;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                 > {
                    var _this = this.right;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                 ) {
                    var _this = this.left;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                else {
                    var _this = this.right;
                    if ( _this == null )
                        0
                    else
                        _this._height
                }
                 ) + 1)
            else
                this._height = h
        }
        return null;
    }
    @tmp.new = function(l,k,v,r,h) {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@TreeNode);
        $call(this.__construct__,@o,$array(l,k,v,r,h));
        return @o;
    }
    haxe.ds.@TreeNode.__class__ = haxe.ds.TreeNode;
}
{
    var @tmp = $new(null);
    haxe.ds.@EnumValueMap = @tmp;
    @tmp.compareArgs = function(a1,a2) {
        var ld = a1.length - a2.length;
        if ( ld != 0 )
            return ld;
        {
            var _g1 = 0;
            var _g = a1.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                var d = this.compareArg(a1[i],a2[i]);
                if ( d != 0 )
                    return d;
            }
        }
        return 0;
    }
    @tmp.compareArg = function(v1,v2) {
        if ( Reflect.isEnumValue(v1) && Reflect.isEnumValue(v2) )
            return this.compare(v1,v2)
        else
            if ( Std.is(v1,Array) && Std.is(v2,Array) )
                return this.compareArgs(v1,v2)
            else {
                var a = v1;
                var b = v2;
                return $compare(a,b);
            }

        return null;
    }
    @tmp.compare = function(k1,k2) {
        var d = k1.index - k2.index;
        if ( d != 0 )
            return d;
        var p1 = Type.enumParameters(k1);
        var p2 = Type.enumParameters(k2);
        if ( (p1.length == 0) && (p2.length == 0) )
            return 0;
        return this.compareArgs(p1,p2);
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.ds.EnumValueMap = @tmp;
    @tmp.prototype = haxe.ds.@EnumValueMap;
    @tmp.__construct__ = function() {
        $call(haxe.ds.BalancedTree.__construct__,this,$array());
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@EnumValueMap);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(IMap);
    @tmp.__super__ = haxe.ds.BalancedTree;
    $objsetproto(haxe.ds.@EnumValueMap,haxe.ds.@BalancedTree);
    haxe.ds.@EnumValueMap.__class__ = haxe.ds.EnumValueMap;
}
{
    var @tmp = $new(null);
    haxe.ds.@GenericCell = @tmp;
    @tmp.next = null;
    @tmp.elt = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.ds.GenericCell = @tmp;
    @tmp.prototype = haxe.ds.@GenericCell;
    @tmp.__construct__ = function(elt,next) {
        this.elt = elt;
        this.next = next;
        return null;
    }
    @tmp.new = function(elt,next) {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@GenericCell);
        $call(this.__construct__,@o,$array(elt,next));
        return @o;
    }
    haxe.ds.@GenericCell.__class__ = haxe.ds.GenericCell;
}
{
    var @tmp = $new(null);
    haxe.ds.@GenericStack = @tmp;
    @tmp.toString = function() {
        var a = Array.new();
        var l = this.head;
        while ( l != null ) {
            a.push(l.elt);
            l = l.next;
        }
        return (String.new("{") + a.join(String.new(","))) + String.new("}");
    }
    @tmp.remove = function(v) {
        var prev = null;
        var l = this.head;
        while ( l != null ) {
            if ( l.elt == v ) {
                if ( prev == null )
                    this.head = l.next
                else
                    prev.next = l.next
                break;;
            }
            prev = l;
            l = l.next;
        }
        return l != null;
    }
    @tmp.pop = function() {
        var k = this.head;
        if ( k == null )
            return null
        else {
            this.head = k.next;
            return k.elt;
        }
        return null;
    }
    @tmp.iterator = function() {
        var l = $array(this.head);
        return {
            hasNext => function() {
                return l[0] != null;
            }
            , 
            next => function() {
                var k = l[0];
                l[0] = k.next;
                return k.elt;
            }


        };
    }
    @tmp.isEmpty = function() {
        return this.head == null;
    }
    @tmp.head = null;
    @tmp.first = function() {
        if ( this.head == null )
            return null
        else
            return this.head.elt
        return null;
    }
    @tmp.add = function(item) {
        this.head = haxe.ds.GenericCell.new(item,this.head);
        return null;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.GenericStack = @tmp;
    @tmp.prototype = haxe.ds.@GenericStack;
    @tmp.__construct__ = function() {
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@GenericStack);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.ds.@GenericStack.__class__ = haxe.ds.GenericStack;
}
{
    var @tmp = $new(null);
    haxe.ds._HashMap.@HashMap_Impl_ = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.ds._HashMap.HashMap_Impl_ = @tmp;
    @tmp.prototype = haxe.ds._HashMap.@HashMap_Impl_;
    @tmp.set = function(this1,k,v) {
        $hset(this1.keys.h,k.hashCode(),k,null);
        $hset(this1.values.h,k.hashCode(),v,null);
        return null;
    }
    @tmp.remove = function(this1,k) {
        $hremove(this1.values.h,k.hashCode(),null);
        return $hremove(this1.keys.h,k.hashCode(),null);
    }
    @tmp.keys = function(this1) {
        return this1.keys.iterator();
    }
    @tmp.iterator = function(this1) {
        return this1.values.iterator();
    }
    @tmp.get = function(this1,k) {
        return this1.values.get(k.hashCode());
    }
    @tmp.exists = function(this1,k) {
        return $hmem(this1.values.h,k.hashCode(),null);
    }
    @tmp._new = function() {
        return {
            keys => haxe.ds.IntMap.new(), 
            values => haxe.ds.IntMap.new()

        };
    }
    haxe.ds._HashMap.@HashMap_Impl_.__class__ = haxe.ds._HashMap.HashMap_Impl_;
}
{
    var @tmp = $new(null);
    haxe.ds.@IntMap = @tmp;
    @tmp.toString = function() {
        var s = StringBuf.new();
        StringBuf.__add(s.b,String.new("{"));
        var it = this.keys();
        {
            var @tmp = it;
            while @tmp.hasNext() {
                var i = @tmp.next();
                {
                    StringBuf.__add(s.b,i);
                    StringBuf.__add(s.b,String.new(" => "));
                    StringBuf.__add(s.b,Std.string(this.get(i)));
                    if ( it.hasNext() )
                        StringBuf.__add(s.b,String.new(", "));
                }
            }
        }
        StringBuf.__add(s.b,String.new("}"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.set = function(key,value) {
        $hset(this.h,key,value,null);
        return null;
    }
    @tmp.remove = function(key) {
        return $hremove(this.h,key,null);
    }
    @tmp.keys = function() {
        var l = $array(List.new());
        $hiter(this.h,function(k,_) {
            l[0].push(k);
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.iterator = function() {
        var l = $array(List.new());
        $hiter(this.h,function(_,v) {
            l[0].push(v);
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.h = null;
    @tmp.get = function(key) {
        return $hget(this.h,key,null);
    }
    @tmp.exists = function(key) {
        return $hmem(this.h,key,null);
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.IntMap = @tmp;
    @tmp.prototype = haxe.ds.@IntMap;
    @tmp.__construct__ = function() {
        this.h = $hnew(0);
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@IntMap);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(IMap);
    haxe.ds.@IntMap.__class__ = haxe.ds.IntMap;
}
{
    var @tmp = $new(null);
    haxe.ds.@ObjectMap = @tmp;
    @tmp.toString = function() {
        var s = StringBuf.new();
        StringBuf.__add(s.b,String.new("{"));
        var it = this.keys();
        {
            var @tmp = it;
            while @tmp.hasNext() {
                var i = @tmp.next();
                {
                    StringBuf.__add(s.b,Std.string(i));
                    StringBuf.__add(s.b,String.new(" => "));
                    StringBuf.__add(s.b,Std.string(this.get(i)));
                    if ( it.hasNext() )
                        StringBuf.__add(s.b,String.new(", "));
                }
            }
        }
        StringBuf.__add(s.b,String.new("}"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.set = function(key,value) {
        var id;
        if ( key.__id__ != null )
            id = key.__id__
        else {
            var newId = haxe.ds.ObjectMap.count ++= 1;
            key.__id__ = newId;
            id = newId;
        }
        $hset(this.h,id,value,null);
        $hset(this.k,id,key,null);
        return null;
    }
    @tmp.remove = function(key) {
        var id = key.__id__;
        $hremove(this.h,id,null);
        return $hremove(this.k,id,null);
    }
    @tmp.keys = function() {
        var l = $array(List.new());
        $hiter(this.k,function(_,v) {
            l[0].push(v);
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.k = null;
    @tmp.iterator = function() {
        var l = $array(List.new());
        $hiter(this.h,function(_,v) {
            l[0].push(v);
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.h = null;
    @tmp.get = function(key) {
        return $hget(this.h,key.__id__,null);
    }
    @tmp.exists = function(key) {
        return $hmem(this.h,key.__id__,null);
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.ObjectMap = @tmp;
    @tmp.prototype = haxe.ds.@ObjectMap;
    @tmp.getId = function(obj) {
        return obj.__id__;
    }
    @tmp.count = null;
    @tmp.assignId = function(obj) {
        var newId = haxe.ds.ObjectMap.count ++= 1;
        obj.__id__ = newId;
        return newId;
    }
    @tmp.__construct__ = function() {
        this.h = $hnew(0);
        this.k = $hnew(0);
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@ObjectMap);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(IMap);
    haxe.ds.@ObjectMap.__class__ = haxe.ds.ObjectMap;
}
{
    var @tmp = $new(null);
    haxe.ds.@StringMap = @tmp;
    @tmp.toString = function() {
        var s = StringBuf.new();
        StringBuf.__add(s.b,String.new("{"));
        var it = this.keys();
        {
            var @tmp = it;
            while @tmp.hasNext() {
                var i = @tmp.next();
                {
                    StringBuf.__add(s.b,i);
                    StringBuf.__add(s.b,String.new(" => "));
                    StringBuf.__add(s.b,Std.string($hget(this.h,i.__s,null)));
                    if ( it.hasNext() )
                        StringBuf.__add(s.b,String.new(", "));
                }
            }
        }
        StringBuf.__add(s.b,String.new("}"));
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.set = function(key,value) {
        $hset(this.h,key.__s,value,null);
        return null;
    }
    @tmp.remove = function(key) {
        return $hremove(this.h,key.__s,null);
    }
    @tmp.keys = function() {
        var l = $array(List.new());
        $hiter(this.h,function(k,_) {
            l[0].push(String.new(k));
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.iterator = function() {
        var l = $array(List.new());
        $hiter(this.h,function(_,v) {
            l[0].push(v);
            return null;
        }
        );
        return l[0].iterator();
    }
    @tmp.h = null;
    @tmp.get = function(key) {
        return $hget(this.h,key.__s,null);
    }
    @tmp.exists = function(key) {
        return $hmem(this.h,key.__s,null);
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.StringMap = @tmp;
    @tmp.prototype = haxe.ds.@StringMap;
    @tmp.__construct__ = function() {
        this.h = $hnew(0);
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@StringMap);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(IMap);
    haxe.ds.@StringMap.__class__ = haxe.ds.StringMap;
}
{
    var @tmp = $new(null);
    haxe.ds.@WeakMap = @tmp;
    @tmp.toString = function() {
        return null;
    }
    @tmp.set = function(key,value) {
        return null;
    }
    @tmp.remove = function(key) {
        return false;
    }
    @tmp.keys = function() {
        return null;
    }
    @tmp.iterator = function() {
        return null;
    }
    @tmp.get = function(key) {
        return null;
    }
    @tmp.exists = function(key) {
        return false;
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.ds.WeakMap = @tmp;
    @tmp.prototype = haxe.ds.@WeakMap;
    @tmp.__construct__ = function() {
        $throw(String.new("Not implemented for this platform"));
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.ds.@WeakMap);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__interfaces__ = $array(IMap);
    haxe.ds.@WeakMap.__class__ = haxe.ds.WeakMap;
}
{
    var @tmp = $new(null);
    haxe.io.@Bytes = @tmp;
    @tmp.toString = function() {
        return String.new($ssub(this.b,0,this.length));
    }
    @tmp.toHex = function() {
        var s = StringBuf.new();
        var chars = Array.new1($array(),0);
        var str = String.new("0123456789abcdef");
        {
            var _g1 = 0;
            var _g = str.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                chars.push(str.charCodeAt(i));
            }
        }
        {
            var _g1 = 0;
            var _g = this.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                var c = $sget(this.b,i);
                StringBuf.__add_char(s.b,chars[c >> 4]);
                StringBuf.__add_char(s.b,chars[c & 15]);
            }
        }
        return String.new(StringBuf.__to_string(s.b));
    }
    @tmp.sub = function(pos,len) {
        try {
            return haxe.io.Bytes.new(len,$ssub(this.b,pos,len));
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.set = function(pos,v) {
        $sset(this.b,pos,v);
        return null;
    }
    @tmp.readString = function(pos,len) {
        try {
            return String.new($ssub(this.b,pos,len));
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.length = null;
    @tmp.getData = function() {
        return this.b;
    }
    @tmp.get = function(pos) {
        return $sget(this.b,pos);
    }
    @tmp.compare = function(other) {
        return $compare(this.b,other.b);
    }
    @tmp.blit = function(pos,src,srcpos,len) {
        try {
            $sblit(this.b,pos,src.b,srcpos,len);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.b = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.io.Bytes = @tmp;
    @tmp.prototype = haxe.io.@Bytes;
    @tmp.ofString = function(s) {
        return haxe.io.Bytes.new(s.length,$ssub(s.__s,0,s.length));
    }
    @tmp.ofData = function(b) {
        return haxe.io.Bytes.new($ssize(b),b);
    }
    @tmp.fastGet = function(b,pos) {
        return $sget(b,pos);
    }
    @tmp.alloc = function(length) {
        return haxe.io.Bytes.new(length,$smake(length));
    }
    @tmp.__construct__ = function(length,b) {
        this.length = length;
        this.b = b;
        return null;
    }
    @tmp.new = function(length,b) {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@Bytes);
        $call(this.__construct__,@o,$array(length,b));
        return @o;
    }
    haxe.io.@Bytes.__class__ = haxe.io.Bytes;
}
{
    var @tmp = $new(null);
    haxe.io.@BytesBuffer = @tmp;
    @tmp.get_length = function() {
        return $ssize(StringBuf.__to_string(this.b));
    }
    @tmp.getBytes = function() {
        var str = StringBuf.__to_string(this.b);
        var bytes = haxe.io.Bytes.new($ssize(str),str);
        this.b = null;
        return bytes;
    }
    @tmp.b = null;
    @tmp.addBytes = function(src,pos,len) {
        try {
            StringBuf.__add_sub(this.b,src.b,pos,len);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.addByte = function(byt) {
        StringBuf.__add_char(this.b,byt);
        return null;
    }
    @tmp.add = function(src) {
        StringBuf.__add(this.b,src.b);
        return null;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.BytesBuffer = @tmp;
    @tmp.prototype = haxe.io.@BytesBuffer;
    @tmp.__construct__ = function() {
        this.b = StringBuf.__make();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@BytesBuffer);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.io.@BytesBuffer.__class__ = haxe.io.BytesBuffer;
    haxe.io.@BytesBuffer.__properties__ = {
        get_length => "get_length"

    };
}
{
    var @tmp = $new(null);
    haxe.io.@Input = @tmp;
    @tmp.set_bigEndian = function(b) {
        this.bigEndian = b;
        return b;
    }
    @tmp.readUntil = function(end) {
        var buf = StringBuf.new();
        var last;
        while ( ( last = this.readByte() ) != end )
            StringBuf.__add_char(buf.b,last)
        return String.new(StringBuf.__to_string(buf.b));
    }
    @tmp.readUInt24 = function() {
        var ch1 = this.readByte();
        var ch2 = this.readByte();
        var ch3 = this.readByte();
        if ( this.bigEndian )
            return (ch3 | (ch2 << 8)) | (ch1 << 16)
        else
            return (ch1 | (ch2 << 8)) | (ch3 << 16)
        return null;
    }
    @tmp.readUInt16 = function() {
        var ch1 = this.readByte();
        var ch2 = this.readByte();
        if ( this.bigEndian )
            return ch2 | (ch1 << 8)
        else
            return ch1 | (ch2 << 8)
        return null;
    }
    @tmp.readString = function(len) {
        var b = haxe.io.Bytes.alloc(len);
        this.readFullBytes(b,0,len);
        return String.new(b.b);
    }
    @tmp.readLine = function() {
        var buf = StringBuf.new();
        var last;
        var s;
        try {
            while ( ( last = this.readByte() ) != 10 )
                StringBuf.__add_char(buf.b,last)
            s = String.new(StringBuf.__to_string(buf.b));
            if ( s.charCodeAt(s.length - 1) == 13 )
                s = s.substr(0,-1);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,haxe.io.Eof) {
                var e = @tmp;
                {
                    s = String.new(StringBuf.__to_string(buf.b));
                    if ( s.length == 0 )
                        neko.Lib.rethrow(e);
                }
            }
            else
                $rethrow(@tmp)
        }
        return s;
    }
    @tmp.readInt8 = function() {
        var n = this.readByte();
        if ( n >= 128 )
            return n - 256;
        return n;
    }
    @tmp.readInt32 = function() {
        var ch1 = this.readByte();
        var ch2 = this.readByte();
        var ch3 = this.readByte();
        var ch4 = this.readByte();
        if ( this.bigEndian )
            return ((ch4 | (ch3 << 8)) | (ch2 << 16)) | (ch1 << 24)
        else
            return ((ch1 | (ch2 << 8)) | (ch3 << 16)) | (ch4 << 24)
        return null;
    }
    @tmp.readInt24 = function() {
        var ch1 = this.readByte();
        var ch2 = this.readByte();
        var ch3 = this.readByte();
        var n;
        if ( this.bigEndian )
            n = ((ch3 | (ch2 << 8)) | (ch1 << 16))
        else
            n = ((ch1 | (ch2 << 8)) | (ch3 << 16))
        if ( ( n & 8388608 ) != 0 )
            return n - 16777216;
        return n;
    }
    @tmp.readInt16 = function() {
        var ch1 = this.readByte();
        var ch2 = this.readByte();
        var n;
        if ( this.bigEndian )
            n = (ch2 | (ch1 << 8))
        else
            n = (ch1 | (ch2 << 8))
        if ( ( n & 32768 ) != 0 )
            return n - 65536;
        return n;
    }
    @tmp.readFullBytes = function(s,pos,len) {
        while ( len > 0 ) {
            var k = this.readBytes(s,pos,len);
            pos += k;
            len -= k;
        }
        return null;
    }
    @tmp.readFloat = function() {
        return haxe.io.Input._float_of_bytes(this.read(4).b,this.bigEndian);
    }
    @tmp.readDouble = function() {
        return haxe.io.Input._double_of_bytes(this.read(8).b,this.bigEndian);
    }
    @tmp.readBytes = function(s,pos,len) {
        var k = len;
        var b = s.b;
        if ( ((pos < 0) || (len < 0)) || ((pos + len) > s.length) )
            $throw(haxe.io.Error.OutsideBounds);
        while ( k > 0 ) {
            $sset(b,pos,this.readByte());
            pos ++= 1;
            k --= 1;
        }
        return len;
    }
    @tmp.readByte = function() {
        $throw(String.new("Not implemented"));
        return null;
    }
    @tmp.readAll = function(bufsize) {
        if ( bufsize == null )
            bufsize = 16384;
        var buf = haxe.io.Bytes.alloc(bufsize);
        var total = haxe.io.BytesBuffer.new();
        try {
            while ( true ) {
                var len = this.readBytes(buf,0,bufsize);
                if ( len == 0 )
                    $throw(haxe.io.Error.Blocked);
                try {
                    StringBuf.__add_sub(total.b,buf.b,0,len);
                }
                catch @tmp {
                    if $typeof(@tmp) == $tstring
                        @tmp = String.new(@tmp);
                    if true {
                        var e = @tmp;
                        {
                            $throw(haxe.io.Error.OutsideBounds);
                        }
                    }
                    else
                        $rethrow(@tmp)
                }
            }
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,haxe.io.Eof) {
                var e = @tmp;
                {
                }
            }
            else
                $rethrow(@tmp)
        }
        return total.getBytes();
    }
    @tmp.read = function(nbytes) {
        var s = haxe.io.Bytes.alloc(nbytes);
        var p = 0;
        while ( nbytes > 0 ) {
            var k = this.readBytes(s,p,nbytes);
            if ( k == 0 )
                $throw(haxe.io.Error.Blocked);
            p += k;
            nbytes -= k;
        }
        return s;
    }
    @tmp.close = function() {
        return null;
    }
    @tmp.bigEndian = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.Input = @tmp;
    @tmp.prototype = haxe.io.@Input;
    @tmp._float_of_bytes = $loader.loadprim(("std" + "@") + "float_of_bytes",2);
    @tmp._double_of_bytes = $loader.loadprim(("std" + "@") + "double_of_bytes",2);
    haxe.io.@Input.__class__ = haxe.io.Input;
    haxe.io.@Input.__properties__ = {
        set_bigEndian => "set_bigEndian"

    };
}
{
    var @tmp = $new(null);
    haxe.io.@BytesInput = @tmp;
    @tmp.totlen = null;
    @tmp.set_position = function(p) {
        return this.pos = p;
    }
    @tmp.readBytes = function(buf,pos,len) {
        if ( (this.len == 0) && (len > 0) )
            $throw(haxe.io.Eof.new());
        if ( this.len < len )
            len = this.len;
        try {
            $sblit(buf.b,pos,this.b,this.pos,len);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        this.pos += len;
        this.len -= len;
        return len;
    }
    @tmp.readByte = function() {
        if ( this.len == 0 )
            $throw(haxe.io.Eof.new());
        this.len --= 1;
        return $sget(this.b,this.pos ++= 1);
    }
    @tmp.pos = null;
    @tmp.len = null;
    @tmp.get_position = function() {
        return this.pos;
    }
    @tmp.get_length = function() {
        return this.totlen;
    }
    @tmp.b = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.BytesInput = @tmp;
    @tmp.prototype = haxe.io.@BytesInput;
    @tmp.__construct__ = function(b,pos,len) {
        if ( pos == null )
            pos = 0;
        if ( len == null )
            len = (b.length - pos);
        if ( ((pos < 0) || (len < 0)) || ((pos + len) > b.length) )
            $throw(haxe.io.Error.OutsideBounds);
        this.b = b.b;
        this.pos = pos;
        this.len = len;
        this.totlen = len;
        return null;
    }
    @tmp.new = function(b,pos,len) {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@BytesInput);
        $call(this.__construct__,@o,$array(b,pos,len));
        return @o;
    }
    @tmp.__super__ = haxe.io.Input;
    $objsetproto(haxe.io.@BytesInput,haxe.io.@Input);
    haxe.io.@BytesInput.__class__ = haxe.io.BytesInput;
    haxe.io.@BytesInput.__properties__ = {
        var @tmp = {
            set_position => "set_position", 
            get_position => "get_position", 
            get_length => "get_length"

        };
        $objsetproto(@tmp,haxe.io.Input.prototype.__properties__);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    haxe.io.@Output = @tmp;
    @tmp.writeUInt24 = function(x) {
        if ( (x < 0) || (x >= 16777216) )
            $throw(haxe.io.Error.Overflow);
        if ( this.bigEndian ) {
            this.writeByte(x >> 16);
            this.writeByte((x >> 8) & 255);
            this.writeByte(x & 255);
        }
        else {
            this.writeByte(x & 255);
            this.writeByte((x >> 8) & 255);
            this.writeByte(x >> 16);
        }
        return null;
    }
    @tmp.writeUInt16 = function(x) {
        if ( (x < 0) || (x >= 65536) )
            $throw(haxe.io.Error.Overflow);
        if ( this.bigEndian ) {
            this.writeByte(x >> 8);
            this.writeByte(x & 255);
        }
        else {
            this.writeByte(x & 255);
            this.writeByte(x >> 8);
        }
        return null;
    }
    @tmp.writeString = function(s) {
        var b = haxe.io.Bytes.new(s.length,s.__s);
        this.writeFullBytes(b,0,b.length);
        return null;
    }
    @tmp.writeInt8 = function(x) {
        if ( (x < -128) || (x >= 128) )
            $throw(haxe.io.Error.Overflow);
        this.writeByte(x & 255);
        return null;
    }
    @tmp.writeInt32 = function(x) {
        if ( this.bigEndian ) {
            this.writeByte(x >>> 24);
            this.writeByte((x >> 16) & 255);
            this.writeByte((x >> 8) & 255);
            this.writeByte(x & 255);
        }
        else {
            this.writeByte(x & 255);
            this.writeByte((x >> 8) & 255);
            this.writeByte((x >> 16) & 255);
            this.writeByte(x >>> 24);
        }
        return null;
    }
    @tmp.writeInt24 = function(x) {
        if ( (x < -8388608) || (x >= 8388608) )
            $throw(haxe.io.Error.Overflow);
        this.writeUInt24(x & 16777215);
        return null;
    }
    @tmp.writeInt16 = function(x) {
        if ( (x < -32768) || (x >= 32768) )
            $throw(haxe.io.Error.Overflow);
        this.writeUInt16(x & 65535);
        return null;
    }
    @tmp.writeInput = function(i,bufsize) {
        if ( bufsize == null )
            bufsize = 4096;
        var buf = haxe.io.Bytes.alloc(bufsize);
        try {
            while ( true ) {
                var len = i.readBytes(buf,0,bufsize);
                if ( len == 0 )
                    $throw(haxe.io.Error.Blocked);
                var p = 0;
                while ( len > 0 ) {
                    var k = this.writeBytes(buf,p,len);
                    if ( k == 0 )
                        $throw(haxe.io.Error.Blocked);
                    p += k;
                    len -= k;
                }
            }
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,haxe.io.Eof) {
                var e = @tmp;
                {
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.writeFullBytes = function(s,pos,len) {
        while ( len > 0 ) {
            var k = this.writeBytes(s,pos,len);
            pos += k;
            len -= k;
        }
        return null;
    }
    @tmp.writeFloat = function(x) {
        this.write(haxe.io.Bytes.new(4,haxe.io.Output._float_bytes(x,this.bigEndian)));
        return null;
    }
    @tmp.writeDouble = function(x) {
        this.write(haxe.io.Bytes.new(8,haxe.io.Output._double_bytes(x,this.bigEndian)));
        return null;
    }
    @tmp.writeBytes = function(s,pos,len) {
        var k = len;
        var b = s.b;
        while ( k > 0 ) {
            this.writeByte($sget(b,pos));
            pos ++= 1;
            k --= 1;
        }
        return len;
    }
    @tmp.writeByte = function(c) {
        $throw(String.new("Not implemented"));
        return null;
    }
    @tmp.write = function(s) {
        var l = s.length;
        var p = 0;
        while ( l > 0 ) {
            var k = this.writeBytes(s,p,l);
            if ( k == 0 )
                $throw(haxe.io.Error.Blocked);
            p += k;
            l -= k;
        }
        return null;
    }
    @tmp.set_bigEndian = function(b) {
        this.bigEndian = b;
        return b;
    }
    @tmp.prepare = function(nbytes) {
        return null;
    }
    @tmp.flush = function() {
        return null;
    }
    @tmp.close = function() {
        return null;
    }
    @tmp.bigEndian = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.Output = @tmp;
    @tmp.prototype = haxe.io.@Output;
    @tmp._float_bytes = $loader.loadprim(("std" + "@") + "float_bytes",2);
    @tmp._double_bytes = $loader.loadprim(("std" + "@") + "double_bytes",2);
    @tmp.LN2 = null;
    haxe.io.@Output.__class__ = haxe.io.Output;
    haxe.io.@Output.__properties__ = {
        set_bigEndian => "set_bigEndian"

    };
}
{
    var @tmp = $new(null);
    haxe.io.@BytesOutput = @tmp;
    @tmp.writeBytes = function(buf,pos,len) {
        try {
            StringBuf.__add_sub(this.b.b,buf.b,pos,len);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.OutsideBounds);
                }
            }
            else
                $rethrow(@tmp)
        }
        return len;
    }
    @tmp.writeByte = function(c) {
        StringBuf.__add_char(this.b.b,c);
        return null;
    }
    @tmp.get_length = function() {
        return $ssize(StringBuf.__to_string(this.b.b));
    }
    @tmp.getBytes = function() {
        return this.b.getBytes();
    }
    @tmp.b = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.BytesOutput = @tmp;
    @tmp.prototype = haxe.io.@BytesOutput;
    @tmp.__construct__ = function() {
        this.b = haxe.io.BytesBuffer.new();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@BytesOutput);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    @tmp.__super__ = haxe.io.Output;
    $objsetproto(haxe.io.@BytesOutput,haxe.io.@Output);
    haxe.io.@BytesOutput.__class__ = haxe.io.BytesOutput;
    haxe.io.@BytesOutput.__properties__ = {
        var @tmp = {
            get_length => "get_length"

        };
        $objsetproto(@tmp,haxe.io.Output.prototype.__properties__);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    haxe.io.@Eof = @tmp;
    @tmp.toString = function() {
        return String.new("Eof");
    }
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.io.Eof = @tmp;
    @tmp.prototype = haxe.io.@Eof;
    @tmp.__construct__ = function() {
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@Eof);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    haxe.io.@Eof.__class__ = haxe.io.Eof;
}
{
    @G0 = $new(null);
    haxe.io.Error = @G0;
    @G0.prototype = {
        __enum__ => @G0, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G0.Overflow = {
        var @tmp = {
            tag => "Overflow", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.OutsideBounds = {
        var @tmp = {
            tag => "OutsideBounds", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.Custom = function(e) {
        var @tmp = {
            tag => "Custom", 
            index => 3, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
    @G0.Blocked = {
        var @tmp = {
            tag => "Blocked", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G0.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    haxe.io.@StringInput = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    haxe.io.StringInput = @tmp;
    @tmp.prototype = haxe.io.@StringInput;
    @tmp.__construct__ = function(s) {
        $call(haxe.io.BytesInput.__construct__,this,$array(haxe.io.Bytes.new(s.length,s.__s),null,null));
        return null;
    }
    @tmp.new = function(s) {
        var @o = $new(null);
        $objsetproto(@o,haxe.io.@StringInput);
        $call(this.__construct__,@o,$array(s));
        return @o;
    }
    @tmp.__super__ = haxe.io.BytesInput;
    $objsetproto(haxe.io.@StringInput,haxe.io.@BytesInput);
    haxe.io.@StringInput.__class__ = haxe.io.StringInput;
}
{
    @G1 = $new(null);
    haxe.macro.Constant = @G1;
    @G1.prototype = {
        __enum__ => @G1, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G1.CString = function(s) {
        var @tmp = {
            tag => "CString", 
            index => 2, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G1.prototype);
        @tmp;
    }
    @G1.CRegexp = function(r,opt) {
        var @tmp = {
            tag => "CRegexp", 
            index => 4, 
            args => $array(r,opt)

        };
        $objsetproto(@tmp,@G1.prototype);
        @tmp;
    }
    @G1.CInt = function(v) {
        var @tmp = {
            tag => "CInt", 
            index => 0, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G1.prototype);
        @tmp;
    }
    @G1.CIdent = function(s) {
        var @tmp = {
            tag => "CIdent", 
            index => 3, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G1.prototype);
        @tmp;
    }
    @G1.CFloat = function(f) {
        var @tmp = {
            tag => "CFloat", 
            index => 1, 
            args => $array(f)

        };
        $objsetproto(@tmp,@G1.prototype);
        @tmp;
    }
}
{
    @G2 = $new(null);
    haxe.macro.Binop = @G2;
    @G2.prototype = {
        __enum__ => @G2, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G2.OpXor = {
        var @tmp = {
            tag => "OpXor", 
            index => 13, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpUShr = {
        var @tmp = {
            tag => "OpUShr", 
            index => 18, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpSub = {
        var @tmp = {
            tag => "OpSub", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpShr = {
        var @tmp = {
            tag => "OpShr", 
            index => 17, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpShl = {
        var @tmp = {
            tag => "OpShl", 
            index => 16, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpOr = {
        var @tmp = {
            tag => "OpOr", 
            index => 12, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpNotEq = {
        var @tmp = {
            tag => "OpNotEq", 
            index => 6, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpMult = {
        var @tmp = {
            tag => "OpMult", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpMod = {
        var @tmp = {
            tag => "OpMod", 
            index => 19, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpLte = {
        var @tmp = {
            tag => "OpLte", 
            index => 10, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpLt = {
        var @tmp = {
            tag => "OpLt", 
            index => 9, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpInterval = {
        var @tmp = {
            tag => "OpInterval", 
            index => 21, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpGte = {
        var @tmp = {
            tag => "OpGte", 
            index => 8, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpGt = {
        var @tmp = {
            tag => "OpGt", 
            index => 7, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpEq = {
        var @tmp = {
            tag => "OpEq", 
            index => 5, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpDiv = {
        var @tmp = {
            tag => "OpDiv", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpBoolOr = {
        var @tmp = {
            tag => "OpBoolOr", 
            index => 15, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpBoolAnd = {
        var @tmp = {
            tag => "OpBoolAnd", 
            index => 14, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpAssignOp = function(op) {
        var @tmp = {
            tag => "OpAssignOp", 
            index => 20, 
            args => $array(op)

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpAssign = {
        var @tmp = {
            tag => "OpAssign", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpArrow = {
        var @tmp = {
            tag => "OpArrow", 
            index => 22, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpAnd = {
        var @tmp = {
            tag => "OpAnd", 
            index => 11, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
    @G2.OpAdd = {
        var @tmp = {
            tag => "OpAdd", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G2.prototype);
        @tmp;
    }
}
{
    @G3 = $new(null);
    haxe.macro.Unop = @G3;
    @G3.prototype = {
        __enum__ => @G3, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G3.OpNot = {
        var @tmp = {
            tag => "OpNot", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G3.prototype);
        @tmp;
    }
    @G3.OpNegBits = {
        var @tmp = {
            tag => "OpNegBits", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G3.prototype);
        @tmp;
    }
    @G3.OpNeg = {
        var @tmp = {
            tag => "OpNeg", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G3.prototype);
        @tmp;
    }
    @G3.OpIncrement = {
        var @tmp = {
            tag => "OpIncrement", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G3.prototype);
        @tmp;
    }
    @G3.OpDecrement = {
        var @tmp = {
            tag => "OpDecrement", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G3.prototype);
        @tmp;
    }
}
{
    @G4 = $new(null);
    haxe.macro.ExprDef = @G4;
    @G4.prototype = {
        __enum__ => @G4, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G4.EWhile = function(econd,e,normalWhile) {
        var @tmp = {
            tag => "EWhile", 
            index => 16, 
            args => $array(econd,e,normalWhile)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EVars = function(vars) {
        var @tmp = {
            tag => "EVars", 
            index => 10, 
            args => $array(vars)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EUntyped = function(e) {
        var @tmp = {
            tag => "EUntyped", 
            index => 22, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EUnop = function(op,postFix,e) {
        var @tmp = {
            tag => "EUnop", 
            index => 9, 
            args => $array(op,postFix,e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ETry = function(e,catches) {
        var @tmp = {
            tag => "ETry", 
            index => 18, 
            args => $array(e,catches)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EThrow = function(e) {
        var @tmp = {
            tag => "EThrow", 
            index => 23, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ETernary = function(econd,eif,eelse) {
        var @tmp = {
            tag => "ETernary", 
            index => 27, 
            args => $array(econd,eif,eelse)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ESwitch = function(e,cases,edef) {
        var @tmp = {
            tag => "ESwitch", 
            index => 17, 
            args => $array(e,cases,edef)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EReturn = function(e) {
        var @tmp = {
            tag => "EReturn", 
            index => 19, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EParenthesis = function(e) {
        var @tmp = {
            tag => "EParenthesis", 
            index => 4, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EObjectDecl = function(fields) {
        var @tmp = {
            tag => "EObjectDecl", 
            index => 5, 
            args => $array(fields)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ENew = function(t,params) {
        var @tmp = {
            tag => "ENew", 
            index => 8, 
            args => $array(t,params)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EMeta = function(s,e) {
        var @tmp = {
            tag => "EMeta", 
            index => 29, 
            args => $array(s,e)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EIn = function(e1,e2) {
        var @tmp = {
            tag => "EIn", 
            index => 14, 
            args => $array(e1,e2)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EIf = function(econd,eif,eelse) {
        var @tmp = {
            tag => "EIf", 
            index => 15, 
            args => $array(econd,eif,eelse)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EFunction = function(name,f) {
        var @tmp = {
            tag => "EFunction", 
            index => 11, 
            args => $array(name,f)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EFor = function(it,expr) {
        var @tmp = {
            tag => "EFor", 
            index => 13, 
            args => $array(it,expr)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EField = function(e,field) {
        var @tmp = {
            tag => "EField", 
            index => 3, 
            args => $array(e,field)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EDisplayNew = function(t) {
        var @tmp = {
            tag => "EDisplayNew", 
            index => 26, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EDisplay = function(e,isCall) {
        var @tmp = {
            tag => "EDisplay", 
            index => 25, 
            args => $array(e,isCall)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EContinue = {
        var @tmp = {
            tag => "EContinue", 
            index => 21, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EConst = function(c) {
        var @tmp = {
            tag => "EConst", 
            index => 0, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ECheckType = function(e,t) {
        var @tmp = {
            tag => "ECheckType", 
            index => 28, 
            args => $array(e,t)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ECast = function(e,t) {
        var @tmp = {
            tag => "ECast", 
            index => 24, 
            args => $array(e,t)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.ECall = function(e,params) {
        var @tmp = {
            tag => "ECall", 
            index => 7, 
            args => $array(e,params)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EBreak = {
        var @tmp = {
            tag => "EBreak", 
            index => 20, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EBlock = function(exprs) {
        var @tmp = {
            tag => "EBlock", 
            index => 12, 
            args => $array(exprs)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EBinop = function(op,e1,e2) {
        var @tmp = {
            tag => "EBinop", 
            index => 2, 
            args => $array(op,e1,e2)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EArrayDecl = function(values) {
        var @tmp = {
            tag => "EArrayDecl", 
            index => 6, 
            args => $array(values)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
    @G4.EArray = function(e1,e2) {
        var @tmp = {
            tag => "EArray", 
            index => 1, 
            args => $array(e1,e2)

        };
        $objsetproto(@tmp,@G4.prototype);
        @tmp;
    }
}
{
    @G5 = $new(null);
    haxe.macro.ComplexType = @G5;
    @G5.prototype = {
        __enum__ => @G5, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G5.TPath = function(p) {
        var @tmp = {
            tag => "TPath", 
            index => 0, 
            args => $array(p)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
    @G5.TParent = function(t) {
        var @tmp = {
            tag => "TParent", 
            index => 3, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
    @G5.TOptional = function(t) {
        var @tmp = {
            tag => "TOptional", 
            index => 5, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
    @G5.TFunction = function(args,ret) {
        var @tmp = {
            tag => "TFunction", 
            index => 1, 
            args => $array(args,ret)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
    @G5.TExtend = function(p,fields) {
        var @tmp = {
            tag => "TExtend", 
            index => 4, 
            args => $array(p,fields)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
    @G5.TAnonymous = function(fields) {
        var @tmp = {
            tag => "TAnonymous", 
            index => 2, 
            args => $array(fields)

        };
        $objsetproto(@tmp,@G5.prototype);
        @tmp;
    }
}
{
    @G6 = $new(null);
    haxe.macro.TypeParam = @G6;
    @G6.prototype = {
        __enum__ => @G6, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G6.TPType = function(t) {
        var @tmp = {
            tag => "TPType", 
            index => 0, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G6.prototype);
        @tmp;
    }
    @G6.TPExpr = function(e) {
        var @tmp = {
            tag => "TPExpr", 
            index => 1, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G6.prototype);
        @tmp;
    }
}
{
    @G7 = $new(null);
    haxe.macro.Access = @G7;
    @G7.prototype = {
        __enum__ => @G7, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G7.AStatic = {
        var @tmp = {
            tag => "AStatic", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.APublic = {
        var @tmp = {
            tag => "APublic", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.APrivate = {
        var @tmp = {
            tag => "APrivate", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.AOverride = {
        var @tmp = {
            tag => "AOverride", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.AMacro = {
        var @tmp = {
            tag => "AMacro", 
            index => 6, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.AInline = {
        var @tmp = {
            tag => "AInline", 
            index => 5, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
    @G7.ADynamic = {
        var @tmp = {
            tag => "ADynamic", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G7.prototype);
        @tmp;
    }
}
{
    @G8 = $new(null);
    haxe.macro.FieldType = @G8;
    @G8.prototype = {
        __enum__ => @G8, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G8.FVar = function(t,e) {
        var @tmp = {
            tag => "FVar", 
            index => 0, 
            args => $array(t,e)

        };
        $objsetproto(@tmp,@G8.prototype);
        @tmp;
    }
    @G8.FProp = function(get,set,t,e) {
        var @tmp = {
            tag => "FProp", 
            index => 2, 
            args => $array(get,set,t,e)

        };
        $objsetproto(@tmp,@G8.prototype);
        @tmp;
    }
    @G8.FFun = function(f) {
        var @tmp = {
            tag => "FFun", 
            index => 1, 
            args => $array(f)

        };
        $objsetproto(@tmp,@G8.prototype);
        @tmp;
    }
}
{
    @G9 = $new(null);
    haxe.macro.TypeDefKind = @G9;
    @G9.prototype = {
        __enum__ => @G9, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G9.TDStructure = {
        var @tmp = {
            tag => "TDStructure", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G9.prototype);
        @tmp;
    }
    @G9.TDEnum = {
        var @tmp = {
            tag => "TDEnum", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G9.prototype);
        @tmp;
    }
    @G9.TDClass = function(superClass,interfaces,isInterface) {
        var @tmp = {
            tag => "TDClass", 
            index => 2, 
            args => $array(superClass,interfaces,isInterface)

        };
        $objsetproto(@tmp,@G9.prototype);
        @tmp;
    }
    @G9.TDAlias = function(t) {
        var @tmp = {
            tag => "TDAlias", 
            index => 3, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G9.prototype);
        @tmp;
    }
    @G9.TDAbstract = function(tthis,from,to) {
        var @tmp = {
            tag => "TDAbstract", 
            index => 4, 
            args => $array(tthis,from,to)

        };
        $objsetproto(@tmp,@G9.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    haxe.macro.@Error = @tmp;
    @tmp.toString = function() {
        return this.message;
    }
    @tmp.pos = null;
    @tmp.message = null;
    @tmp.__serialize = @serialize;
    @tmp.__string = @default__string;
    var @tmp = $new(null);
    haxe.macro.Error = @tmp;
    @tmp.prototype = haxe.macro.@Error;
    @tmp.__construct__ = function(m,p) {
        this.message = m;
        this.pos = p;
        return null;
    }
    @tmp.new = function(m,p) {
        var @o = $new(null);
        $objsetproto(@o,haxe.macro.@Error);
        $call(this.__construct__,@o,$array(m,p));
        return @o;
    }
    haxe.macro.@Error.__class__ = haxe.macro.Error;
}
{
    @G10 = $new(null);
    hscript.Const = @G10;
    @G10.prototype = {
        __enum__ => @G10, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G10.CString = function(s) {
        var @tmp = {
            tag => "CString", 
            index => 2, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G10.prototype);
        @tmp;
    }
    @G10.CInt = function(v) {
        var @tmp = {
            tag => "CInt", 
            index => 0, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G10.prototype);
        @tmp;
    }
    @G10.CFloat = function(f) {
        var @tmp = {
            tag => "CFloat", 
            index => 1, 
            args => $array(f)

        };
        $objsetproto(@tmp,@G10.prototype);
        @tmp;
    }
}
{
    @G11 = $new(null);
    hscript.Access = @G11;
    @G11.prototype = {
        __enum__ => @G11, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G11.Static = {
        var @tmp = {
            tag => "Static", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
    @G11.Public = {
        var @tmp = {
            tag => "Public", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
    @G11.Private = {
        var @tmp = {
            tag => "Private", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
    @G11.HasSetter = {
        var @tmp = {
            tag => "HasSetter", 
            index => 5, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
    @G11.HasGetter = {
        var @tmp = {
            tag => "HasGetter", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
    @G11.Function = {
        var @tmp = {
            tag => "Function", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G11.prototype);
        @tmp;
    }
}
{
    @G12 = $new(null);
    hscript.ExprDef = @G12;
    @G12.prototype = {
        __enum__ => @G12, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G12.EWhile = function(cond,e) {
        var @tmp = {
            tag => "EWhile", 
            index => 10, 
            args => $array(cond,e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EVars = function(vs) {
        var @tmp = {
            tag => "EVars", 
            index => 2, 
            args => $array(vs)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EUsing = function(e) {
        var @tmp = {
            tag => "EUsing", 
            index => 27, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EUntyped = function(e) {
        var @tmp = {
            tag => "EUntyped", 
            index => 24, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EUnop = function(op,prefix,e) {
        var @tmp = {
            tag => "EUnop", 
            index => 7, 
            args => $array(op,prefix,e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.ETry = function(e,v,t,ecatch) {
        var @tmp = {
            tag => "ETry", 
            index => 20, 
            args => $array(e,v,t,ecatch)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EThrow = function(e) {
        var @tmp = {
            tag => "EThrow", 
            index => 19, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.ETernary = function(cond,e1,e2) {
        var @tmp = {
            tag => "ETernary", 
            index => 22, 
            args => $array(cond,e1,e2)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.ESwitch = function(e,cases,edef) {
        var @tmp = {
            tag => "ESwitch", 
            index => 23, 
            args => $array(e,cases,edef)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EReturn = function(e) {
        var @tmp = {
            tag => "EReturn", 
            index => 15, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EParent = function(e) {
        var @tmp = {
            tag => "EParent", 
            index => 3, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EObject = function(fl) {
        var @tmp = {
            tag => "EObject", 
            index => 21, 
            args => $array(fl)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.ENew = function(cl,params) {
        var @tmp = {
            tag => "ENew", 
            index => 18, 
            args => $array(cl,params)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EMacro = function(n,args) {
        var @tmp = {
            tag => "EMacro", 
            index => 26, 
            args => $array(n,args)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EIf = function(cond,e1,e2) {
        var @tmp = {
            tag => "EIf", 
            index => 9, 
            args => $array(cond,e1,e2)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EIdent = function(v) {
        var @tmp = {
            tag => "EIdent", 
            index => 1, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EFunction = function(args,e,name,ret) {
        var @tmp = {
            tag => "EFunction", 
            index => 14, 
            args => $array(args,e,name,ret)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EFor = function(v,it,e) {
        var @tmp = {
            tag => "EFor", 
            index => 11, 
            args => $array(v,it,e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EField = function(e,f) {
        var @tmp = {
            tag => "EField", 
            index => 5, 
            args => $array(e,f)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EEnumDecl = function(e) {
        var @tmp = {
            tag => "EEnumDecl", 
            index => 28, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EContinue = {
        var @tmp = {
            tag => "EContinue", 
            index => 13, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EConst = function(c) {
        var @tmp = {
            tag => "EConst", 
            index => 0, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EClassDecl = function(c) {
        var @tmp = {
            tag => "EClassDecl", 
            index => 25, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.ECall = function(e,params) {
        var @tmp = {
            tag => "ECall", 
            index => 8, 
            args => $array(e,params)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EBreak = {
        var @tmp = {
            tag => "EBreak", 
            index => 12, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EBlock = function(e) {
        var @tmp = {
            tag => "EBlock", 
            index => 4, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EBinop = function(op,e1,e2) {
        var @tmp = {
            tag => "EBinop", 
            index => 6, 
            args => $array(op,e1,e2)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EArrayDecl = function(e) {
        var @tmp = {
            tag => "EArrayDecl", 
            index => 17, 
            args => $array(e)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
    @G12.EArray = function(e,index) {
        var @tmp = {
            tag => "EArray", 
            index => 16, 
            args => $array(e,index)

        };
        $objsetproto(@tmp,@G12.prototype);
        @tmp;
    }
}
{
    @G13 = $new(null);
    hscript.CType = @G13;
    @G13.prototype = {
        __enum__ => @G13, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G13.CTPath = function(path,params) {
        var @tmp = {
            tag => "CTPath", 
            index => 0, 
            args => $array(path,params)

        };
        $objsetproto(@tmp,@G13.prototype);
        @tmp;
    }
    @G13.CTParent = function(t) {
        var @tmp = {
            tag => "CTParent", 
            index => 3, 
            args => $array(t)

        };
        $objsetproto(@tmp,@G13.prototype);
        @tmp;
    }
    @G13.CTFun = function(args,ret) {
        var @tmp = {
            tag => "CTFun", 
            index => 1, 
            args => $array(args,ret)

        };
        $objsetproto(@tmp,@G13.prototype);
        @tmp;
    }
    @G13.CTAnon = function(fields) {
        var @tmp = {
            tag => "CTAnon", 
            index => 2, 
            args => $array(fields)

        };
        $objsetproto(@tmp,@G13.prototype);
        @tmp;
    }
}
{
    @G14 = $new(null);
    hscript.Error = @G14;
    @G14.prototype = {
        __enum__ => @G14, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G14.EUnterminatedString = {
        var @tmp = {
            tag => "EUnterminatedString", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EUnterminatedComment = {
        var @tmp = {
            tag => "EUnterminatedComment", 
            index => 3, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EUnknownVariable = function(v) {
        var @tmp = {
            tag => "EUnknownVariable", 
            index => 4, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EUnexpected = function(s,could) {
        var @tmp = {
            tag => "EUnexpected", 
            index => 1, 
            args => $array(s,could)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.ENoConstructor = function(c) {
        var @tmp = {
            tag => "ENoConstructor", 
            index => 10, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidParameters = function(f,givenLen,actualLen) {
        var @tmp = {
            tag => "EInvalidParameters", 
            index => 9, 
            args => $array(f,givenLen,actualLen)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidOp = function(op) {
        var @tmp = {
            tag => "EInvalidOp", 
            index => 6, 
            args => $array(op)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidIterator = function(v) {
        var @tmp = {
            tag => "EInvalidIterator", 
            index => 5, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidFunction = {
        var @tmp = {
            tag => "EInvalidFunction", 
            index => 8, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidChar = function(c) {
        var @tmp = {
            tag => "EInvalidChar", 
            index => 0, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
    @G14.EInvalidAccess = function(f) {
        var @tmp = {
            tag => "EInvalidAccess", 
            index => 7, 
            args => $array(f)

        };
        $objsetproto(@tmp,@G14.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    hscript.@Expr = @tmp;
    @tmp.pmin = null;
    @tmp.pmax = null;
    @tmp.expr = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    hscript.Expr = @tmp;
    @tmp.prototype = hscript.@Expr;
    @tmp.__construct__ = function(v,pmin,pmax) {
        this.expr = v;
        this.pmin = pmin;
        this.pmax = pmax;
        return null;
    }
    @tmp.new = function(v,pmin,pmax) {
        var @o = $new(null);
        $objsetproto(@o,hscript.@Expr);
        $call(this.__construct__,@o,$array(v,pmin,pmax));
        return @o;
    }
    hscript.@Expr.__class__ = hscript.Expr;
}
{
    @G15 = $new(null);
    hscript.Token = @G15;
    @G15.prototype = {
        __enum__ => @G15, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G15.TSemicolon = {
        var @tmp = {
            tag => "TSemicolon", 
            index => 10, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TQuestion = {
        var @tmp = {
            tag => "TQuestion", 
            index => 13, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TPOpen = {
        var @tmp = {
            tag => "TPOpen", 
            index => 4, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TPClose = {
        var @tmp = {
            tag => "TPClose", 
            index => 5, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TOp = function(s) {
        var @tmp = {
            tag => "TOp", 
            index => 3, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TInterp = function(s) {
        var @tmp = {
            tag => "TInterp", 
            index => 16, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TId = function(s) {
        var @tmp = {
            tag => "TId", 
            index => 2, 
            args => $array(s)

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.THash = {
        var @tmp = {
            tag => "THash", 
            index => 15, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TEof = {
        var @tmp = {
            tag => "TEof", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TDoubleDot = {
        var @tmp = {
            tag => "TDoubleDot", 
            index => 14, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TDot = {
        var @tmp = {
            tag => "TDot", 
            index => 8, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TConst = function(c) {
        var @tmp = {
            tag => "TConst", 
            index => 1, 
            args => $array(c)

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TComma = {
        var @tmp = {
            tag => "TComma", 
            index => 9, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TBrOpen = {
        var @tmp = {
            tag => "TBrOpen", 
            index => 6, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TBrClose = {
        var @tmp = {
            tag => "TBrClose", 
            index => 7, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TBkOpen = {
        var @tmp = {
            tag => "TBkOpen", 
            index => 11, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
    @G15.TBkClose = {
        var @tmp = {
            tag => "TBkClose", 
            index => 12, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G15.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    hscript.@Parser = @tmp;
    @tmp.unops = null;
    @tmp.unexpected = function(tk,info) {
        this.error(hscript.Error.EUnexpected(((String.new("'") + this.tokenString(tk)) + String.new("'")) + ( if ( info == null )
            String.new("")
        else
            String.new(" - expected ") + info
         ),null),0,0);
        return null;
    }
    @tmp.tokens = null;
    @tmp.tokenString = function(t) {
        switch ( t.index ){
        15 => 
            return String.new("#")
        0 => 
            return String.new("<eof>")
        1 => 
            {
                var c = t.args[0];
                return this.constString(c);
            }

        2 => 
            {
                var s = t.args[0];
                return s;
            }

        3 => 
            {
                var s = t.args[0];
                return s;
            }

        4 => 
            return String.new("(")
        5 => 
            return String.new(")")
        6 => 
            return String.new("{")
        7 => 
            return String.new("}")
        8 => 
            return String.new(".")
        9 => 
            return String.new(",")
        10 => 
            return String.new(";")
        11 => 
            return String.new("[")
        12 => 
            return String.new("]")
        13 => 
            return String.new("?")
        14 => 
            return String.new(":")
        16 => 
            {
                var s = t.args[0];
                return (String.new("'") + s) + String.new("'");
            }

        }
        return null;
    }
    @tmp.tokenComment = function(op,char) {
        var c = op.charCodeAt(1);
        var s = this.input;
        if ( c == 47 ) {
            try {
                while ( (char != 10) && (char != 13) )
                    char = s.readByte()
                this.char = char;
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var e = @tmp;
                    {
                    }
                }
                else
                    $rethrow(@tmp)
            }
            return this.token();
        }
        if ( c == 42 ) {
            var old = this.line;
            try {
                while ( true ) {
                    while ( char != 42 ) {
                        if ( char == 10 )
                            this.line ++= 1;
                        char = s.readByte();
                    }
                    char = s.readByte();
                    if ( char == 47 )
                        break;;
                }
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var e = @tmp;
                    {
                        this.line = old;
                        this.error(hscript.Error.EUnterminatedComment,0,0);
                    }
                }
                else
                    $rethrow(@tmp)
            }
            return this.token();
        }
        this.char = char;
        return hscript.Token.TOp(op);
    }
    @tmp.token = function() {
        if ( $not(( this.tokens.head == null )) ) {
            var _this = this.tokens;
            var k = _this.head;
            if ( k == null )
                return null
            else {
                _this.head = k.next;
                return k.elt;
            }
        }
        var char;
        if ( this.char < 0 )
            char = this.readChar()
        else {
            char = this.char;
            this.char = -1;
        }
        while ( true ) {
            {
                var @tmp = ( char );
                if @tmp == 0
                    return hscript.Token.TEof
                else
                    if ((@tmp == 32) || (@tmp == 9)) || (@tmp == 13) {
                    }
                    else
                        if @tmp == 10
                            this.line ++= 1
                        else
                            if @tmp == 35
                                return hscript.Token.THash
                            else
                                if @tmp == 59
                                    if ( (char >= 48) && (char <= 57) ) {
                                        var n = ( char - 48 ) * 1.0;
                                        var exp = 0.;
                                        while ( true ) {
                                            char = this.readChar();
                                            exp *= 10;
                                            if ( (char >= 48) && (char <= 57) )
                                                n = ((n * 10) + ( char - 48 ))
                                            else
                                                switch ( char ){
                                                46 => 
                                                    {
                                                        if ( exp > 0 ) {
                                                            if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                this.push(hscript.Token.TOp(String.new("...")));
                                                                var i = Std.int(n);
                                                                return hscript.Token.TConst(if ( i == n )
                                                                    hscript.Const.CInt(i)
                                                                else
                                                                    hscript.Const.CFloat(n)
                                                                );
                                                            }
                                                            this.invalidChar(char);
                                                        }
                                                        exp = 1.;
                                                    }

                                                120 => 
                                                    {
                                                        if ( (n > 0) || (exp > 0) )
                                                            this.invalidChar(char);
                                                        var n1 = 0;
                                                        while ( true ) {
                                                            char = this.readChar();
                                                            {
                                                                var @tmp = ( char );
                                                                if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                    n1 = ((( n1 << 4 ) + char) - 48)
                                                                else
                                                                    if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                        n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                    else
                                                                        if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                            n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                        else {
                                                                            this.char = char;
                                                                            return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                        }


                                                            }
                                                        }
                                                    }

                                                default => 
                                                    {
                                                        this.char = char;
                                                        var i = Std.int(n);
                                                        return hscript.Token.TConst(if ( exp > 0 )
                                                            hscript.Const.CFloat((n * 10) / exp)
                                                        else
                                                            if ( i == n )
                                                                hscript.Const.CInt(i)
                                                            else
                                                                hscript.Const.CFloat(n)

                                                        );
                                                    }

                                                }

                                        }
                                    }
                                    else
                                        return hscript.Token.TSemicolon

                                else
                                    if @tmp == 40
                                        if ( (char >= 48) && (char <= 57) ) {
                                            var n = ( char - 48 ) * 1.0;
                                            var exp = 0.;
                                            while ( true ) {
                                                char = this.readChar();
                                                exp *= 10;
                                                if ( (char >= 48) && (char <= 57) )
                                                    n = ((n * 10) + ( char - 48 ))
                                                else
                                                    switch ( char ){
                                                    46 => 
                                                        {
                                                            if ( exp > 0 ) {
                                                                if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                    this.push(hscript.Token.TOp(String.new("...")));
                                                                    var i = Std.int(n);
                                                                    return hscript.Token.TConst(if ( i == n )
                                                                        hscript.Const.CInt(i)
                                                                    else
                                                                        hscript.Const.CFloat(n)
                                                                    );
                                                                }
                                                                this.invalidChar(char);
                                                            }
                                                            exp = 1.;
                                                        }

                                                    120 => 
                                                        {
                                                            if ( (n > 0) || (exp > 0) )
                                                                this.invalidChar(char);
                                                            var n1 = 0;
                                                            while ( true ) {
                                                                char = this.readChar();
                                                                {
                                                                    var @tmp = ( char );
                                                                    if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                        n1 = ((( n1 << 4 ) + char) - 48)
                                                                    else
                                                                        if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                            n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                        else
                                                                            if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                            else {
                                                                                this.char = char;
                                                                                return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                            }


                                                                }
                                                            }
                                                        }

                                                    default => 
                                                        {
                                                            this.char = char;
                                                            var i = Std.int(n);
                                                            return hscript.Token.TConst(if ( exp > 0 )
                                                                hscript.Const.CFloat((n * 10) / exp)
                                                            else
                                                                if ( i == n )
                                                                    hscript.Const.CInt(i)
                                                                else
                                                                    hscript.Const.CFloat(n)

                                                            );
                                                        }

                                                    }

                                            }
                                        }
                                        else
                                            return hscript.Token.TPOpen

                                    else
                                        if @tmp == 41
                                            if ( (char >= 48) && (char <= 57) ) {
                                                var n = ( char - 48 ) * 1.0;
                                                var exp = 0.;
                                                while ( true ) {
                                                    char = this.readChar();
                                                    exp *= 10;
                                                    if ( (char >= 48) && (char <= 57) )
                                                        n = ((n * 10) + ( char - 48 ))
                                                    else
                                                        switch ( char ){
                                                        46 => 
                                                            {
                                                                if ( exp > 0 ) {
                                                                    if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                        this.push(hscript.Token.TOp(String.new("...")));
                                                                        var i = Std.int(n);
                                                                        return hscript.Token.TConst(if ( i == n )
                                                                            hscript.Const.CInt(i)
                                                                        else
                                                                            hscript.Const.CFloat(n)
                                                                        );
                                                                    }
                                                                    this.invalidChar(char);
                                                                }
                                                                exp = 1.;
                                                            }

                                                        120 => 
                                                            {
                                                                if ( (n > 0) || (exp > 0) )
                                                                    this.invalidChar(char);
                                                                var n1 = 0;
                                                                while ( true ) {
                                                                    char = this.readChar();
                                                                    {
                                                                        var @tmp = ( char );
                                                                        if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                            n1 = ((( n1 << 4 ) + char) - 48)
                                                                        else
                                                                            if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                            else
                                                                                if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                    n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                else {
                                                                                    this.char = char;
                                                                                    return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                }


                                                                    }
                                                                }
                                                            }

                                                        default => 
                                                            {
                                                                this.char = char;
                                                                var i = Std.int(n);
                                                                return hscript.Token.TConst(if ( exp > 0 )
                                                                    hscript.Const.CFloat((n * 10) / exp)
                                                                else
                                                                    if ( i == n )
                                                                        hscript.Const.CInt(i)
                                                                    else
                                                                        hscript.Const.CFloat(n)

                                                                );
                                                            }

                                                        }

                                                }
                                            }
                                            else
                                                return hscript.Token.TPClose

                                        else
                                            if @tmp == 44
                                                if ( (char >= 48) && (char <= 57) ) {
                                                    var n = ( char - 48 ) * 1.0;
                                                    var exp = 0.;
                                                    while ( true ) {
                                                        char = this.readChar();
                                                        exp *= 10;
                                                        if ( (char >= 48) && (char <= 57) )
                                                            n = ((n * 10) + ( char - 48 ))
                                                        else
                                                            switch ( char ){
                                                            46 => 
                                                                {
                                                                    if ( exp > 0 ) {
                                                                        if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                            this.push(hscript.Token.TOp(String.new("...")));
                                                                            var i = Std.int(n);
                                                                            return hscript.Token.TConst(if ( i == n )
                                                                                hscript.Const.CInt(i)
                                                                            else
                                                                                hscript.Const.CFloat(n)
                                                                            );
                                                                        }
                                                                        this.invalidChar(char);
                                                                    }
                                                                    exp = 1.;
                                                                }

                                                            120 => 
                                                                {
                                                                    if ( (n > 0) || (exp > 0) )
                                                                        this.invalidChar(char);
                                                                    var n1 = 0;
                                                                    while ( true ) {
                                                                        char = this.readChar();
                                                                        {
                                                                            var @tmp = ( char );
                                                                            if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                n1 = ((( n1 << 4 ) + char) - 48)
                                                                            else
                                                                                if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                    n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                else
                                                                                    if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                        n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                    else {
                                                                                        this.char = char;
                                                                                        return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                    }


                                                                        }
                                                                    }
                                                                }

                                                            default => 
                                                                {
                                                                    this.char = char;
                                                                    var i = Std.int(n);
                                                                    return hscript.Token.TConst(if ( exp > 0 )
                                                                        hscript.Const.CFloat((n * 10) / exp)
                                                                    else
                                                                        if ( i == n )
                                                                            hscript.Const.CInt(i)
                                                                        else
                                                                            hscript.Const.CFloat(n)

                                                                    );
                                                                }

                                                            }

                                                    }
                                                }
                                                else
                                                    return hscript.Token.TComma

                                            else
                                                if @tmp == 46
                                                    if ( (char >= 48) && (char <= 57) ) {
                                                        var n = ( char - 48 ) * 1.0;
                                                        var exp = 0.;
                                                        while ( true ) {
                                                            char = this.readChar();
                                                            exp *= 10;
                                                            if ( (char >= 48) && (char <= 57) )
                                                                n = ((n * 10) + ( char - 48 ))
                                                            else
                                                                switch ( char ){
                                                                46 => 
                                                                    {
                                                                        if ( exp > 0 ) {
                                                                            if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                this.push(hscript.Token.TOp(String.new("...")));
                                                                                var i = Std.int(n);
                                                                                return hscript.Token.TConst(if ( i == n )
                                                                                    hscript.Const.CInt(i)
                                                                                else
                                                                                    hscript.Const.CFloat(n)
                                                                                );
                                                                            }
                                                                            this.invalidChar(char);
                                                                        }
                                                                        exp = 1.;
                                                                    }

                                                                120 => 
                                                                    {
                                                                        if ( (n > 0) || (exp > 0) )
                                                                            this.invalidChar(char);
                                                                        var n1 = 0;
                                                                        while ( true ) {
                                                                            char = this.readChar();
                                                                            {
                                                                                var @tmp = ( char );
                                                                                if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                    n1 = ((( n1 << 4 ) + char) - 48)
                                                                                else
                                                                                    if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                        n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                    else
                                                                                        if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                            n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                        else {
                                                                                            this.char = char;
                                                                                            return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                        }


                                                                            }
                                                                        }
                                                                    }

                                                                default => 
                                                                    {
                                                                        this.char = char;
                                                                        var i = Std.int(n);
                                                                        return hscript.Token.TConst(if ( exp > 0 )
                                                                            hscript.Const.CFloat((n * 10) / exp)
                                                                        else
                                                                            if ( i == n )
                                                                                hscript.Const.CInt(i)
                                                                            else
                                                                                hscript.Const.CFloat(n)

                                                                        );
                                                                    }

                                                                }

                                                        }
                                                    }
                                                    else {
                                                        char = this.readChar();
                                                        {
                                                            var @tmp = ( char );
                                                            if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57) {
                                                                var n = char - 48;
                                                                var exp = 1;
                                                                while ( true ) {
                                                                    char = this.readChar();
                                                                    exp *= 10;
                                                                    {
                                                                        var @tmp = ( char );
                                                                        if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                            n = ((n * 10) + ( char - 48 ))
                                                                        else {
                                                                            this.char = char;
                                                                            return hscript.Token.TConst(hscript.Const.CFloat(n / exp));
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                            else
                                                                if @tmp == 46 {
                                                                    char = this.readChar();
                                                                    if ( char != 46 )
                                                                        this.invalidChar(char);
                                                                    return hscript.Token.TOp(String.new("..."));
                                                                }
                                                                else {
                                                                    this.char = char;
                                                                    return hscript.Token.TDot;
                                                                }

                                                        }
                                                    }

                                                else
                                                    if @tmp == 123
                                                        if ( (char >= 48) && (char <= 57) ) {
                                                            var n = ( char - 48 ) * 1.0;
                                                            var exp = 0.;
                                                            while ( true ) {
                                                                char = this.readChar();
                                                                exp *= 10;
                                                                if ( (char >= 48) && (char <= 57) )
                                                                    n = ((n * 10) + ( char - 48 ))
                                                                else
                                                                    switch ( char ){
                                                                    46 => 
                                                                        {
                                                                            if ( exp > 0 ) {
                                                                                if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                    this.push(hscript.Token.TOp(String.new("...")));
                                                                                    var i = Std.int(n);
                                                                                    return hscript.Token.TConst(if ( i == n )
                                                                                        hscript.Const.CInt(i)
                                                                                    else
                                                                                        hscript.Const.CFloat(n)
                                                                                    );
                                                                                }
                                                                                this.invalidChar(char);
                                                                            }
                                                                            exp = 1.;
                                                                        }

                                                                    120 => 
                                                                        {
                                                                            if ( (n > 0) || (exp > 0) )
                                                                                this.invalidChar(char);
                                                                            var n1 = 0;
                                                                            while ( true ) {
                                                                                char = this.readChar();
                                                                                {
                                                                                    var @tmp = ( char );
                                                                                    if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                        n1 = ((( n1 << 4 ) + char) - 48)
                                                                                    else
                                                                                        if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                            n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                        else
                                                                                            if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                            else {
                                                                                                this.char = char;
                                                                                                return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                            }


                                                                                }
                                                                            }
                                                                        }

                                                                    default => 
                                                                        {
                                                                            this.char = char;
                                                                            var i = Std.int(n);
                                                                            return hscript.Token.TConst(if ( exp > 0 )
                                                                                hscript.Const.CFloat((n * 10) / exp)
                                                                            else
                                                                                if ( i == n )
                                                                                    hscript.Const.CInt(i)
                                                                                else
                                                                                    hscript.Const.CFloat(n)

                                                                            );
                                                                        }

                                                                    }

                                                            }
                                                        }
                                                        else
                                                            return hscript.Token.TBrOpen

                                                    else
                                                        if @tmp == 125
                                                            if ( (char >= 48) && (char <= 57) ) {
                                                                var n = ( char - 48 ) * 1.0;
                                                                var exp = 0.;
                                                                while ( true ) {
                                                                    char = this.readChar();
                                                                    exp *= 10;
                                                                    if ( (char >= 48) && (char <= 57) )
                                                                        n = ((n * 10) + ( char - 48 ))
                                                                    else
                                                                        switch ( char ){
                                                                        46 => 
                                                                            {
                                                                                if ( exp > 0 ) {
                                                                                    if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                        this.push(hscript.Token.TOp(String.new("...")));
                                                                                        var i = Std.int(n);
                                                                                        return hscript.Token.TConst(if ( i == n )
                                                                                            hscript.Const.CInt(i)
                                                                                        else
                                                                                            hscript.Const.CFloat(n)
                                                                                        );
                                                                                    }
                                                                                    this.invalidChar(char);
                                                                                }
                                                                                exp = 1.;
                                                                            }

                                                                        120 => 
                                                                            {
                                                                                if ( (n > 0) || (exp > 0) )
                                                                                    this.invalidChar(char);
                                                                                var n1 = 0;
                                                                                while ( true ) {
                                                                                    char = this.readChar();
                                                                                    {
                                                                                        var @tmp = ( char );
                                                                                        if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                            n1 = ((( n1 << 4 ) + char) - 48)
                                                                                        else
                                                                                            if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                            else
                                                                                                if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                    n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                else {
                                                                                                    this.char = char;
                                                                                                    return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                }


                                                                                    }
                                                                                }
                                                                            }

                                                                        default => 
                                                                            {
                                                                                this.char = char;
                                                                                var i = Std.int(n);
                                                                                return hscript.Token.TConst(if ( exp > 0 )
                                                                                    hscript.Const.CFloat((n * 10) / exp)
                                                                                else
                                                                                    if ( i == n )
                                                                                        hscript.Const.CInt(i)
                                                                                    else
                                                                                        hscript.Const.CFloat(n)

                                                                                );
                                                                            }

                                                                        }

                                                                }
                                                            }
                                                            else
                                                                return hscript.Token.TBrClose

                                                        else
                                                            if @tmp == 91
                                                                if ( (char >= 48) && (char <= 57) ) {
                                                                    var n = ( char - 48 ) * 1.0;
                                                                    var exp = 0.;
                                                                    while ( true ) {
                                                                        char = this.readChar();
                                                                        exp *= 10;
                                                                        if ( (char >= 48) && (char <= 57) )
                                                                            n = ((n * 10) + ( char - 48 ))
                                                                        else
                                                                            switch ( char ){
                                                                            46 => 
                                                                                {
                                                                                    if ( exp > 0 ) {
                                                                                        if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                            this.push(hscript.Token.TOp(String.new("...")));
                                                                                            var i = Std.int(n);
                                                                                            return hscript.Token.TConst(if ( i == n )
                                                                                                hscript.Const.CInt(i)
                                                                                            else
                                                                                                hscript.Const.CFloat(n)
                                                                                            );
                                                                                        }
                                                                                        this.invalidChar(char);
                                                                                    }
                                                                                    exp = 1.;
                                                                                }

                                                                            120 => 
                                                                                {
                                                                                    if ( (n > 0) || (exp > 0) )
                                                                                        this.invalidChar(char);
                                                                                    var n1 = 0;
                                                                                    while ( true ) {
                                                                                        char = this.readChar();
                                                                                        {
                                                                                            var @tmp = ( char );
                                                                                            if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                n1 = ((( n1 << 4 ) + char) - 48)
                                                                                            else
                                                                                                if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                    n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                else
                                                                                                    if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                        n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                    else {
                                                                                                        this.char = char;
                                                                                                        return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                    }


                                                                                        }
                                                                                    }
                                                                                }

                                                                            default => 
                                                                                {
                                                                                    this.char = char;
                                                                                    var i = Std.int(n);
                                                                                    return hscript.Token.TConst(if ( exp > 0 )
                                                                                        hscript.Const.CFloat((n * 10) / exp)
                                                                                    else
                                                                                        if ( i == n )
                                                                                            hscript.Const.CInt(i)
                                                                                        else
                                                                                            hscript.Const.CFloat(n)

                                                                                    );
                                                                                }

                                                                            }

                                                                    }
                                                                }
                                                                else
                                                                    return hscript.Token.TBkOpen

                                                            else
                                                                if @tmp == 93
                                                                    if ( (char >= 48) && (char <= 57) ) {
                                                                        var n = ( char - 48 ) * 1.0;
                                                                        var exp = 0.;
                                                                        while ( true ) {
                                                                            char = this.readChar();
                                                                            exp *= 10;
                                                                            if ( (char >= 48) && (char <= 57) )
                                                                                n = ((n * 10) + ( char - 48 ))
                                                                            else
                                                                                switch ( char ){
                                                                                46 => 
                                                                                    {
                                                                                        if ( exp > 0 ) {
                                                                                            if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                this.push(hscript.Token.TOp(String.new("...")));
                                                                                                var i = Std.int(n);
                                                                                                return hscript.Token.TConst(if ( i == n )
                                                                                                    hscript.Const.CInt(i)
                                                                                                else
                                                                                                    hscript.Const.CFloat(n)
                                                                                                );
                                                                                            }
                                                                                            this.invalidChar(char);
                                                                                        }
                                                                                        exp = 1.;
                                                                                    }

                                                                                120 => 
                                                                                    {
                                                                                        if ( (n > 0) || (exp > 0) )
                                                                                            this.invalidChar(char);
                                                                                        var n1 = 0;
                                                                                        while ( true ) {
                                                                                            char = this.readChar();
                                                                                            {
                                                                                                var @tmp = ( char );
                                                                                                if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                    n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                else
                                                                                                    if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                        n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                    else
                                                                                                        if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                            n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                        else {
                                                                                                            this.char = char;
                                                                                                            return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                        }


                                                                                            }
                                                                                        }
                                                                                    }

                                                                                default => 
                                                                                    {
                                                                                        this.char = char;
                                                                                        var i = Std.int(n);
                                                                                        return hscript.Token.TConst(if ( exp > 0 )
                                                                                            hscript.Const.CFloat((n * 10) / exp)
                                                                                        else
                                                                                            if ( i == n )
                                                                                                hscript.Const.CInt(i)
                                                                                            else
                                                                                                hscript.Const.CFloat(n)

                                                                                        );
                                                                                    }

                                                                                }

                                                                        }
                                                                    }
                                                                    else
                                                                        return hscript.Token.TBkClose

                                                                else
                                                                    if @tmp == 39
                                                                        if ( (char >= 48) && (char <= 57) ) {
                                                                            var n = ( char - 48 ) * 1.0;
                                                                            var exp = 0.;
                                                                            while ( true ) {
                                                                                char = this.readChar();
                                                                                exp *= 10;
                                                                                if ( (char >= 48) && (char <= 57) )
                                                                                    n = ((n * 10) + ( char - 48 ))
                                                                                else
                                                                                    switch ( char ){
                                                                                    46 => 
                                                                                        {
                                                                                            if ( exp > 0 ) {
                                                                                                if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                    this.push(hscript.Token.TOp(String.new("...")));
                                                                                                    var i = Std.int(n);
                                                                                                    return hscript.Token.TConst(if ( i == n )
                                                                                                        hscript.Const.CInt(i)
                                                                                                    else
                                                                                                        hscript.Const.CFloat(n)
                                                                                                    );
                                                                                                }
                                                                                                this.invalidChar(char);
                                                                                            }
                                                                                            exp = 1.;
                                                                                        }

                                                                                    120 => 
                                                                                        {
                                                                                            if ( (n > 0) || (exp > 0) )
                                                                                                this.invalidChar(char);
                                                                                            var n1 = 0;
                                                                                            while ( true ) {
                                                                                                char = this.readChar();
                                                                                                {
                                                                                                    var @tmp = ( char );
                                                                                                    if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                        n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                    else
                                                                                                        if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                            n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                        else
                                                                                                            if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                                n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                            else {
                                                                                                                this.char = char;
                                                                                                                return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                            }


                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    default => 
                                                                                        {
                                                                                            this.char = char;
                                                                                            var i = Std.int(n);
                                                                                            return hscript.Token.TConst(if ( exp > 0 )
                                                                                                hscript.Const.CFloat((n * 10) / exp)
                                                                                            else
                                                                                                if ( i == n )
                                                                                                    hscript.Const.CInt(i)
                                                                                                else
                                                                                                    hscript.Const.CFloat(n)

                                                                                            );
                                                                                        }

                                                                                    }

                                                                            }
                                                                        }
                                                                        else
                                                                            return hscript.Token.TInterp(this.readString(39))

                                                                    else
                                                                        if @tmp == 34
                                                                            if ( (char >= 48) && (char <= 57) ) {
                                                                                var n = ( char - 48 ) * 1.0;
                                                                                var exp = 0.;
                                                                                while ( true ) {
                                                                                    char = this.readChar();
                                                                                    exp *= 10;
                                                                                    if ( (char >= 48) && (char <= 57) )
                                                                                        n = ((n * 10) + ( char - 48 ))
                                                                                    else
                                                                                        switch ( char ){
                                                                                        46 => 
                                                                                            {
                                                                                                if ( exp > 0 ) {
                                                                                                    if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                        this.push(hscript.Token.TOp(String.new("...")));
                                                                                                        var i = Std.int(n);
                                                                                                        return hscript.Token.TConst(if ( i == n )
                                                                                                            hscript.Const.CInt(i)
                                                                                                        else
                                                                                                            hscript.Const.CFloat(n)
                                                                                                        );
                                                                                                    }
                                                                                                    this.invalidChar(char);
                                                                                                }
                                                                                                exp = 1.;
                                                                                            }

                                                                                        120 => 
                                                                                            {
                                                                                                if ( (n > 0) || (exp > 0) )
                                                                                                    this.invalidChar(char);
                                                                                                var n1 = 0;
                                                                                                while ( true ) {
                                                                                                    char = this.readChar();
                                                                                                    {
                                                                                                        var @tmp = ( char );
                                                                                                        if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                            n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                        else
                                                                                                            if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                                n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                            else
                                                                                                                if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                                    n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                                else {
                                                                                                                    this.char = char;
                                                                                                                    return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                                }


                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        default => 
                                                                                            {
                                                                                                this.char = char;
                                                                                                var i = Std.int(n);
                                                                                                return hscript.Token.TConst(if ( exp > 0 )
                                                                                                    hscript.Const.CFloat((n * 10) / exp)
                                                                                                else
                                                                                                    if ( i == n )
                                                                                                        hscript.Const.CInt(i)
                                                                                                    else
                                                                                                        hscript.Const.CFloat(n)

                                                                                                );
                                                                                            }

                                                                                        }

                                                                                }
                                                                            }
                                                                            else
                                                                                return hscript.Token.TConst(hscript.Const.CString(this.readString(34)))

                                                                        else
                                                                            if @tmp == 63
                                                                                if ( (char >= 48) && (char <= 57) ) {
                                                                                    var n = ( char - 48 ) * 1.0;
                                                                                    var exp = 0.;
                                                                                    while ( true ) {
                                                                                        char = this.readChar();
                                                                                        exp *= 10;
                                                                                        if ( (char >= 48) && (char <= 57) )
                                                                                            n = ((n * 10) + ( char - 48 ))
                                                                                        else
                                                                                            switch ( char ){
                                                                                            46 => 
                                                                                                {
                                                                                                    if ( exp > 0 ) {
                                                                                                        if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                            this.push(hscript.Token.TOp(String.new("...")));
                                                                                                            var i = Std.int(n);
                                                                                                            return hscript.Token.TConst(if ( i == n )
                                                                                                                hscript.Const.CInt(i)
                                                                                                            else
                                                                                                                hscript.Const.CFloat(n)
                                                                                                            );
                                                                                                        }
                                                                                                        this.invalidChar(char);
                                                                                                    }
                                                                                                    exp = 1.;
                                                                                                }

                                                                                            120 => 
                                                                                                {
                                                                                                    if ( (n > 0) || (exp > 0) )
                                                                                                        this.invalidChar(char);
                                                                                                    var n1 = 0;
                                                                                                    while ( true ) {
                                                                                                        char = this.readChar();
                                                                                                        {
                                                                                                            var @tmp = ( char );
                                                                                                            if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                                n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                            else
                                                                                                                if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                                    n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                                else
                                                                                                                    if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                                        n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                                    else {
                                                                                                                        this.char = char;
                                                                                                                        return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                                    }


                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            default => 
                                                                                                {
                                                                                                    this.char = char;
                                                                                                    var i = Std.int(n);
                                                                                                    return hscript.Token.TConst(if ( exp > 0 )
                                                                                                        hscript.Const.CFloat((n * 10) / exp)
                                                                                                    else
                                                                                                        if ( i == n )
                                                                                                            hscript.Const.CInt(i)
                                                                                                        else
                                                                                                            hscript.Const.CFloat(n)

                                                                                                    );
                                                                                                }

                                                                                            }

                                                                                    }
                                                                                }
                                                                                else
                                                                                    return hscript.Token.TQuestion

                                                                            else
                                                                                if @tmp == 58
                                                                                    if ( (char >= 48) && (char <= 57) ) {
                                                                                        var n = ( char - 48 ) * 1.0;
                                                                                        var exp = 0.;
                                                                                        while ( true ) {
                                                                                            char = this.readChar();
                                                                                            exp *= 10;
                                                                                            if ( (char >= 48) && (char <= 57) )
                                                                                                n = ((n * 10) + ( char - 48 ))
                                                                                            else
                                                                                                switch ( char ){
                                                                                                46 => 
                                                                                                    {
                                                                                                        if ( exp > 0 ) {
                                                                                                            if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                                this.push(hscript.Token.TOp(String.new("...")));
                                                                                                                var i = Std.int(n);
                                                                                                                return hscript.Token.TConst(if ( i == n )
                                                                                                                    hscript.Const.CInt(i)
                                                                                                                else
                                                                                                                    hscript.Const.CFloat(n)
                                                                                                                );
                                                                                                            }
                                                                                                            this.invalidChar(char);
                                                                                                        }
                                                                                                        exp = 1.;
                                                                                                    }

                                                                                                120 => 
                                                                                                    {
                                                                                                        if ( (n > 0) || (exp > 0) )
                                                                                                            this.invalidChar(char);
                                                                                                        var n1 = 0;
                                                                                                        while ( true ) {
                                                                                                            char = this.readChar();
                                                                                                            {
                                                                                                                var @tmp = ( char );
                                                                                                                if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                                    n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                                else
                                                                                                                    if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                                        n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                                    else
                                                                                                                        if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                                            n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                                        else {
                                                                                                                            this.char = char;
                                                                                                                            return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                                        }


                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                default => 
                                                                                                    {
                                                                                                        this.char = char;
                                                                                                        var i = Std.int(n);
                                                                                                        return hscript.Token.TConst(if ( exp > 0 )
                                                                                                            hscript.Const.CFloat((n * 10) / exp)
                                                                                                        else
                                                                                                            if ( i == n )
                                                                                                                hscript.Const.CInt(i)
                                                                                                            else
                                                                                                                hscript.Const.CFloat(n)

                                                                                                        );
                                                                                                    }

                                                                                                }

                                                                                        }
                                                                                    }
                                                                                    else
                                                                                        return hscript.Token.TDoubleDot

                                                                                else
                                                                                    if ( (char >= 48) && (char <= 57) ) {
                                                                                        var n = ( char - 48 ) * 1.0;
                                                                                        var exp = 0.;
                                                                                        while ( true ) {
                                                                                            char = this.readChar();
                                                                                            exp *= 10;
                                                                                            if ( (char >= 48) && (char <= 57) )
                                                                                                n = ((n * 10) + ( char - 48 ))
                                                                                            else
                                                                                                switch ( char ){
                                                                                                46 => 
                                                                                                    {
                                                                                                        if ( exp > 0 ) {
                                                                                                            if ( (exp == 10) && (this.readChar() == 46) ) {
                                                                                                                this.push(hscript.Token.TOp(String.new("...")));
                                                                                                                var i = Std.int(n);
                                                                                                                return hscript.Token.TConst(if ( i == n )
                                                                                                                    hscript.Const.CInt(i)
                                                                                                                else
                                                                                                                    hscript.Const.CFloat(n)
                                                                                                                );
                                                                                                            }
                                                                                                            this.invalidChar(char);
                                                                                                        }
                                                                                                        exp = 1.;
                                                                                                    }

                                                                                                120 => 
                                                                                                    {
                                                                                                        if ( (n > 0) || (exp > 0) )
                                                                                                            this.invalidChar(char);
                                                                                                        var n1 = 0;
                                                                                                        while ( true ) {
                                                                                                            char = this.readChar();
                                                                                                            {
                                                                                                                var @tmp = ( char );
                                                                                                                if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                                                                                    n1 = ((( n1 << 4 ) + char) - 48)
                                                                                                                else
                                                                                                                    if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                                                                        n1 = (( n1 << 4 ) + ( char - 55 ))
                                                                                                                    else
                                                                                                                        if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                                                                            n1 = (( n1 << 4 ) + ( char - 87 ))
                                                                                                                        else {
                                                                                                                            this.char = char;
                                                                                                                            return hscript.Token.TConst(hscript.Const.CInt(n1));
                                                                                                                        }


                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                default => 
                                                                                                    {
                                                                                                        this.char = char;
                                                                                                        var i = Std.int(n);
                                                                                                        return hscript.Token.TConst(if ( exp > 0 )
                                                                                                            hscript.Const.CFloat((n * 10) / exp)
                                                                                                        else
                                                                                                            if ( i == n )
                                                                                                                hscript.Const.CInt(i)
                                                                                                            else
                                                                                                                hscript.Const.CFloat(n)

                                                                                                        );
                                                                                                    }

                                                                                                }

                                                                                        }
                                                                                    }
                                                                                    else {
                                                                                        if ( this.ops[char] ) {
                                                                                            var op = String.fromCharCode(char);
                                                                                            while ( true ) {
                                                                                                char = this.readChar();
                                                                                                if ( $not(this.ops[char]) ) {
                                                                                                    if ( op.charCodeAt(0) == 47 )
                                                                                                        return this.tokenComment(op,char);
                                                                                                    this.char = char;
                                                                                                    return hscript.Token.TOp(op);
                                                                                                }
                                                                                                op += String.fromCharCode(char);
                                                                                            }
                                                                                        }
                                                                                        if ( this.idents[char] ) {
                                                                                            var id = String.fromCharCode(char);
                                                                                            while ( true ) {
                                                                                                char = this.readChar();
                                                                                                if ( $not(this.idents[char]) ) {
                                                                                                    this.char = char;
                                                                                                    return hscript.Token.TId(id);
                                                                                                }
                                                                                                id += String.fromCharCode(char);
                                                                                            }
                                                                                        }
                                                                                        this.invalidChar(char);
                                                                                    }

















            }
            char = this.readChar();
        }
        return null;
    }
    @tmp.readString = function(until) {
        var c = 0;
        var b = haxe.io.BytesOutput.new();
        var esc = false;
        var old = this.line;
        var s = this.input;
        while ( true ) {
            try {
                c = s.readByte();
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if true {
                    var e = @tmp;
                    {
                        this.line = old;
                        this.error(hscript.Error.EUnterminatedString,0,0);
                    }
                }
                else
                    $rethrow(@tmp)
            }
            if ( esc ) {
                esc = false;
                {
                    var @tmp = ( c );
                    if @tmp == 110
                        b.writeByte(10)
                    else
                        if @tmp == 114
                            b.writeByte(13)
                        else
                            if @tmp == 116
                                b.writeByte(9)
                            else
                                if ((@tmp == 39) || (@tmp == 34)) || (@tmp == 92)
                                    b.writeByte(c)
                                else
                                    if @tmp == 47
                                        if ( this.allowJSON )
                                            b.writeByte(c)
                                        else
                                            this.invalidChar(c)

                                    else
                                        if @tmp == 117 {
                                            if ( $not(this.allowJSON) )
                                                $throw(this.invalidChar(c));
                                            var code = null;
                                            try {
                                                code = s.readString(4);
                                            }
                                            catch @tmp {
                                                if $typeof(@tmp) == $tstring
                                                    @tmp = String.new(@tmp);
                                                if true {
                                                    var e = @tmp;
                                                    {
                                                        this.line = old;
                                                        this.error(hscript.Error.EUnterminatedString,0,0);
                                                    }
                                                }
                                                else
                                                    $rethrow(@tmp)
                                            }
                                            var k = 0;
                                            {
                                                var _g = 0;
                                                while ( _g < 4 ) {
                                                    var i = _g ++= 1;
                                                    k <<= 4;
                                                    var char = code.charCodeAt(i);
                                                    {
                                                        var @tmp = ( char );
                                                        if (((((((((@tmp == 48) || (@tmp == 49)) || (@tmp == 50)) || (@tmp == 51)) || (@tmp == 52)) || (@tmp == 53)) || (@tmp == 54)) || (@tmp == 55)) || (@tmp == 56)) || (@tmp == 57)
                                                            k += (char - 48)
                                                        else
                                                            if (((((@tmp == 65) || (@tmp == 66)) || (@tmp == 67)) || (@tmp == 68)) || (@tmp == 69)) || (@tmp == 70)
                                                                k += (char - 55)
                                                            else
                                                                if (((((@tmp == 97) || (@tmp == 98)) || (@tmp == 99)) || (@tmp == 100)) || (@tmp == 101)) || (@tmp == 102)
                                                                    k += (char - 87)
                                                                else
                                                                    this.invalidChar(char)


                                                    }
                                                }
                                            }
                                            if ( k <= 127 )
                                                b.writeByte(k)
                                            else
                                                if ( k <= 2047 ) {
                                                    b.writeByte(192 | (k >> 6));
                                                    b.writeByte(128 | (k & 63));
                                                }
                                                else {
                                                    b.writeByte(224 | (k >> 12));
                                                    b.writeByte(128 | ((k >> 6) & 63));
                                                    b.writeByte(128 | (k & 63));
                                                }

                                        }
                                        else
                                            this.invalidChar(c)





                }
            }
            else
                if ( c == 92 )
                    esc = true
                else
                    if ( c == until )
                        break;
                    else {
                        if ( c == 10 )
                            this.line ++= 1;
                        b.writeByte(c);
                    }


        }
        return b.getBytes().toString();
    }
    @tmp.readChar = function() {
        try {
            return this.input.readByte();
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    return 0;
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.push = function(tk) {
        var _this = this.tokens;
        _this.head = haxe.ds.GenericCell.new(tk,_this.head);
        return null;
    }
    @tmp.parseTypeNext = function(t) {
        var tk = this.token();
        switch ( tk.index ){
        3 => 
            {
                var op = tk.args[0];
                if ( op != String.new("->") ) {
                    this.push(tk);
                    return t;
                }
            }

        default => 
            {
                this.push(tk);
                return t;
            }

        }
        var t2 = this.parseType();
        switch ( t2.index ){
        1 => 
            {
                var args = t2.args[0];
                {
                    args.unshift(t);
                    return t2;
                }
            }

        default => 
            return hscript.CType.CTFun(Array.new1($array(t),1),t2)
        }
        return null;
    }
    @tmp.parseType = function() {
        var t = this.token();
        switch ( t.index ){
        2 => 
            {
                var v = t.args[0];
                {
                    var path = Array.new1($array(v),1);
                    while ( true ) {
                        t = this.token();
                        if ( t != hscript.Token.TDot )
                            break;;
                        t = this.token();
                        switch ( t.index ){
                        2 => 
                            {
                                var v1 = t.args[0];
                                path.push(v1);
                            }

                        default => 
                            this.unexpected(t,null)
                        }
                    }
                    var params = null;
                    switch ( t.index ){
                    3 => 
                        switch ( t.args[0] ){
                        String.new("<") => 
                            {
                                params = Array.new1($array(),0);
                                while ( true ) {
                                    params.push(this.parseType());
                                    t = this.token();
                                    switch ( t.index ){
                                    9 => 
                                        continue
                                    3 => 
                                        switch ( t.args[0] ){
                                        String.new(">") => 
                                            break;
                                        default => 
                                            {
                                            }

                                        }

                                    default => 
                                        {
                                        }

                                    }
                                    this.unexpected(t,null);
                                }
                            }

                        default => 
                            this.push(t)
                        }

                    default => 
                        this.push(t)
                    }
                    return this.parseTypeNext(hscript.CType.CTPath(path,params));
                }
            }

        4 => 
            {
                var t1 = this.parseType();
                {
                    var t2 = this.token();
                    if ( t2 != hscript.Token.TPClose )
                        this.unexpected(t2,null);
                }
                return this.parseTypeNext(hscript.CType.CTParent(t1));
            }

        6 => 
            {
                var fields = Array.new1($array(),0);
                while ( true ) {
                    t = this.token();
                    switch ( t.index ){
                    7 => 
                        break;
                    2 => 
                        {
                            var name = t.args[0];
                            {
                                {
                                    var t1 = this.token();
                                    if ( t1 != hscript.Token.TDoubleDot )
                                        this.unexpected(t1,null);
                                }
                                fields.push({
                                    name => name, 
                                    t => this.parseType()

                                });
                                t = this.token();
                                switch ( t.index ){
                                9 => 
                                    {
                                    }

                                7 => 
                                    break;
                                default => 
                                    this.unexpected(t,null)
                                }
                            }
                        }

                    default => 
                        this.unexpected(t,null)
                    }
                }
                return this.parseTypeNext(hscript.CType.CTAnon(fields));
            }

        default => 
            return this.unexpected(t,null)
        }
        return null;
    }
    @tmp.parseStructure = function(id) {
        switch ( id ){
        String.new("enum") => 
            {
                var name;
                {
                    var _g = this.token();
                    {
                        var all = _g;
                        switch ( _g.index ){
                        2 => 
                            {
                                var s = _g.args[0];
                                name = s;
                            }

                        default => 
                            name = this.unexpected(all,null)
                        }
                    }
                }
                var ed = {
                    name => name, 
                    constructors => haxe.ds.StringMap.new()

                };
                {
                    var t = this.token();
                    if ( t != hscript.Token.TBrOpen )
                        this.unexpected(t,null);
                }
                var tk = null;
                var cf = Array.new1($array(),0);
                var name1 = null;
                var inParams = false;
                while ( ( tk = this.token() ) != hscript.Token.TBrClose )
                    switch ( tk.index ){
                    2 => 
                        {
                            var nm = tk.args[0];
                            if ( name1 == null )
                                name1 = nm
                            else {
                                var nm1 = tk.args[0];
                                if ( inParams )
                                    cf.push({
                                        name => nm1

                                    })
                                else
                                    this.unexpected(tk,null)
                            }
                        }

                    14 => 
                        if ( inParams && (cf.length > 0) )
                            cf[cf.length - 1].type = this.parseType()
                        else
                            this.unexpected(tk,null)

                    4 => 
                        if ( name1 != null )
                            inParams = true
                        else
                            this.unexpected(tk,null)

                    5 => 
                        if ( inParams )
                            inParams = false
                        else
                            this.unexpected(tk,null)

                    10 => 
                        if ( $not(inParams) ) {
                            $hset(ed.constructors.h,name1.__s,cf,null);
                            name1 = null;
                            cf = Array.new1($array(),0);
                        }
                        else
                            this.unexpected(tk,null)

                    default => 
                        this.unexpected(tk,null)
                    }

                {
                    var pmin = null;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EEnumDecl(ed),pmin,pmax);
                }
            }

        String.new("class") => 
            {
                var name;
                {
                    var _g = this.token();
                    {
                        var all = _g;
                        switch ( _g.index ){
                        2 => 
                            {
                                var s = _g.args[0];
                                name = s;
                            }

                        default => 
                            name = this.unexpected(all,null)
                        }
                    }
                }
                var cd = {
                    name => name, 
                    fields => haxe.ds.StringMap.new()

                };
                {
                    var t = this.token();
                    if ( t != hscript.Token.TBrOpen )
                        this.unexpected(t,null);
                }
                var tk = null;
                while ( tk != hscript.Token.TBrClose ) {
                    var field = {
                        access => 0

                    };
                    var name1 = null;
                    var canSkip = false;
                    while ( (( tk = this.token() ) != hscript.Token.TSemicolon) && (tk != hscript.Token.TBrClose) ) {
                        if ( canSkip ) {
                            this.push(tk);
                            field.expr = this.parseExpr();
                            canSkip = false;
                        }
                        else
                            switch ( tk.index ){
                            2 => 
                                switch ( tk.args[0] ){
                                String.new("public") => 
                                    field.access |= (1 << hscript.Access.Public.index)
                                String.new("private") => 
                                    field.access |= (1 << hscript.Access.Private.index)
                                String.new("static") => 
                                    field.access |= (1 << hscript.Access.Static.index)
                                String.new("var") => 
                                    {
                                        var _g1 = tk = this.token();
                                        {
                                            var all = _g1;
                                            switch ( _g1.index ){
                                            2 => 
                                                {
                                                    var s = _g1.args[0];
                                                    name1 = s;
                                                }

                                            default => 
                                                name1 = this.unexpected(all,null)
                                            }
                                        }
                                    }

                                String.new("function") => 
                                    {
                                        this.push(tk);
                                        field.expr = this.parseExpr();
                                        {
                                            var all = field.expr.expr;
                                            switch ( field.expr.expr.index ){
                                            14 => 
                                                {
                                                    var c = field.expr.expr.args[3];
                                                    var n = field.expr.expr.args[2];
                                                    var b = field.expr.expr.args[1];
                                                    var a = field.expr.expr.args[0];
                                                    {
                                                        name1 = n;
                                                        {
                                                            var pmin = null;
                                                            var pmax = null;
                                                            if ( pmin == null )
                                                                pmin = 0;
                                                            if ( pmax == null )
                                                                pmax = 0;
                                                            field.expr = hscript.Expr.new(hscript.ExprDef.EFunction(a,b,null,c),pmin,pmax);
                                                        }
                                                    }
                                                }

                                            default => 
                                                $throw(hscript.Error.EInvalidFunction)
                                            }
                                        }
                                        field.access |= (1 << hscript.Access.Function.index);
                                    }

                                default => 
                                    this.unexpected(tk,null)
                                }

                            4 => 
                                if ( name1 != null ) {
                                    {
                                        var _g1 = tk = this.token();
                                        switch ( _g1.index ){
                                        2 => 
                                            {
                                                var @tmp = ( _g1.args[0] );
                                                if @tmp == String.new("get")
                                                    field.access |= (1 << hscript.Access.HasGetter.index)
                                                else
                                                    if (@tmp == String.new("never")) || (@tmp == String.new("null")) {
                                                    }
                                                    else
                                                        this.unexpected(tk,null)

                                            }

                                        default => 
                                            this.unexpected(tk,null)
                                        }
                                    }
                                    {
                                        var t = this.token();
                                        if ( t != hscript.Token.TComma )
                                            this.unexpected(t,null);
                                    }
                                    {
                                        var _g2 = tk = this.token();
                                        switch ( _g2.index ){
                                        2 => 
                                            {
                                                var @tmp = ( _g2.args[0] );
                                                if @tmp == String.new("set")
                                                    field.access |= (1 << hscript.Access.HasSetter.index)
                                                else
                                                    if (@tmp == String.new("never")) || (@tmp == String.new("null")) {
                                                    }
                                                    else
                                                        this.unexpected(tk,null)

                                            }

                                        default => 
                                            this.unexpected(tk,null)
                                        }
                                    }
                                    {
                                        var t = this.token();
                                        if ( t != hscript.Token.TPClose )
                                            this.unexpected(t,null);
                                    }
                                }
                                else
                                    this.unexpected(tk,null)

                            14 => 
                                field.type = this.parseType()
                            3 => 
                                switch ( tk.args[0] ){
                                String.new("=") => 
                                    field.expr = this.parseExpr()
                                default => 
                                    this.unexpected(tk,null)
                                }

                            10 => 
                                break;
                            default => 
                                this.unexpected(tk,null)
                            }

                        if ( name1 != null ) {
                            if ( name1 == String.new("new") )
                                cd.constructor = field
                            else
                                $hset(cd.fields.h,name1.__s,field,null)
                        }
                    }
                }
                {
                    var pmin = 0;
                    var pmax = 0;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EClassDecl(cd),pmin,pmax);
                }
            }

        String.new("if") => 
            {
                var cond = this.parseExpr();
                var e1 = this.parseExpr();
                var e2 = null;
                var semic = false;
                var tk = this.token();
                if ( tk == hscript.Token.TSemicolon ) {
                    semic = true;
                    tk = this.token();
                }
                if ( Type.enumEq(tk,hscript.Token.TId(String.new("else"))) )
                    e2 = this.parseExpr()
                else {
                    this.push(tk);
                    if ( semic )
                        this.push(hscript.Token.TSemicolon);
                }
                {
                    var pmin = 0;
                    var pmax;
                    if ( e2 == null )
                        pmax = 0
                    else
                        pmax = e2.pmax
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EIf(cond,e1,e2),pmin,pmax);
                }
            }

        String.new("var") => 
            {
                var vars = Array.new1($array(),0);
                var tk = null;
                {
                    var _g = Array.new1($array(),0);
                    while ( ( if ( tk == null )
                        tk = this.token()
                    else
                        tk = tk
                     ) != hscript.Token.TSemicolon )
                        _g.push({
                            var ident = null;
                            var type = null;
                            var expr = null;
                            while ( tk == hscript.Token.TComma )
                                tk = this.token()
                            switch ( tk.index ){
                            2 => 
                                {
                                    var id1 = tk.args[0];
                                    ident = id1;
                                }

                            default => 
                                this.unexpected(tk,String.new("identifier"))
                            }
                            tk = this.token();
                            switch ( tk.index ){
                            14 => 
                                if ( type == null ) {
                                    type = this.parseType();
                                    tk = this.token();
                                }
                                else {
                                }

                            default => 
                                {
                                }

                            }
                            {
                                var @tmp = ( tk.index );
                                if @tmp == 3
                                    switch ( tk.args[0] ){
                                    String.new("=") => 
                                        {
                                            expr = this.parseExpr();
                                            tk = this.token();
                                        }

                                    default => 
                                        if ( type != null ) {
                                            this.push(tk);
                                            expr = this.parseExpr();
                                            tk = this.token();
                                        }
                                        else
                                            this.unexpected(tk,String.new("type or assignment"))

                                    }

                                else
                                    if (@tmp == 10) || (@tmp == 9) {
                                    }
                                    else
                                        if ( type != null ) {
                                            this.push(tk);
                                            expr = this.parseExpr();
                                            tk = this.token();
                                        }
                                        else
                                            this.unexpected(tk,String.new("type or assignment"))


                            }
                            {
                                name => ident, 
                                type => type, 
                                expr => expr

                            };
                        }
                        )
                    vars = _g;
                }
                this.push(tk);
                {
                    var pmin = 0;
                    var pmax = 0;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EVars(vars),pmin,pmax);
                }
            }

        String.new("while") => 
            {
                var econd = this.parseExpr();
                var e = this.parseExpr();
                {
                    var pmin = 0;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EWhile(econd,e),pmin,pmax);
                }
            }

        String.new("for") => 
            {
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPOpen )
                        this.unexpected(t,null);
                }
                var tk = this.token();
                var vname = null;
                switch ( tk.index ){
                2 => 
                    {
                        var id1 = tk.args[0];
                        vname = id1;
                    }

                default => 
                    this.unexpected(tk,null)
                }
                tk = this.token();
                if ( $not(Type.enumEq(tk,hscript.Token.TId(String.new("in")))) )
                    this.unexpected(tk,null);
                var eiter = this.parseExpr();
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPClose )
                        this.unexpected(t,null);
                }
                var e = this.parseExpr();
                {
                    var pmin = 0;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EFor(vname,eiter,e),pmin,pmax);
                }
            }

        String.new("switch") => 
            {
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPOpen )
                        this.unexpected(t,null);
                }
                var val = this.parseExpr();
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPClose )
                        this.unexpected(t,null);
                }
                {
                    var t = this.token();
                    if ( t != hscript.Token.TBrOpen )
                        this.unexpected(t,null);
                }
                var cases = Array.new1($array(),0);
                var def = null;
                while ( true ) {
                    var tk = this.token();
                    switch ( tk.index ){
                    2 => 
                        switch ( tk.args[0] ){
                        String.new("case") => 
                            {
                                var allowed = Array.new1($array(),0);
                                allowed.push(this.parseExpr());
                                var guard = null;
                                var ntk = null;
                                while ( true ) {
                                    {
                                        var _g = ntk = this.token();
                                        switch ( _g.index ){
                                        9 => 
                                            {
                                            }

                                        3 => 
                                            switch ( _g.args[0] ){
                                            String.new("|") => 
                                                {
                                                }

                                            default => 
                                                break;
                                            }

                                        2 => 
                                            switch ( _g.args[0] ){
                                            String.new("if") => 
                                                {
                                                    {
                                                        var t = this.token();
                                                        if ( t != hscript.Token.TPOpen )
                                                            this.unexpected(t,null);
                                                    }
                                                    guard = this.parseExpr();
                                                    {
                                                        var t = this.token();
                                                        if ( t != hscript.Token.TPClose )
                                                            this.unexpected(t,null);
                                                    }
                                                    ntk = this.token();
                                                    break;;
                                                }

                                            default => 
                                                break;
                                            }

                                        default => 
                                            break;
                                        }
                                    }
                                    allowed.push(this.parseExpr());
                                }
                                switch ( ntk.index ){
                                14 => 
                                    {
                                    }

                                default => 
                                    this.unexpected(ntk,null)
                                }
                                var expr = this.parseExpr();
                                {
                                    var t = this.token();
                                    if ( t != hscript.Token.TSemicolon )
                                        this.unexpected(t,null);
                                }
                                cases.push({
                                    values => allowed, 
                                    expr => expr, 
                                    guard => guard

                                });
                            }

                        String.new("default") => 
                            {
                                {
                                    var t = this.token();
                                    if ( t != hscript.Token.TDoubleDot )
                                        this.unexpected(t,null);
                                }
                                def = this.parseExpr();
                                {
                                    var t = this.token();
                                    if ( t != hscript.Token.TSemicolon )
                                        this.unexpected(t,null);
                                }
                            }

                        default => 
                            this.unexpected(tk,null)
                        }

                    7 => 
                        break;
                    default => 
                        this.unexpected(tk,null)
                    }
                }
                {
                    var pmin = null;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ESwitch(val,cases,def),pmin,pmax);
                }
            }

        String.new("break") => 
            {
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EBreak,pmin,pmax);
            }

        String.new("continue") => 
            {
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EContinue,pmin,pmax);
            }

        String.new("untyped") => 
            {
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EUntyped(this.parseExpr()),pmin,pmax);
            }

        String.new("using") => 
            {
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EUsing(this.parseExpr()),pmin,pmax);
            }

        String.new("import") => 
            {
                var expr = this.parseExpr();
                var name;
                switch ( expr.expr.index ){
                5 => 
                    {
                        var f = expr.expr.args[1];
                        name = f;
                    }

                default => 
                    name = null
                }
                var tk = this.token();
                switch ( tk.index ){
                2 => 
                    switch ( tk.args[0] ){
                    String.new("in") => 
                        {
                            var _g = this.token();
                            {
                                var all = _g;
                                switch ( _g.index ){
                                2 => 
                                    {
                                        var id1 = _g.args[0];
                                        name = id1;
                                    }

                                default => 
                                    name = this.unexpected(all,null)
                                }
                            }
                        }

                    default => 
                        this.push(tk)
                    }

                default => 
                    this.push(tk)
                }
                {
                    var pmin = null;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EVars(Array.new1($array({
                        name => name, 
                        expr => expr

                    }),1)),pmin,pmax);
                }
            }

        String.new("else") => 
            return this.unexpected(hscript.Token.TId(id),null)
        String.new("function") => 
            {
                var tk = this.token();
                var name = null;
                switch ( tk.index ){
                2 => 
                    {
                        var id1 = tk.args[0];
                        name = id1;
                    }

                default => 
                    this.push(tk)
                }
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPOpen )
                        this.unexpected(t,null);
                }
                var args = Array.new();
                tk = this.token();
                if ( tk != hscript.Token.TPClose ) {
                    var arg = true;
                    while ( arg ) {
                        var name1 = null;
                        switch ( tk.index ){
                        2 => 
                            {
                                var id1 = tk.args[0];
                                name1 = id1;
                            }

                        default => 
                            this.unexpected(tk,null)
                        }
                        tk = this.token();
                        var t = null;
                        if ( tk == hscript.Token.TDoubleDot ) {
                            t = this.parseType();
                            tk = this.token();
                        }
                        args.push({
                            name => name1, 
                            t => t

                        });
                        switch ( tk.index ){
                        9 => 
                            tk = this.token()
                        5 => 
                            arg = false
                        default => 
                            this.unexpected(tk,null)
                        }
                    }
                }
                var ret = null;
                tk = this.token();
                if ( tk != hscript.Token.TDoubleDot )
                    this.push(tk)
                else
                    ret = this.parseType()
                var body = this.parseExpr();
                {
                    var pmin = 0;
                    var pmax = body.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EFunction(args,body,name,ret),pmin,pmax);
                }
            }

        String.new("return") => 
            {
                var tk = this.token();
                this.push(tk);
                var e;
                if ( tk == hscript.Token.TSemicolon )
                    e = null
                else
                    e = this.parseExpr()
                {
                    var pmin = 0;
                    var pmax;
                    if ( e == null )
                        pmax = 0
                    else
                        pmax = e.pmax
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EReturn(e),pmin,pmax);
                }
            }

        String.new("new") => 
            {
                var a = Array.new();
                var tk = this.token();
                switch ( tk.index ){
                2 => 
                    {
                        var id1 = tk.args[0];
                        a.push(id1);
                    }

                default => 
                    this.unexpected(tk,null)
                }
                var next = true;
                var hasType = false;
                while ( next ) {
                    tk = this.token();
                    switch ( tk.index ){
                    3 => 
                        switch ( tk.args[0] ){
                        String.new("<") => 
                            {
                                this.parseType();
                                hasType = true;
                            }

                        String.new(">") => 
                            hasType = false
                        default => 
                            this.unexpected(tk,null)
                        }

                    9 => 
                        if ( hasType )
                            this.parseType()
                        else
                            this.unexpected(tk,null)

                    8 => 
                        {
                            tk = this.token();
                            switch ( tk.index ){
                            2 => 
                                {
                                    var id1 = tk.args[0];
                                    a.push(id1);
                                }

                            default => 
                                this.unexpected(tk,null)
                            }
                        }

                    4 => 
                        next = false
                    default => 
                        this.unexpected(tk,null)
                    }
                }
                var args = this.parseExprList(hscript.Token.TPClose);
                {
                    var pmin = 0;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ENew(a.join(String.new(".")),args),pmin,pmax);
                }
            }

        String.new("throw") => 
            {
                var e = this.parseExpr();
                {
                    var pmin = 0;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EThrow(e),pmin,pmax);
                }
            }

        String.new("try") => 
            {
                var e = this.parseExpr();
                var tk = this.token();
                if ( $not(Type.enumEq(tk,hscript.Token.TId(String.new("catch")))) )
                    this.unexpected(tk,null);
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPOpen )
                        this.unexpected(t,null);
                }
                tk = this.token();
                var vname;
                switch ( tk.index ){
                2 => 
                    {
                        var id1 = tk.args[0];
                        vname = id1;
                    }

                default => 
                    vname = this.unexpected(tk,null)
                }
                {
                    var t = this.token();
                    if ( t != hscript.Token.TDoubleDot )
                        this.unexpected(t,null);
                }
                var t = this.parseType();
                {
                    var t1 = this.token();
                    if ( t1 != hscript.Token.TPClose )
                        this.unexpected(t1,null);
                }
                var ec = this.parseExpr();
                {
                    var pmin = 0;
                    var pmax = ec.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ETry(e,vname,t,ec),pmin,pmax);
                }
            }

        default => 
            return null
        }
        return null;
    }
    @tmp.parseString = function(s) {
        this.line = 1;
        return this.parse(haxe.io.StringInput.new(s));
    }
    @tmp.parseObject = function(p1) {
        var fl = Array.new();
        while ( true ) {
            var tk = this.token();
            var id = null;
            switch ( tk.index ){
            2 => 
                {
                    var i = tk.args[0];
                    id = i;
                }

            1 => 
                {
                    var c = tk.args[0];
                    {
                        if ( $not(this.allowJSON) )
                            this.unexpected(tk,null);
                        switch ( c.index ){
                        2 => 
                            {
                                var s = c.args[0];
                                id = s;
                            }

                        default => 
                            this.unexpected(tk,null)
                        }
                    }
                }

            7 => 
                break;
            default => 
                this.unexpected(tk,null)
            }
            {
                var t = this.token();
                if ( t != hscript.Token.TDoubleDot )
                    this.unexpected(t,null);
            }
            fl.push({
                name => id, 
                e => this.parseExpr()

            });
            tk = this.token();
            switch ( tk.index ){
            7 => 
                break;
            9 => 
                {
                }

            default => 
                this.unexpected(tk,null)
            }
        }
        return this.parseExprNext({
            var pmin = p1;
            var pmax = null;
            if ( pmin == null )
                pmin = 0;
            if ( pmax == null )
                pmax = 0;
            hscript.Expr.new(hscript.ExprDef.EObject(fl),pmin,pmax);
        }
        );
    }
    @tmp.parseInterpolatedString = function(str) {
        var _g = this;
        var expr = $array(null);
        var add = function(e) {
            if ( expr[0] == null )
                expr[0] = e
            else {
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                expr[0] = hscript.Expr.new(hscript.ExprDef.EBinop(String.new("+"),expr[0],e),pmin,pmax);
            }
            return null;
        }
        ;
        var i = 0;
        var start = 0;
        var max = str.length;
        while ( i < max ) {
            if ( $sget(str.__s,i ++= 1) != 36 )
                continue;
            var len = (i - start) - 1;
            if ( (len > 0) || (expr[0] == null) )
                add({
                    var pmin = null;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EConst(hscript.Const.CString(str.substr(start,len))),pmin,pmax);
                }
                );
            start = i;
            var c = $sget(str.__s,i);
            if ( c == 123 ) {
                var count = 1;
                i ++= 1;
                while ( i < max ) {
                    var c1 = $sget(str.__s,i ++= 1);
                    if ( c1 == 125 ) {
                        if ( (count -= 1) == 0 )
                            break;;
                    }
                    else
                        if ( c1 == 123 )
                            count ++= 1;

                }
                if ( count > 0 )
                    $throw(String.new("Closing brace not found"));
                start ++= 1;
                var len1 = (i - start) - 1;
                var expr1 = str.substr(start,len1);
                add(hscript.Parser.new().parseString(expr1));
                start ++= 1;
            }
            else
                if ( (((c >= 97) && (c <= 122)) || ((c >= 65) && (c <= 90))) || (c == 95) ) {
                    i ++= 1;
                    while ( true ) {
                        var c1 = $sget(str.__s,i);
                        if ( ((((c1 >= 97) && (c1 <= 122)) || ((c1 >= 65) && (c1 <= 90))) || ((c1 >= 48) && (c1 <= 57))) || (c1 == 95) )
                            i ++= 1
                        else
                            break;
                    }
                    var len1 = i - start;
                    var ident = str.substr(start,len1);
                    add({
                        var pmin = null;
                        var pmax = null;
                        if ( pmin == null )
                            pmin = 0;
                        if ( pmax == null )
                            pmax = 0;
                        hscript.Expr.new(hscript.ExprDef.EIdent(ident),pmin,pmax);
                    }
                    );
                }
                else
                    if ( c == 36 ) {
                        start = (i ++= 1);
                        continue;
                    }
                    else {
                        start = (i - 1);
                        continue;
                    }


            start = i;
        }
        var len = i - start;
        if ( len > 0 )
            add({
                var pmin = null;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                hscript.Expr.new(hscript.ExprDef.EConst(hscript.Const.CString(str.substr(start,len))),pmin,pmax);
            }
            );
        if ( expr[0] == null ) {
            var pmin = null;
            var pmax = null;
            if ( pmin == null )
                pmin = 0;
            if ( pmax == null )
                pmax = 0;
            expr[0] = hscript.Expr.new(hscript.ExprDef.EConst(hscript.Const.CString(String.new(""))),pmin,pmax);
        }
        return expr[0];
    }
    @tmp.parseFullExpr = function() {
        var e = this.parseExpr();
        var tk = this.token();
        if ( (tk != hscript.Token.TSemicolon) && (tk != hscript.Token.TEof) ) {
            if ( this.isBlock(e) )
                this.push(tk)
            else
                this.unexpected(tk,null)
        }
        else
            switch ( e.expr.index ){
            26 => 
                this.push(tk)
            default => 
                {
                }

            }

        return e;
    }
    @tmp.parseExprNext = function(e1) {
        var tk = this.token();
        switch ( tk.index ){
        3 => 
            {
                var op = tk.args[0];
                {
                    if ( $hget(this.unops.h,op.__s,null) ) {
                        if ( this.isBlock(e1) || switch ( e1.expr.index ){
                        3 => 
                            true
                        default => 
                            false
                        }
                         ) {
                            this.push(tk);
                            return e1;
                        }
                        return this.parseExprNext({
                            var pmin = e1.pmin;
                            var pmax = null;
                            if ( pmin == null )
                                pmin = 0;
                            if ( pmax == null )
                                pmax = 0;
                            hscript.Expr.new(hscript.ExprDef.EUnop(op,false,e1),pmin,pmax);
                        }
                        );
                    }
                    return this.makeBinop(op,e1,this.parseExpr());
                }
            }

        8 => 
            {
                tk = this.token();
                var field = null;
                switch ( tk.index ){
                2 => 
                    {
                        var id = tk.args[0];
                        field = id;
                    }

                default => 
                    this.unexpected(tk,null)
                }
                return this.parseExprNext({
                    var pmin = e1.pmin;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EField(e1,field),pmin,pmax);
                }
                );
            }

        4 => 
            return this.parseExprNext({
                var pmin = e1.pmin;
                var pmax = null;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                hscript.Expr.new(hscript.ExprDef.ECall(e1,this.parseExprList(hscript.Token.TPClose)),pmin,pmax);
            }
            )
        11 => 
            {
                var e2 = this.parseExpr();
                {
                    var t = this.token();
                    if ( t != hscript.Token.TBkClose )
                        this.unexpected(t,null);
                }
                return this.parseExprNext({
                    var pmin = e1.pmin;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EArray(e1,e2),pmin,pmax);
                }
                );
            }

        13 => 
            {
                var e2 = this.parseExpr();
                {
                    var t = this.token();
                    if ( t != hscript.Token.TDoubleDot )
                        this.unexpected(t,null);
                }
                var e3 = this.parseExpr();
                {
                    var pmin = e1.pmin;
                    var pmax = e3.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ETernary(e1,e2,e3),pmin,pmax);
                }
            }

        default => 
            {
                this.push(tk);
                return e1;
            }

        }
        return null;
    }
    @tmp.parseExprList = function(etk) {
        var args = Array.new();
        var tk = this.token();
        if ( tk == etk )
            return args;
        this.push(tk);
        while ( true ) {
            args.push(this.parseExpr());
            tk = this.token();
            switch ( tk.index ){
            9 => 
                {
                }

            default => 
                {
                    if ( tk == etk )
                        break;;
                    this.unexpected(tk,null);
                }

            }
        }
        return args;
    }
    @tmp.parseExpr = function() {
        var tk = this.token();
        switch ( tk.index ){
        16 => 
            {
                var s = tk.args[0];
                {
                    var is = this.parseInterpolatedString(s);
                    return this.parseExprNext(is);
                }
            }

        15 => 
            {
                var name;
                {
                    var _g = this.token();
                    switch ( _g.index ){
                    2 => 
                        {
                            var s = _g.args[0];
                            name = s;
                        }

                    default => 
                        name = null
                    }
                }
                var args;
                {
                    var @tmp = ( name );
                    if (@tmp == String.new("if")) || (@tmp == String.new("elseif"))
                        args = Array.new1($array({
                            var _g1 = this.token();
                            switch ( _g1.index ){
                            2 => 
                                {
                                    var s = _g1.args[0];
                                    s;
                                }

                            default => 
                                null
                            }
                        }
                        ),1)
                    else
                        args = Array.new1($array(),0)
                }
                return this.parseExprNext({
                    var pmin = 0;
                    var pmax = 0;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EMacro(name,args),pmin,pmax);
                }
                );
            }

        2 => 
            {
                var id = tk.args[0];
                {
                    var e = this.parseStructure(id);
                    if ( e == null ) {
                        var pmin = null;
                        var pmax = null;
                        if ( pmin == null )
                            pmin = 0;
                        if ( pmax == null )
                            pmax = 0;
                        e = hscript.Expr.new(hscript.ExprDef.EIdent(id),pmin,pmax);
                    }
                    return this.parseExprNext(e);
                }
            }

        1 => 
            {
                var c = tk.args[0];
                return this.parseExprNext({
                    var pmin = null;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EConst(c),pmin,pmax);
                }
                );
            }

        4 => 
            {
                var e = this.parseExpr();
                {
                    var t = this.token();
                    if ( t != hscript.Token.TPClose )
                        this.unexpected(t,null);
                }
                return this.parseExprNext({
                    var pmin = 0;
                    var pmax = 0;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EParent(e),pmin,pmax);
                }
                );
            }

        6 => 
            {
                tk = this.token();
                switch ( tk.index ){
                7 => 
                    return this.parseExprNext({
                        var pmin = 0;
                        var pmax = null;
                        if ( pmin == null )
                            pmin = 0;
                        if ( pmax == null )
                            pmax = 0;
                        hscript.Expr.new(hscript.ExprDef.EObject(Array.new1($array(),0)),pmin,pmax);
                    }
                    )
                2 => 
                    {
                        var tk2 = this.token();
                        this.push(tk2);
                        this.push(tk);
                        switch ( tk2.index ){
                        14 => 
                            return this.parseExprNext(this.parseObject(0))
                        default => 
                            {
                            }

                        }
                    }

                1 => 
                    {
                        var c = tk.args[0];
                        if ( this.allowJSON )
                            switch ( c.index ){
                            2 => 
                                {
                                    var tk2 = this.token();
                                    this.push(tk2);
                                    this.push(tk);
                                    switch ( tk2.index ){
                                    14 => 
                                        return this.parseExprNext(this.parseObject(0))
                                    default => 
                                        {
                                        }

                                    }
                                }

                            default => 
                                this.push(tk)
                            }

                        else
                            this.push(tk)
                    }

                default => 
                    this.push(tk)
                }
                var a = Array.new();
                while ( true ) {
                    a.push(this.parseFullExpr());
                    tk = this.token();
                    if ( tk == hscript.Token.TBrClose )
                        break;;
                    this.push(tk);
                }
                {
                    var pmin = 0;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EBlock(a),pmin,pmax);
                }
            }

        3 => 
            {
                var op = tk.args[0];
                {
                    if ( $hmem(this.unops.h,op.__s,null) )
                        return this.makeUnop(op,this.parseExpr());
                    return this.unexpected(tk,null);
                }
            }

        11 => 
            {
                var a = Array.new();
                tk = this.token();
                while ( tk != hscript.Token.TBkClose ) {
                    this.push(tk);
                    a.push(this.parseExpr());
                    tk = this.token();
                    if ( tk == hscript.Token.TComma )
                        tk = this.token();
                }
                return this.parseExprNext({
                    var pmin = 0;
                    var pmax = null;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    hscript.Expr.new(hscript.ExprDef.EArrayDecl(a),pmin,pmax);
                }
                );
            }

        default => 
            return this.unexpected(tk,null)
        }
        return null;
    }
    @tmp.parse = function(s) {
        this.tokens = haxe.ds.GenericStack.new();
        this.char = -1;
        this.input = s;
        this.ops = Array.new();
        this.idents = Array.new();
        {
            var _g1 = 0;
            var _g = this.opChars.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                this.ops[this.opChars.charCodeAt(i)] = true;
            }
        }
        {
            var _g1 = 0;
            var _g = this.identChars.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                this.idents[this.identChars.charCodeAt(i)] = true;
            }
        }
        var a = Array.new();
        while ( true ) {
            var tk = this.token();
            if ( tk == hscript.Token.TEof )
                break;;
            this.push(tk);
            a.push(this.parseFullExpr());
        }
        if ( a.length == 1 )
            return a[0]
        else {
            var pmin = 0;
            var pmax = null;
            if ( pmin == null )
                pmin = 0;
            if ( pmax == null )
                pmax = 0;
            return hscript.Expr.new(hscript.ExprDef.EBlock(a),pmin,pmax);
        }
        return null;
    }
    @tmp.ops = null;
    @tmp.opRightAssoc = null;
    @tmp.opPriority = null;
    @tmp.opChars = null;
    @tmp.mk = function(e,pmin,pmax) {
        if ( pmin == null )
            pmin = 0;
        if ( pmax == null )
            pmax = 0;
        return hscript.Expr.new(e,pmin,pmax);
    }
    @tmp.makeUnop = function(op,e) {
        switch ( e.expr.index ){
        6 => 
            {
                var e2 = e.expr.args[2];
                var e1 = e.expr.args[1];
                var bop = e.expr.args[0];
                {
                    var pmin = e1.pmin;
                    var pmax = e2.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EBinop(bop,this.makeUnop(op,e1),e2),pmin,pmax);
                }
            }

        22 => 
            {
                var e3 = e.expr.args[2];
                var e2 = e.expr.args[1];
                var e1 = e.expr.args[0];
                {
                    var pmin = e1.pmin;
                    var pmax = e3.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ETernary(this.makeUnop(op,e1),e2,e3),pmin,pmax);
                }
            }

        default => 
            {
                var pmin = e.pmin;
                var pmax = e.pmax;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EUnop(op,true,e),pmin,pmax);
            }

        }
        return null;
    }
    @tmp.makeBinop = function(op,e1,e) {
        switch ( e.expr.index ){
        6 => 
            {
                var e3 = e.expr.args[2];
                var e2 = e.expr.args[1];
                var op2 = e.expr.args[0];
                if ( ($hget(this.opPriority.h,op.__s,null) <= $hget(this.opPriority.h,op2.__s,null)) && $not($hmem(this.opRightAssoc.h,op.__s,null)) ) {
                    var pmin = e1.pmin;
                    var pmax = e3.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EBinop(op2,this.makeBinop(op,e1,e2),e3),pmin,pmax);
                }
                else {
                    var pmin = e1.pmin;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EBinop(op,e1,e),pmin,pmax);
                }
            }

        22 => 
            {
                var e4 = e.expr.args[2];
                var e3 = e.expr.args[1];
                var e2 = e.expr.args[0];
                if ( $hmem(this.opRightAssoc.h,op.__s,null) ) {
                    var pmin = e1.pmin;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.EBinop(op,e1,e),pmin,pmax);
                }
                else {
                    var pmin = e1.pmin;
                    var pmax = e.pmax;
                    if ( pmin == null )
                        pmin = 0;
                    if ( pmax == null )
                        pmax = 0;
                    return hscript.Expr.new(hscript.ExprDef.ETernary(this.makeBinop(op,e1,e2),e3,e4),pmin,pmax);
                }
            }

        default => 
            {
                var pmin = e1.pmin;
                var pmax = e.pmax;
                if ( pmin == null )
                    pmin = 0;
                if ( pmax == null )
                    pmax = 0;
                return hscript.Expr.new(hscript.ExprDef.EBinop(op,e1,e),pmin,pmax);
            }

        }
        return null;
    }
    @tmp.line = null;
    @tmp.isBlock = function(e) {
        {
            var @tmp = ( e.expr.index );
            if (@tmp == 25) || (@tmp == 28)
                return true
            else
                if @tmp == 26
                    return true
                else
                    if (@tmp == 4) || (@tmp == 21)
                        return true
                    else
                        if @tmp == 14 {
                            var e1 = e.expr.args[1];
                            return this.isBlock(e1);
                        }
                        else
                            if @tmp == 2 {
                                var vs = e.expr.args[0];
                                switch ( e.expr.args[0].length ){
                                0 => 
                                    return false
                                default => 
                                    return (vs[0].expr != null) && this.isBlock(vs[0].expr)
                                }
                            }
                            else
                                if @tmp == 9 {
                                    var e2 = e.expr.args[2];
                                    var e1 = e.expr.args[1];
                                    if ( e2 != null )
                                        return this.isBlock(e2)
                                    else
                                        return this.isBlock(e1)
                                }
                                else
                                    if @tmp == 6 {
                                        var e1 = e.expr.args[2];
                                        return this.isBlock(e1);
                                    }
                                    else
                                        if @tmp == 7 {
                                            var e1 = e.expr.args[2];
                                            var prefix = e.expr.args[1];
                                            return $not(prefix) && this.isBlock(e1);
                                        }
                                        else
                                            if @tmp == 10 {
                                                var e1 = e.expr.args[1];
                                                return this.isBlock(e1);
                                            }
                                            else
                                                if @tmp == 11 {
                                                    var e1 = e.expr.args[2];
                                                    return this.isBlock(e1);
                                                }
                                                else
                                                    if @tmp == 15 {
                                                        var e1 = e.expr.args[0];
                                                        return (e1 != null) && this.isBlock(e1);
                                                    }
                                                    else
                                                        if @tmp == 23
                                                            return true
                                                        else
                                                            return false











        }
        return null;
    }
    @tmp.invalidChar = function(c) {
        this.error(hscript.Error.EInvalidChar(c),0,0);
        return null;
    }
    @tmp.input = null;
    @tmp.incPos = function() {
        return null;
    }
    @tmp.idents = null;
    @tmp.identChars = null;
    @tmp.error = function(err,pmin,pmax) {
        $throw(err);
        return null;
    }
    @tmp.ensure = function(tk) {
        var t = this.token();
        if ( t != tk )
            this.unexpected(t,null);
        return null;
    }
    @tmp.constString = function(c) {
        switch ( c.index ){
        0 => 
            {
                var v = c.args[0];
                return Std.string(v);
            }

        1 => 
            {
                var f = c.args[0];
                return Std.string(f);
            }

        2 => 
            {
                var s = c.args[0];
                return s;
            }

        }
        return null;
    }
    @tmp.char = null;
    @tmp.allowJSON = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    hscript.Parser = @tmp;
    @tmp.prototype = hscript.@Parser;
    @tmp.__construct__ = function() {
        this.line = 1;
        this.opChars = String.new("+*/-=!><&|^%~");
        this.identChars = String.new("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_");
        var priorities = Array.new1($array(Array.new1($array(String.new("%")),1),Array.new1($array(String.new("*"),String.new("/")),2),Array.new1($array(String.new("+"),String.new("-")),2),Array.new1($array(String.new("<<"),String.new(">>"),String.new(">>>")),3),Array.new1($array(String.new("|"),String.new("&"),String.new("^")),3),Array.new1($array(String.new("=="),String.new("!="),String.new(">"),String.new("<"),String.new(">="),String.new("<=")),6),Array.new1($array(String.new("...")),1),Array.new1($array(String.new("&&")),1),Array.new1($array(String.new("||")),1),Array.new1($array(String.new("="),String.new("+="),String.new("-="),String.new("*="),String.new("/="),String.new("%="),String.new("<<="),String.new(">>="),String.new(">>>="),String.new("|="),String.new("&="),String.new("^=")),12)),10);
        this.opPriority = haxe.ds.StringMap.new();
        this.opRightAssoc = haxe.ds.StringMap.new();
        this.unops = haxe.ds.StringMap.new();
        {
            var _g1 = 0;
            var _g = priorities.length;
            while ( _g1 < _g ) {
                var i = _g1 ++= 1;
                var _g2 = 0;
                var _g3 = priorities[i];
                while ( _g2 < _g3.length ) {
                    var x = _g3[_g2];
                    _g2 += 1;
                    $hset(this.opPriority.h,x.__s,i,null);
                    if ( i == 9 )
                        $hset(this.opRightAssoc.h,x.__s,true,null);
                }
            }
        }
        {
            var _g = 0;
            var _g1 = Array.new1($array(String.new("!"),String.new("++"),String.new("--"),String.new("-"),String.new("~")),5);
            while ( _g < _g1.length ) {
                var x = _g1[_g];
                _g += 1;
                $hset(this.unops.h,x.__s,(x == String.new("++")) || (x == String.new("--")),null);
            }
        }
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,hscript.@Parser);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    hscript.@Parser.__class__ = hscript.Parser;
}
{
    @G16 = $new(null);
    hscript.exec._Interp.Stop = @G16;
    @G16.prototype = {
        __enum__ => @G16, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G16.SReturn = function(v) {
        var @tmp = {
            tag => "SReturn", 
            index => 2, 
            args => $array(v)

        };
        $objsetproto(@tmp,@G16.prototype);
        @tmp;
    }
    @G16.SContinue = {
        var @tmp = {
            tag => "SContinue", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G16.prototype);
        @tmp;
    }
    @G16.SBreak = {
        var @tmp = {
            tag => "SBreak", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G16.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    hscript.exec.@Interp = @tmp;
    @tmp.whileLoop = function(econd,e) {
        var old = this.declared.length;
        while ( this.expr(econd) == true )
            try {
                this.expr(e);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if neko.Boot.__instanceof(@tmp,hscript.exec._Interp.Stop) {
                    var err = @tmp;
                    {
                        switch ( err.index ){
                        1 => 
                            {
                            }

                        0 => 
                            break;
                        2 => 
                            $throw(err)
                        }
                    }
                }
                else
                    $rethrow(@tmp)
            }

        this.restore(old);
        return null;
    }
    @tmp.variables = null;
    @tmp.usings = null;
    @tmp.set = function(o,f,v) {
        if ( o == null )
            $throw(hscript.Error.EInvalidAccess(f));
        if ( $typeof(o) == $tobject )
            $objset(o,$hash(f.__s),v);
        return v;
    }
    @tmp.restore = function(old) {
        while ( this.declared.length > old ) {
            var d = this.declared.pop();
            $hset(this.locals.h,d.n.__s,d.old,null);
        }
        return null;
    }
    @tmp.resolve = function(id) {
        var l = $hget(this.locals.h,id.__s,null);
        if ( l != null )
            return l.r;
        var v = $hget(this.variables.h,id.__s,null);
        if ( $hmem(this.variables.h,id.__s,null) )
            return v;
        var vthis = $hget(this.locals.h,String.new("this").__s,null);
        if ( (vthis != null) && (vthis.r.id != null) )
            return vthis.r.id;
        var c = Type.resolveClass(id);
        if ( c != null )
            return c;
        $throw(hscript.Error.EUnknownVariable(id));
        return null;
    }
    @tmp.makeIterator = function(v) {
        if ( (v.iterator != null) || Std.is(v,Array) )
            v = v.iterator();
        var c = Type.getClass(v);
        if ( (c == null) && ( (v.hasNext == null) || (v.next == null) ) )
            $throw(hscript.Error.EInvalidIterator(v));
        return v;
    }
    @tmp.locals = null;
    @tmp.initOps = function() {
        var _g1 = $array(this);
        var me = $array(this);
        {
            var _g = haxe.ds.StringMap.new();
            $hset(_g.h,String.new("+").__s,function(e1,e2) {
                return me[0].expr(e1) + me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("-").__s,function(e1,e2) {
                return me[0].expr(e1) - me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("*").__s,function(e1,e2) {
                return me[0].expr(e1) * me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("/").__s,function(e1,e2) {
                return me[0].expr(e1) / me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("%").__s,function(e1,e2) {
                return me[0].expr(e1) % me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("&").__s,function(e1,e2) {
                return me[0].expr(e1) & me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("|").__s,function(e1,e2) {
                return me[0].expr(e1) | me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("^").__s,function(e1,e2) {
                return me[0].expr(e1) ^ me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("<<").__s,function(e1,e2) {
                return me[0].expr(e1) << me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new(">>").__s,function(e1,e2) {
                return me[0].expr(e1) >> me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new(">>>").__s,function(e1,e2) {
                return me[0].expr(e1) >>> me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("==").__s,function(e1,e2) {
                return me[0].expr(e1) == me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("!=").__s,function(e1,e2) {
                return me[0].expr(e1) != me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new(">=").__s,function(e1,e2) {
                return me[0].expr(e1) >= me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("<=").__s,function(e1,e2) {
                return me[0].expr(e1) <= me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new(">").__s,function(e1,e2) {
                return me[0].expr(e1) > me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("<").__s,function(e1,e2) {
                return me[0].expr(e1) < me[0].expr(e2);
            }
            ,null);
            $hset(_g.h,String.new("||").__s,function(e1,e2) {
                return (me[0].expr(e1) == true) || (me[0].expr(e2) == true);
            }
            ,null);
            $hset(_g.h,String.new("&&").__s,function(e1,e2) {
                return (me[0].expr(e1) == true) && (me[0].expr(e2) == true);
            }
            ,null);
            $hset(_g.h,String.new("=").__s,{
                var @tmp = this, @fun = @tmp.assign;
                @closure2(@tmp,@fun);
            }
            ,null);
            $hset(_g.h,String.new("...").__s,function(e1,e2) {
                return IntIterator.new(me[0].expr(e1),me[0].expr(e2));
            }
            ,null);
            this.binops = _g;
        }
        $hset(this.binops.h,String.new("+=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("+="),function(v1,v2) {
                return v1 + v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("-=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("-="),function(v1,v2) {
                return v1 - v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("*=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("*="),function(v1,v2) {
                return v1 * v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("/=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("/="),function(v1,v2) {
                return v1 / v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("%=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("%="),function(v1,v2) {
                return v1 % v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("&=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("&="),function(v1,v2) {
                return v1 & v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("|=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("|="),function(v1,v2) {
                return v1 | v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("^=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("^="),function(v1,v2) {
                return v1 ^ v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new("<<=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new("<<="),function(v1,v2) {
                return v1 << v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new(">>=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new(">>="),function(v1,v2) {
                return v1 >> v2;
            }
            ,e1,e2);
        }
        ,null);
        $hset(this.binops.h,String.new(">>>=").__s,function(e1,e2) {
            return _g1[0].evalAssignOp(String.new(">>>="),function(v1,v2) {
                return v1 >>> v2;
            }
            ,e1,e2);
        }
        ,null);
        return null;
    }
    @tmp.increment = function(e,prefix,delta) {
        var d = e;
        switch ( d.expr.index ){
        1 => 
            {
                var id = d.expr.args[0];
                {
                    var l = $hget(this.locals.h,id.__s,null);
                    var v;
                    if ( l == null )
                        v = $hget(this.variables.h,id.__s,null)
                    else
                        v = l.r
                    if ( prefix ) {
                        v += delta;
                        if ( l == null ) {
                            var value = v;
                            {
                                var value1 = value;
                                $hset(this.variables.h,id.__s,value1,null);
                            }
                        }
                        else
                            l.r = v
                    }
                    else
                        if ( l == null ) {
                            var value = v + delta;
                            {
                                var value1 = value;
                                $hset(this.variables.h,id.__s,value1,null);
                            }
                        }
                        else
                            l.r = (v + delta)

                    return v;
                }
            }

        5 => 
            {
                var f = d.expr.args[1];
                var e1 = d.expr.args[0];
                {
                    var obj = this.expr(e1);
                    var v = this.get(obj,f);
                    if ( prefix ) {
                        v += delta;
                        this.set(obj,f,v);
                    }
                    else
                        this.set(obj,f,v + delta)
                    return v;
                }
            }

        16 => 
            {
                var index = d.expr.args[1];
                var e1 = d.expr.args[0];
                {
                    var arr = this.expr(e1);
                    var index1 = this.expr(index);
                    var v = arr[index1];
                    if ( prefix ) {
                        v += delta;
                        arr[index1] = v;
                    }
                    else
                        arr[index1] = (v + delta)
                    return v;
                }
            }

        default => 
            $throw(hscript.Error.EInvalidOp(if ( delta > 0 )
                String.new("++")
            else
                String.new("--")
            ))
        }
        return null;
    }
    @tmp.get = function(o,f) {
        haxe.Log.trace(Reflect.fields(o),{
            fileName => String.new("Interp.hx"), 
            lineNumber => 571, 
            className => String.new("hscript.exec.Interp"), 
            methodName => String.new("get")

        });
        var v;
        if ( o == null )
            $throw(hscript.Error.EInvalidAccess(f))
        else
            if ( (f == String.new("code")) && Std.is(o,String) )
                v = o.charCodeAt(0)
            else
                if ( Std.is(o,Enum) || (o.___ename__ != null) ) {
                    haxe.Log.trace(Type.resolveEnum(String.new("Option")),{
                        fileName => String.new("Interp.hx"), 
                        lineNumber => 575, 
                        className => String.new("hscript.exec.Interp"), 
                        methodName => String.new("get")

                    });
                    haxe.Log.trace(String.new("ENUM"),{
                        fileName => String.new("Interp.hx"), 
                        lineNumber => 576, 
                        className => String.new("hscript.exec.Interp"), 
                        methodName => String.new("get")

                    });
                    v = Type.createEnum(o,f,null);
                }
                else {
                    var v1 = if ( $typeof(o) != $tobject )
                        null
                    else
                        $objget(o,$fasthash(f.__s))
                    ;
                    if ( (v1 != null) && (v1 == hscript.exec.Property.Prop) )
                        v1 = this.fcall(o,String.new("get_") + f,Array.new1($array(),0));
                    v = v1;
                }


        return v;
    }
    @tmp.forLoop = function(n,it,e) {
        var old = this.declared.length;
        this.declared.push({
            n => n, 
            old => $hget(this.locals.h,n.__s,null)

        });
        var it1 = this.makeIterator(this.expr(it));
        if ( it1 == null )
            $throw(String.new("Iterator is null"));
        while ( it1.hasNext() ) {
            $hset(this.locals.h,n.__s,{
                r => it1.next()

            },null);
            try {
                this.expr(e);
            }
            catch @tmp {
                if $typeof(@tmp) == $tstring
                    @tmp = String.new(@tmp);
                if neko.Boot.__instanceof(@tmp,hscript.exec._Interp.Stop) {
                    var err = @tmp;
                    {
                        switch ( err.index ){
                        1 => 
                            {
                            }

                        0 => 
                            break;
                        2 => 
                            $throw(err)
                        }
                    }
                }
                else
                    $rethrow(@tmp)
            }
        }
        this.restore(old);
        return null;
    }
    @tmp.flags = null;
    @tmp.fcall = function(o,f,args) {
        return this.call(o,if ( $typeof(o) != $tobject )
            null
        else
            $objget(o,$fasthash(f.__s))
        ,args);
    }
    @tmp.exprReturn = function(e) {
        try {
            return this.expr(e);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if neko.Boot.__instanceof(@tmp,hscript.exec._Interp.Stop) {
                var e1 = @tmp;
                {
                    switch ( e1.index ){
                    0 => 
                        $throw(String.new("Invalid break"))
                    1 => 
                        $throw(String.new("Invalid continue"))
                    2 => 
                        {
                            var v = e1.args[0];
                            return v;
                        }

                    }
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.expr = function(e) {
        switch ( e.expr.index ){
        27 => 
            {
                var e1 = e.expr.args[0];
                {
                    var v = this.expr(e1);
                    {
                        var _g = 0;
                        var _g1 = Reflect.fields(v);
                        while ( _g < _g1.length ) {
                            var f = _g1[_g];
                            _g += 1;
                            var value = if ( $typeof(v) != $tobject )
                                null
                            else
                                $objget(v,$fasthash(f.__s))
                            ;
                            {
                                var value1 = value;
                                $hset(this.usings.h,f.__s,value1,null);
                            }
                        }
                    }
                }
            }

        26 => 
            {
                var args = e.expr.args[1];
                var n = e.expr.args[0];
                haxe.Log.trace(((String.new("") + n) + String.new(":")) + Std.string(args),{
                    fileName => String.new("Interp.hx"), 
                    lineNumber => 246, 
                    className => String.new("hscript.exec.Interp"), 
                    methodName => String.new("expr")

                });
            }

        25 => 
            {
                var c = e.expr.args[0];
                {
                    if ( (Type.resolveClass(c.name) != null) || $hmem(this.locals.h,c.name.__s,null) )
                        $throw((String.new("Class ") + c.name) + String.new(" is already defined"));
                    var protofield = String.new("prototype");
                    var o = $new(null);
                    var proto = $new(null);
                    if ( $typeof(o) == $tobject )
                        $objset(o,$hash(protofield.__s),proto);
                    {
                        var @tmp = c.fields.keys();
                        while @tmp.hasNext() {
                            var fn = @tmp.next();
                            {
                                var f = $hget(c.fields.h,fn.__s,null);
                                var isStatic = ( f.access & (1 << hscript.Access.Static.index) ) != 0;
                                {
                                    var o1;
                                    if ( isStatic )
                                        o1 = o
                                    else
                                        o1 = proto
                                    if ( $typeof(o1) == $tobject )
                                        $objset(o1,$hash(fn.__s),if ( f.expr == null )
                                            null
                                        else
                                            if ( $not(isStatic) && (( f.access & (1 << hscript.Access.Function.index) ) != 0) )
                                                hscript.exec.Interp.wrap(f.expr,this,c)
                                            else
                                                this.expr(f.expr)

                                        );
                                }
                            }
                        }
                    }
                    if ( $typeof(o) == $tobject )
                        $objset(o,$hash(String.new("__name__").__s),c.name.split(String.new(".")));
                    {
                        var o1 = neko.Boot.__classes;
                        if ( $typeof(o1) == $tobject )
                            $objset(o1,$hash(c.name.__s),o);
                    }
                    this.declared.push({
                        n => c.name, 
                        old => $hget(this.locals.h,c.name.__s,null)

                    });
                    $hset(this.locals.h,c.name.__s,{
                        r => o

                    },null);
                    if ( $hmem(c.fields.h,String.new("main").__s,null) && (( $hget(c.fields.h,String.new("main").__s,null).access & (1 << hscript.Access.Static.index) ) != 0) )
                        o.main();
                }
            }

        28 => 
            {
                var e1 = $array(e.expr.args[0]);
                {
                    var o = $new(null);
                    var proto = $new(null);
                    if ( $typeof(proto) == $tobject )
                        $objset(proto,$hash(String.new("__enum__").__s),o);
                    if ( $typeof(o) == $tobject )
                        $objset(o,$hash(String.new("prototype").__s),proto);
                    var i = $array(0);
                    {
                        var @tmp = e1[0].constructors.keys();
                        while @tmp.hasNext() {
                            var cn = $array(@tmp.next());
                            {
                                var c = $array($hget(e1[0].constructors.h,cn[0].__s,null));
                                if ( $typeof(o) == $tobject )
                                    $objset(o,$hash(cn[0].__s),Reflect.makeVarArgs(function(args) {
                                        if ( args.length != c[0].length )
                                            $throw(hscript.Error.EInvalidParameters(e1[0].name,args.length,c[0].length));
                                        var o1 = {
                                            tag => cn[0], 
                                            index => i[0], 
                                            args => args

                                        };
                                        $objsetproto(o1,if ( $typeof(o1) != $tobject )
                                            null
                                        else
                                            $objget(o1,$fasthash(String.new("prototype").__s))
                                        );
                                        return o1;
                                    }
                                    ));
                                i[0] ++= 1;
                            }
                        }
                    }
                    {
                        var value = o;
                        {
                            var value1 = value;
                            $hset(this.variables.h,e1[0].name.__s,value1,null);
                        }
                    }
                }
            }

        24 => 
            {
                var e1 = e.expr.args[0];
                this.expr(e1);
            }

        0 => 
            {
                var c = e.expr.args[0];
                switch ( c.index ){
                0 => 
                    {
                        var v = c.args[0];
                        return v;
                    }

                1 => 
                    {
                        var f = c.args[0];
                        return f;
                    }

                2 => 
                    {
                        var s = c.args[0];
                        return s;
                    }

                }
            }

        1 => 
            {
                var id = e.expr.args[0];
                return this.resolve(id);
            }

        2 => 
            {
                var vs = e.expr.args[0];
                {
                    {
                        var _g = 0;
                        while ( _g < vs.length ) {
                            var v = vs[_g];
                            _g += 1;
                            this.declared.push({
                                n => v.name, 
                                old => $hget(this.locals.h,v.name.__s,null)

                            });
                            $hset(this.locals.h,v.name.__s,{
                                r => if ( v.expr == null )
                                    null
                                else
                                    this.expr(v.expr)


                            },null);
                        }
                    }
                    return null;
                }
            }

        3 => 
            {
                var e1 = e.expr.args[0];
                return this.expr(e1);
            }

        4 => 
            {
                var exprs = e.expr.args[0];
                {
                    var old = this.declared.length;
                    var v = null;
                    {
                        var _g = 0;
                        while ( _g < exprs.length ) {
                            var e1 = exprs[_g];
                            _g += 1;
                            v = this.expr(e1);
                        }
                    }
                    this.restore(old);
                    return v;
                }
            }

        5 => 
            {
                var e1 = e.expr.args[0];
                switch ( e.expr.args[0].expr.index ){
                1 => 
                    {
                        var f = e.expr.args[1];
                        var ident = e.expr.args[0].expr.args[0];
                        if ( Type.resolveClass(((String.new("") + ident) + String.new(".")) + f) != null )
                            return this.resolve(((String.new("") + ident) + String.new(".")) + f)
                        else {
                            var f1 = e.expr.args[1];
                            return this.get(this.expr(e1),f1);
                        }
                    }

                default => 
                    {
                        var f1 = e.expr.args[1];
                        return this.get(this.expr(e1),f1);
                    }

                }
            }

        6 => 
            {
                var e2 = e.expr.args[2];
                var e1 = e.expr.args[1];
                var op = e.expr.args[0];
                {
                    var fop = $hget(this.binops.h,op.__s,null);
                    if ( fop == null )
                        $throw(hscript.Error.EInvalidOp(op));
                    return fop(e1,e2);
                }
            }

        7 => 
            {
                var e1 = e.expr.args[2];
                var prefix = e.expr.args[1];
                var op = e.expr.args[0];
                switch ( op ){
                String.new("!") => 
                    return this.expr(e1) != true
                String.new("-") => 
                    return 0 - this.expr(e1)
                String.new("++") => 
                    return this.increment(e1,prefix,1)
                String.new("--") => 
                    return this.increment(e1,prefix,-1)
                String.new("~") => 
                    return -1 - this.expr(e1)
                default => 
                    $throw(hscript.Error.EInvalidOp(op))
                }
            }

        8 => 
            {
                var e1 = e.expr.args[0];
                switch ( e.expr.args[0].expr.index ){
                5 => 
                    {
                        var ps = e.expr.args[1];
                        var f = e.expr.args[0].expr.args[1];
                        var e2 = e.expr.args[0].expr.args[0];
                        if ( $hmem(this.usings.h,f.__s,null) )
                            return this.call(null,$hget(this.usings.h,f.__s,null),Array.new1($array(this.expr(e2)),1).concat(ps.map({
                                var @tmp = this, @fun = @tmp.expr;
                                @closure1(@tmp,@fun);
                            }
                            )))
                        else {
                            var params = e.expr.args[1];
                            {
                                var args = Array.new();
                                {
                                    var _g = 0;
                                    while ( _g < params.length ) {
                                        var p = params[_g];
                                        _g += 1;
                                        args.push(this.expr(p));
                                    }
                                }
                                switch ( e1.expr.index ){
                                5 => 
                                    {
                                        var f1 = e1.expr.args[1];
                                        var e3 = e1.expr.args[0];
                                        {
                                            var obj = this.expr(e3);
                                            if ( obj == null )
                                                $throw(hscript.Error.EInvalidAccess(f1));
                                            return this.fcall(obj,f1,args);
                                        }
                                    }

                                default => 
                                    return this.call(null,this.expr(e1),args)
                                }
                            }
                        }
                    }

                default => 
                    {
                        var params = e.expr.args[1];
                        {
                            var args = Array.new();
                            {
                                var _g = 0;
                                while ( _g < params.length ) {
                                    var p = params[_g];
                                    _g += 1;
                                    args.push(this.expr(p));
                                }
                            }
                            switch ( e1.expr.index ){
                            5 => 
                                {
                                    var f1 = e1.expr.args[1];
                                    var e3 = e1.expr.args[0];
                                    {
                                        var obj = this.expr(e3);
                                        if ( obj == null )
                                            $throw(hscript.Error.EInvalidAccess(f1));
                                        return this.fcall(obj,f1,args);
                                    }
                                }

                            default => 
                                return this.call(null,this.expr(e1),args)
                            }
                        }
                    }

                }
            }

        18 => 
            {
                var params = e.expr.args[1];
                var cl = e.expr.args[0];
                return Type.createInstance(this.resolve(cl),params.map({
                    var @tmp = this, @fun = @tmp.expr;
                    @closure1(@tmp,@fun);
                }
                ));
            }

        9 => 
            {
                var e2 = e.expr.args[2];
                var e1 = e.expr.args[1];
                var econd = e.expr.args[0];
                if ( this.expr(econd) == true )
                    return this.expr(e1)
                else
                    if ( e2 == null )
                        return null
                    else
                        return this.expr(e2)

            }

        10 => 
            {
                var e1 = e.expr.args[1];
                var econd = e.expr.args[0];
                {
                    this.whileLoop(econd,e1);
                    return null;
                }
            }

        11 => 
            {
                var e1 = e.expr.args[2];
                var it = e.expr.args[1];
                var v = e.expr.args[0];
                {
                    this.forLoop(v,it,e1);
                    return null;
                }
            }

        12 => 
            $throw(hscript.exec._Interp.Stop.SBreak)
        13 => 
            $throw(hscript.exec._Interp.Stop.SContinue)
        15 => 
            {
                var e1 = e.expr.args[0];
                $throw(hscript.exec._Interp.Stop.SReturn(if ( e1 == null )
                    null
                else
                    this.expr(e1)
                ));
            }

        14 => 
            {
                var name = $array(e.expr.args[2]);
                var fexpr = $array(e.expr.args[1]);
                var params = $array(e.expr.args[0]);
                {
                    var capturedLocals = $array(this.duplicate(this.locals));
                    var me = $array(this);
                    var f = function(args) {
                        if ( args.length != params[0].length )
                            $throw(hscript.Error.EInvalidParameters(name[0],args.length,params[0].length));
                        var old = me[0].locals;
                        me[0].locals = me[0].duplicate(capturedLocals[0]);
                        {
                            var _g1 = 0;
                            var _g = params[0].length;
                            while ( _g1 < _g ) {
                                var i = _g1 ++= 1;
                                $hset(me[0].locals.h,params[0][i].name.__s,{
                                    r => args[i]

                                },null);
                            }
                        }
                        var r = null;
                        try {
                            r = me[0].exprReturn(fexpr[0]);
                        }
                        catch @tmp {
                            if $typeof(@tmp) == $tstring
                                @tmp = String.new(@tmp);
                            if true {
                                var e1 = @tmp;
                                {
                                    me[0].locals = old;
                                    neko.Lib.rethrow(e1);
                                }
                            }
                            else
                                $rethrow(@tmp)
                        }
                        me[0].locals = old;
                        return r;
                    }
                    ;
                    var f1 = Reflect.makeVarArgs(f);
                    if ( name[0] != null )
                        $hset(this.variables.h,name[0].__s,f1,null);
                    return f1;
                }
            }

        17 => 
            {
                var map = e.expr.args[0];
                var arr = e.expr.args[0];
                switch ( e.expr.args[0].length ){
                1 => 
                    switch ( e.expr.args[0][0].expr.index ){
                    10 => 
                        {
                            var ex = e.expr.args[0][0].expr.args[1];
                            var cond = e.expr.args[0][0].expr.args[0];
                            {
                                switch ( ex.expr.index ){
                                6 => 
                                    switch ( ex.expr.args[0] ){
                                    String.new("=>") => 
                                        {
                                            var evalue = ex.expr.args[2];
                                            var ekey = ex.expr.args[1];
                                            {
                                                var m = haxe.ds.BalancedTree.new();
                                                while ( this.expr(cond) ) {
                                                    var key = this.expr(ekey);
                                                    var val = this.expr(evalue);
                                                    m.set(key,val);
                                                }
                                                return m;
                                            }
                                        }

                                    default => 
                                        {
                                        }

                                    }

                                default => 
                                    {
                                    }

                                }
                                {
                                    var _g = Array.new1($array(),0);
                                    while ( this.expr(cond) )
                                        _g.push(this.expr(ex))
                                    return _g;
                                }
                            }
                        }

                    11 => 
                        {
                            var e1 = e.expr.args[0][0].expr.args[2];
                            var it = e.expr.args[0][0].expr.args[1];
                            var v = e.expr.args[0][0].expr.args[0];
                            {
                                switch ( e1.expr.index ){
                                6 => 
                                    switch ( e1.expr.args[0] ){
                                    String.new("=>") => 
                                        {
                                            var evalue = e1.expr.args[2];
                                            var ekey = e1.expr.args[1];
                                            {
                                                var m = haxe.ds.BalancedTree.new();
                                                this.declared.push({
                                                    n => v, 
                                                    old => $hget(this.locals.h,v.__s,null)

                                                });
                                                {
                                                    var @tmp = this.makeIterator(this.expr(it));
                                                    while @tmp.hasNext() {
                                                        var i = @tmp.next();
                                                        {
                                                            $hset(this.locals.h,v.__s,{
                                                                r => i

                                                            },null);
                                                            var key = this.expr(ekey);
                                                            var val = this.expr(evalue);
                                                            m.set(key,val);
                                                        }
                                                    }
                                                }
                                                return m;
                                            }
                                        }

                                    default => 
                                        {
                                        }

                                    }

                                default => 
                                    {
                                    }

                                }
                                {
                                    var _g = Array.new1($array(),0);
                                    {
                                        var @tmp = this.makeIterator(this.expr(it));
                                        while @tmp.hasNext() {
                                            var i = @tmp.next();
                                            _g.push({
                                                $hset(this.locals.h,v.__s,{
                                                    r => i

                                                },null);
                                                this.expr(e1);
                                            }
                                            );
                                        }
                                    }
                                    return _g;
                                }
                            }
                        }

                    default => 
                        if ( (map.length > 0) && {
                            var _g = map[0];
                            switch ( _g.expr.index ){
                            6 => 
                                switch ( _g.expr.args[0] ){
                                String.new("=>") => 
                                    true
                                default => 
                                    false
                                }

                            default => 
                                false
                            }
                        }
                         ) {
                            var m = haxe.ds.BalancedTree.new();
                            {
                                var _g = 0;
                                while ( _g < map.length ) {
                                    var item = map[_g];
                                    _g += 1;
                                    switch ( item.expr.index ){
                                    6 => 
                                        switch ( item.expr.args[0] ){
                                        String.new("=>") => 
                                            {
                                                var b = item.expr.args[2];
                                                var a = item.expr.args[1];
                                                {
                                                    var k = this.expr(a);
                                                    m.set(k,this.expr(b));
                                                }
                                            }

                                        default => 
                                            {
                                            }

                                        }

                                    default => 
                                        {
                                        }

                                    }
                                }
                            }
                            return m;
                        }
                        else {
                            var a = Array.new();
                            {
                                var _g = 0;
                                while ( _g < arr.length ) {
                                    var e1 = arr[_g];
                                    _g += 1;
                                    a.push(this.expr(e1));
                                }
                            }
                            return a;
                        }

                    }

                default => 
                    if ( (map.length > 0) && {
                        var _g = map[0];
                        switch ( _g.expr.index ){
                        6 => 
                            switch ( _g.expr.args[0] ){
                            String.new("=>") => 
                                true
                            default => 
                                false
                            }

                        default => 
                            false
                        }
                    }
                     ) {
                        var m = haxe.ds.BalancedTree.new();
                        {
                            var _g = 0;
                            while ( _g < map.length ) {
                                var item = map[_g];
                                _g += 1;
                                switch ( item.expr.index ){
                                6 => 
                                    switch ( item.expr.args[0] ){
                                    String.new("=>") => 
                                        {
                                            var b = item.expr.args[2];
                                            var a = item.expr.args[1];
                                            {
                                                var k = this.expr(a);
                                                m.set(k,this.expr(b));
                                            }
                                        }

                                    default => 
                                        {
                                        }

                                    }

                                default => 
                                    {
                                    }

                                }
                            }
                        }
                        return m;
                    }
                    else {
                        var a = Array.new();
                        {
                            var _g = 0;
                            while ( _g < arr.length ) {
                                var e1 = arr[_g];
                                _g += 1;
                                a.push(this.expr(e1));
                            }
                        }
                        return a;
                    }

                }
            }

        16 => 
            {
                var index = e.expr.args[1];
                var e1 = e.expr.args[0];
                return this.expr(e1)[this.expr(index)];
            }

        19 => 
            {
                var e1 = e.expr.args[0];
                $throw(this.expr(e1));
            }

        20 => 
            {
                var ecatch = e.expr.args[3];
                var n = e.expr.args[1];
                var e1 = e.expr.args[0];
                {
                    var old = this.declared.length;
                    try {
                        var v = this.expr(e1);
                        this.restore(old);
                        return v;
                    }
                    catch @tmp {
                        if $typeof(@tmp) == $tstring
                            @tmp = String.new(@tmp);
                        if neko.Boot.__instanceof(@tmp,hscript.exec._Interp.Stop) {
                            var err = @tmp;
                            {
                                $throw(err);
                            }
                        }
                        else
                            if true {
                                var err = @tmp;
                                {
                                    this.restore(old);
                                    this.declared.push({
                                        n => n, 
                                        old => $hget(this.locals.h,n.__s,null)

                                    });
                                    $hset(this.locals.h,n.__s,{
                                        r => err

                                    },null);
                                    var v = this.expr(ecatch);
                                    this.restore(old);
                                    return v;
                                }
                            }
                            else
                                $rethrow(@tmp)

                    }
                }
            }

        21 => 
            {
                var fl = e.expr.args[0];
                {
                    var o = $new(null);
                    {
                        var _g = 0;
                        while ( _g < fl.length ) {
                            var f = fl[_g];
                            _g += 1;
                            this.set(o,f.name,this.expr(f.e));
                        }
                    }
                    return o;
                }
            }

        22 => 
            {
                var e2 = e.expr.args[2];
                var e1 = e.expr.args[1];
                var econd = e.expr.args[0];
                if ( this.expr(econd) == true )
                    return this.expr(e1)
                else
                    return this.expr(e2)
            }

        23 => 
            {
                var edef = e.expr.args[2];
                var cases = e.expr.args[1];
                var ev = e.expr.args[0];
                {
                    var old = this.declared.length;
                    var def;
                    if ( edef == null )
                        def = null
                    else
                        def = this.expr(edef)
                    var val = this.expr(ev);
                    this.declared.push({
                        n => String.new("all"), 
                        old => $hget(this.locals.h,String.new("all").__s,null)

                    });
                    $hset(this.locals.h,String.new("all").__s,{
                        r => val

                    },null);
                    var retv = null;
                    {
                        var _g = 0;
                        while ( _g < cases.length ) {
                            var c = cases[_g];
                            _g += 1;
                            var matched = false;
                            {
                                var _g1 = 0;
                                var _g2 = c.values;
                                while ( _g1 < _g2.length ) {
                                    var v = _g2[_g1];
                                    _g1 += 1;
                                    switch ( v.expr.index ){
                                    1 => 
                                        {
                                            var @tmp = ( v.expr.args[0] );
                                            if (@tmp == String.new("all")) || (@tmp == String.new("_"))
                                                matched = true
                                            else
                                                if ( this.expr(v) == val ) {
                                                    matched = true;
                                                    break;;
                                                }

                                        }

                                    default => 
                                        if ( this.expr(v) == val ) {
                                            matched = true;
                                            break;;
                                        }

                                    }
                                }
                            }
                            if ( c.guard != null )
                                matched = (matched && this.expr(c.guard));
                            if ( matched ) {
                                retv = this.expr(c.expr);
                                break;;
                            }
                        }
                    }
                    if ( (edef != null) && (retv == null) )
                        retv = this.expr(edef);
                    this.restore(old);
                    return retv;
                }
            }

        }
        return null;
    }
    @tmp.execute = function(expr) {
        this.locals = haxe.ds.StringMap.new();
        return this.expr(expr);
    }
    @tmp.evalAssignOp = function(op,fop,e1,e2) {
        var v;
        switch ( e1.expr.index ){
        1 => 
            {
                var id = e1.expr.args[0];
                {
                    var l = $hget(this.locals.h,id.__s,null);
                    v = fop(e1,e2);
                    if ( l == null )
                        $hset(this.variables.h,id.__s,v,null)
                    else
                        l.r = v
                }
            }

        5 => 
            {
                var f = e1.expr.args[1];
                var e = e1.expr.args[0];
                {
                    var obj = this.expr(e);
                    v = fop(this.get(obj,f),this.expr(e2));
                    v = this.set(obj,f,v);
                }
            }

        16 => 
            {
                var index = e1.expr.args[1];
                var e = e1.expr.args[0];
                {
                    var arr = this.expr(e);
                    var index1 = this.expr(index);
                    v = fop(arr[index1],this.expr(e2));
                    arr[index1] = v;
                }
            }

        default => 
            $throw(hscript.Error.EInvalidOp(op))
        }
        return v;
    }
    @tmp.duplicate = function(h) {
        var h2 = haxe.ds.StringMap.new();
        {
            var @tmp = h.keys();
            while @tmp.hasNext() {
                var k = @tmp.next();
                $hset(h2.h,k.__s,$hget(h.h,k.__s,null),null);
            }
        }
        return h2;
    }
    @tmp.declared = null;
    @tmp.call = function(o,f,args) {
        return $call(f,o,args.__neko());
    }
    @tmp.binops = null;
    @tmp.assign = function(e1,e2) {
        var v = this.expr(e2);
        switch ( e1.expr.index ){
        1 => 
            {
                var id = e1.expr.args[0];
                {
                    var l = $hget(this.locals.h,id.__s,null);
                    if ( $hmem(this.locals.h,String.new("this").__s,null) && Reflect.hasField($hget(this.locals.h,String.new("this").__s,null).r,id) ) {
                        var o = $hget(this.locals.h,String.new("this").__s,null).r;
                        if ( $typeof(o) == $tobject )
                            $objset(o,$hash(id.__s),v);
                    }
                    else
                        if ( l == null )
                            $hset(this.variables.h,id.__s,v,null)
                        else
                            l.r = v

                }
            }

        5 => 
            {
                var f = e1.expr.args[1];
                var e = e1.expr.args[0];
                v = this.set(this.expr(e),f,v);
            }

        16 => 
            {
                var index = e1.expr.args[1];
                var e = e1.expr.args[0];
                this.expr(e)[this.expr(index)] = v;
            }

        default => 
            $throw(hscript.Error.EInvalidOp(String.new("=")))
        }
        return v;
    }
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    hscript.exec.Interp = @tmp;
    @tmp.prototype = hscript.exec.@Interp;
    @tmp.wrap = function(e,i,c) {
        i = $array(i);
        c = $array(c);
        {
            return Reflect.makeVarArgs(function(args) {
                i[0].declared.push({
                    n => String.new("this"), 
                    old => $hget(i[0].locals.h,String.new("this").__s,null)

                });
                $hset(i[0].locals.h,String.new("this").__s,{
                    r => __js__(String.new("this"))

                },null);
                $call(i[0].expr(c[0].constructor.expr),null,args.__neko());
                return null;
            }
            );
        }
    }
    @tmp.__construct__ = function() {
        this.locals = haxe.ds.StringMap.new();
        {
            var _g = haxe.ds.StringMap.new();
            $hset(_g.h,String.new("null").__s,null,null);
            $hset(_g.h,String.new("true").__s,true,null);
            $hset(_g.h,String.new("false").__s,false,null);
            $hset(_g.h,String.new("trace").__s,function(e) {
                haxe.Log.trace(Std.string(e),{
                    fileName => String.new("hscript"), 
                    lineNumber => 0

                });
                return null;
            }
            ,null);
            this.variables = _g;
        }
        this.usings = haxe.ds.StringMap.new();
        this.declared = Array.new();
        this.flags = Array.new1($array(String.new("sys"),String.new("dce")),2);
        this.initOps();
        return null;
    }
    @tmp.new = function() {
        var @o = $new(null);
        $objsetproto(@o,hscript.exec.@Interp);
        $call(this.__construct__,@o,$array());
        return @o;
    }
    hscript.exec.@Interp.__class__ = hscript.exec.Interp;
}
{
    @G17 = $new(null);
    hscript.exec.Property = @G17;
    @G17.prototype = {
        __enum__ => @G17, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G17.Prop = {
        var @tmp = {
            tag => "Prop", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G17.prototype);
        @tmp;
    }
}
{
    var @tmp = $new(null);
    neko.@NativeArray = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.NativeArray = @tmp;
    @tmp.prototype = neko.@NativeArray;
    @tmp.toArray = function(a) {
        return Array.new1(a,$asize(a));
    }
    @tmp.sub = function(a,pos,len) {
        return $asub(a,pos,len);
    }
    @tmp.ofArrayRef = function(a) {
        return a.__a;
    }
    @tmp.ofArrayCopy = function(a) {
        return a.__neko();
    }
    @tmp.length = function(a) {
        return $asize(a);
    }
    @tmp.blit = function(dst,dstPos,src,srcPos,length) {
        $ablit(dst,dstPos,src,srcPos,length);
        return null;
    }
    @tmp.alloc = function(length) {
        return $amake(length);
    }
    neko.@NativeArray.__class__ = neko.NativeArray;
}
{
    var @tmp = $new(null);
    neko.@NativeString = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    neko.NativeString = @tmp;
    @tmp.prototype = neko.@NativeString;
    @tmp.toString = function(s) {
        return String.new(s);
    }
    @tmp.ofString = function(s) {
        return s.__s;
    }
    @tmp.length = function(s) {
        return $ssize(s);
    }
    neko.@NativeString.__class__ = neko.NativeString;
}
{
    @G18 = $new(null);
    sys.io.FileHandle = @G18;
    @G18.prototype = {
        __enum__ => @G18, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
}
{
    var @tmp = $new(null);
    sys.io.@File = @tmp;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    sys.io.File = @tmp;
    @tmp.prototype = sys.io.@File;
    @tmp.write = function(path,binary) {
        if ( binary == null )
            binary = true;
        {
            return sys.io.FileOutput.new(sys.io.File.file_open(path.__s,( if ( binary )
                String.new("wb")
            else
                String.new("w")
             ).__s));
        }
    }
    @tmp.saveContent = function(path,content) {
        var f = sys.io.File.write(path,null);
        f.writeString(content);
        f.close();
        return null;
    }
    @tmp.saveBytes = function(path,bytes) {
        var f = sys.io.File.write(path,null);
        f.write(bytes);
        f.close();
        return null;
    }
    @tmp.read = function(path,binary) {
        if ( binary == null )
            binary = true;
        {
            return sys.io.FileInput.new(sys.io.File.file_open(path.__s,( if ( binary )
                String.new("rb")
            else
                String.new("r")
             ).__s));
        }
    }
    @tmp.getContent = function(path) {
        return String.new(sys.io.File.file_contents(path.__s));
    }
    @tmp.getBytes = function(path) {
        var s = sys.io.File.getContent(path);
        return haxe.io.Bytes.new(s.length,s.__s);
    }
    @tmp.file_open = $loader.loadprim(("std" + "@") + "file_open",2);
    @tmp.file_contents = $loader.loadprim(("std" + "@") + "file_contents",1);
    @tmp.copy = function(srcPath,dstPath) {
        var s = sys.io.File.read(srcPath,true);
        var d = sys.io.File.write(dstPath,true);
        d.writeInput(s,null);
        s.close();
        d.close();
        return null;
    }
    @tmp.append = function(path,binary) {
        if ( binary == null )
            binary = true;
        {
            return sys.io.FileOutput.new(sys.io.File.file_open(path.__s,( if ( binary )
                String.new("ab")
            else
                String.new("a")
             ).__s));
        }
    }
    sys.io.@File.__class__ = sys.io.File;
}
{
    var @tmp = $new(null);
    sys.io.@FileInput = @tmp;
    @tmp.tell = function() {
        return sys.io.FileInput.file_tell(this.__f);
    }
    @tmp.seek = function(p,pos) {
        sys.io.FileInput.file_seek(this.__f,p,switch ( pos.index ){
        0 => 
            0
        1 => 
            1
        2 => 
            2
        }
        );
        return null;
    }
    @tmp.readBytes = function(s,p,l) {
        try {
            return sys.io.FileInput.file_read(this.__f,s.b,p,l);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    if ( $typeof(e) == $tarray )
                        $throw(haxe.io.Eof.new())
                    else
                        $throw(haxe.io.Error.Custom(e))
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.readByte = function() {
        try {
            return sys.io.FileInput.file_read_char(this.__f);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    if ( $typeof(e) == $tarray )
                        $throw(haxe.io.Eof.new())
                    else
                        $throw(haxe.io.Error.Custom(e))
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.eof = function() {
        return sys.io.FileInput.file_eof(this.__f);
    }
    @tmp.close = function() {
        $call(haxe.io.@Input.close,this,$array());
        sys.io.FileInput.file_close(this.__f);
        return null;
    }
    @tmp.__f = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    sys.io.FileInput = @tmp;
    @tmp.prototype = sys.io.@FileInput;
    @tmp.file_tell = $loader.loadprim(("std" + "@") + "file_tell",1);
    @tmp.file_seek = $loader.loadprim(("std" + "@") + "file_seek",3);
    @tmp.file_read_char = $loader.loadprim(("std" + "@") + "file_read_char",1);
    @tmp.file_read = $loader.loadprim(("std" + "@") + "file_read",4);
    @tmp.file_eof = $loader.loadprim(("std" + "@") + "file_eof",1);
    @tmp.file_close = $loader.loadprim(("std" + "@") + "file_close",1);
    @tmp.__construct__ = function(f) {
        this.__f = f;
        return null;
    }
    @tmp.new = function(f) {
        var @o = $new(null);
        $objsetproto(@o,sys.io.@FileInput);
        $call(this.__construct__,@o,$array(f));
        return @o;
    }
    @tmp.__super__ = haxe.io.Input;
    $objsetproto(sys.io.@FileInput,haxe.io.@Input);
    sys.io.@FileInput.__class__ = sys.io.FileInput;
}
{
    var @tmp = $new(null);
    sys.io.@FileOutput = @tmp;
    @tmp.writeBytes = function(s,p,l) {
        try {
            return sys.io.FileOutput.file_write(this.__f,s.b,p,l);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.Custom(e));
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.writeByte = function(c) {
        try {
            sys.io.FileOutput.file_write_char(this.__f,c);
        }
        catch @tmp {
            if $typeof(@tmp) == $tstring
                @tmp = String.new(@tmp);
            if true {
                var e = @tmp;
                {
                    $throw(haxe.io.Error.Custom(e));
                }
            }
            else
                $rethrow(@tmp)
        }
        return null;
    }
    @tmp.tell = function() {
        return sys.io.FileOutput.file_tell(this.__f);
    }
    @tmp.seek = function(p,pos) {
        sys.io.FileOutput.file_seek(this.__f,p,switch ( pos.index ){
        0 => 
            0
        1 => 
            1
        2 => 
            2
        }
        );
        return null;
    }
    @tmp.flush = function() {
        sys.io.FileOutput.file_flush(this.__f);
        return null;
    }
    @tmp.close = function() {
        $call(haxe.io.@Output.close,this,$array());
        sys.io.FileOutput.file_close(this.__f);
        return null;
    }
    @tmp.__f = null;
    @tmp.__serialize = @serialize;
    var @tmp = $new(null);
    sys.io.FileOutput = @tmp;
    @tmp.prototype = sys.io.@FileOutput;
    @tmp.file_write_char = $loader.loadprim(("std" + "@") + "file_write_char",2);
    @tmp.file_write = $loader.loadprim(("std" + "@") + "file_write",4);
    @tmp.file_tell = $loader.loadprim(("std" + "@") + "file_tell",1);
    @tmp.file_seek = $loader.loadprim(("std" + "@") + "file_seek",3);
    @tmp.file_flush = $loader.loadprim(("std" + "@") + "file_flush",1);
    @tmp.file_close = $loader.loadprim(("std" + "@") + "file_close",1);
    @tmp.__construct__ = function(f) {
        this.__f = f;
        return null;
    }
    @tmp.new = function(f) {
        var @o = $new(null);
        $objsetproto(@o,sys.io.@FileOutput);
        $call(this.__construct__,@o,$array(f));
        return @o;
    }
    @tmp.__super__ = haxe.io.Output;
    $objsetproto(sys.io.@FileOutput,haxe.io.@Output);
    sys.io.@FileOutput.__class__ = sys.io.FileOutput;
}
{
    @G19 = $new(null);
    sys.io.FileSeek = @G19;
    @G19.prototype = {
        __enum__ => @G19, 
        __serialize => @serialize, 
        __string => @enum_to_string

    };
    @G19.SeekEnd = {
        var @tmp = {
            tag => "SeekEnd", 
            index => 2, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G19.prototype);
        @tmp;
    }
    @G19.SeekCur = {
        var @tmp = {
            tag => "SeekCur", 
            index => 1, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G19.prototype);
        @tmp;
    }
    @G19.SeekBegin = {
        var @tmp = {
            tag => "SeekBegin", 
            index => 0, 
            __serialize => @tag_serialize

        };
        $objsetproto(@tmp,@G19.prototype);
        @tmp;
    }
}
{
    neko.Boot.__classes = @classes;
    neko.Boot.__init();
}
sys.io.FileSeek.__ename__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileSeek")),3);
sys.io.FileSeek.__constructs__ = Array.new1($array(String.new("SeekBegin"),String.new("SeekCur"),String.new("SeekEnd")),3);
sys.io.FileOutput.__name__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileOutput")),3);
sys.io.FileInput.__name__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileInput")),3);
sys.io.File.__name__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("File")),3);
sys.io.FileHandle.__ename__ = Array.new1($array(String.new("sys"),String.new("io"),String.new("FileHandle")),3);
sys.io.FileHandle.__constructs__ = Array.new1($array(),0);
neko.NativeString.__name__ = Array.new1($array(String.new("neko"),String.new("NativeString")),2);
neko.NativeArray.__name__ = Array.new1($array(String.new("neko"),String.new("NativeArray")),2);
hscript.exec.Property.__ename__ = Array.new1($array(String.new("hscript"),String.new("exec"),String.new("Property")),3);
hscript.exec.Property.__constructs__ = Array.new1($array(String.new("Prop")),1);
hscript.exec.Interp.__name__ = Array.new1($array(String.new("hscript"),String.new("exec"),String.new("Interp")),3);
hscript.exec._Interp.Stop.__ename__ = Array.new1($array(String.new("hscript"),String.new("exec"),String.new("_Interp"),String.new("Stop")),4);
hscript.exec._Interp.Stop.__constructs__ = Array.new1($array(String.new("SBreak"),String.new("SContinue"),String.new("SReturn")),3);
hscript.Parser.__name__ = Array.new1($array(String.new("hscript"),String.new("Parser")),2);
hscript.Token.__ename__ = Array.new1($array(String.new("hscript"),String.new("Token")),2);
hscript.Token.__constructs__ = Array.new1($array(String.new("TEof"),String.new("TConst"),String.new("TId"),String.new("TOp"),String.new("TPOpen"),String.new("TPClose"),String.new("TBrOpen"),String.new("TBrClose"),String.new("TDot"),String.new("TComma"),String.new("TSemicolon"),String.new("TBkOpen"),String.new("TBkClose"),String.new("TQuestion"),String.new("TDoubleDot"),String.new("THash"),String.new("TInterp")),17);
hscript.Expr.__name__ = Array.new1($array(String.new("hscript"),String.new("Expr")),2);
hscript.Error.__ename__ = Array.new1($array(String.new("hscript"),String.new("Error")),2);
hscript.Error.__constructs__ = Array.new1($array(String.new("EInvalidChar"),String.new("EUnexpected"),String.new("EUnterminatedString"),String.new("EUnterminatedComment"),String.new("EUnknownVariable"),String.new("EInvalidIterator"),String.new("EInvalidOp"),String.new("EInvalidAccess"),String.new("EInvalidFunction"),String.new("EInvalidParameters"),String.new("ENoConstructor")),11);
hscript.CType.__ename__ = Array.new1($array(String.new("hscript"),String.new("CType")),2);
hscript.CType.__constructs__ = Array.new1($array(String.new("CTPath"),String.new("CTFun"),String.new("CTAnon"),String.new("CTParent")),4);
hscript.ExprDef.__ename__ = Array.new1($array(String.new("hscript"),String.new("ExprDef")),2);
hscript.ExprDef.__constructs__ = Array.new1($array(String.new("EConst"),String.new("EIdent"),String.new("EVars"),String.new("EParent"),String.new("EBlock"),String.new("EField"),String.new("EBinop"),String.new("EUnop"),String.new("ECall"),String.new("EIf"),String.new("EWhile"),String.new("EFor"),String.new("EBreak"),String.new("EContinue"),String.new("EFunction"),String.new("EReturn"),String.new("EArray"),String.new("EArrayDecl"),String.new("ENew"),String.new("EThrow"),String.new("ETry"),String.new("EObject"),String.new("ETernary"),String.new("ESwitch"),String.new("EUntyped"),String.new("EClassDecl"),String.new("EMacro"),String.new("EUsing"),String.new("EEnumDecl")),29);
hscript.Access.__ename__ = Array.new1($array(String.new("hscript"),String.new("Access")),2);
hscript.Access.__constructs__ = Array.new1($array(String.new("Public"),String.new("Private"),String.new("Static"),String.new("Function"),String.new("HasGetter"),String.new("HasSetter")),6);
hscript.Const.__ename__ = Array.new1($array(String.new("hscript"),String.new("Const")),2);
hscript.Const.__constructs__ = Array.new1($array(String.new("CInt"),String.new("CFloat"),String.new("CString")),3);
haxe.macro.Error.__name__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("Error")),3);
haxe.macro.TypeDefKind.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("TypeDefKind")),3);
haxe.macro.TypeDefKind.__constructs__ = Array.new1($array(String.new("TDEnum"),String.new("TDStructure"),String.new("TDClass"),String.new("TDAlias"),String.new("TDAbstract")),5);
haxe.macro.FieldType.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("FieldType")),3);
haxe.macro.FieldType.__constructs__ = Array.new1($array(String.new("FVar"),String.new("FFun"),String.new("FProp")),3);
haxe.macro.Access.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("Access")),3);
haxe.macro.Access.__constructs__ = Array.new1($array(String.new("APublic"),String.new("APrivate"),String.new("AStatic"),String.new("AOverride"),String.new("ADynamic"),String.new("AInline"),String.new("AMacro")),7);
haxe.macro.TypeParam.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("TypeParam")),3);
haxe.macro.TypeParam.__constructs__ = Array.new1($array(String.new("TPType"),String.new("TPExpr")),2);
haxe.macro.ComplexType.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("ComplexType")),3);
haxe.macro.ComplexType.__constructs__ = Array.new1($array(String.new("TPath"),String.new("TFunction"),String.new("TAnonymous"),String.new("TParent"),String.new("TExtend"),String.new("TOptional")),6);
haxe.macro.ExprDef.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("ExprDef")),3);
haxe.macro.ExprDef.__constructs__ = Array.new1($array(String.new("EConst"),String.new("EArray"),String.new("EBinop"),String.new("EField"),String.new("EParenthesis"),String.new("EObjectDecl"),String.new("EArrayDecl"),String.new("ECall"),String.new("ENew"),String.new("EUnop"),String.new("EVars"),String.new("EFunction"),String.new("EBlock"),String.new("EFor"),String.new("EIn"),String.new("EIf"),String.new("EWhile"),String.new("ESwitch"),String.new("ETry"),String.new("EReturn"),String.new("EBreak"),String.new("EContinue"),String.new("EUntyped"),String.new("EThrow"),String.new("ECast"),String.new("EDisplay"),String.new("EDisplayNew"),String.new("ETernary"),String.new("ECheckType"),String.new("EMeta")),30);
haxe.macro.Unop.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("Unop")),3);
haxe.macro.Unop.__constructs__ = Array.new1($array(String.new("OpIncrement"),String.new("OpDecrement"),String.new("OpNot"),String.new("OpNeg"),String.new("OpNegBits")),5);
haxe.macro.Binop.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("Binop")),3);
haxe.macro.Binop.__constructs__ = Array.new1($array(String.new("OpAdd"),String.new("OpMult"),String.new("OpDiv"),String.new("OpSub"),String.new("OpAssign"),String.new("OpEq"),String.new("OpNotEq"),String.new("OpGt"),String.new("OpGte"),String.new("OpLt"),String.new("OpLte"),String.new("OpAnd"),String.new("OpOr"),String.new("OpXor"),String.new("OpBoolAnd"),String.new("OpBoolOr"),String.new("OpShl"),String.new("OpShr"),String.new("OpUShr"),String.new("OpMod"),String.new("OpAssignOp"),String.new("OpInterval"),String.new("OpArrow")),23);
haxe.macro.Constant.__ename__ = Array.new1($array(String.new("haxe"),String.new("macro"),String.new("Constant")),3);
haxe.macro.Constant.__constructs__ = Array.new1($array(String.new("CInt"),String.new("CFloat"),String.new("CString"),String.new("CIdent"),String.new("CRegexp")),5);
haxe.io.StringInput.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("StringInput")),3);
haxe.io.Error.__ename__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Error")),3);
haxe.io.Error.__constructs__ = Array.new1($array(String.new("Blocked"),String.new("Overflow"),String.new("OutsideBounds"),String.new("Custom")),4);
haxe.io.Eof.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Eof")),3);
haxe.io.BytesOutput.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("BytesOutput")),3);
haxe.io.Output.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Output")),3);
haxe.io.BytesInput.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("BytesInput")),3);
haxe.io.Input.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Input")),3);
haxe.io.BytesBuffer.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("BytesBuffer")),3);
haxe.io.Bytes.__name__ = Array.new1($array(String.new("haxe"),String.new("io"),String.new("Bytes")),3);
haxe.ds.WeakMap.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("WeakMap")),3);
haxe.ds.WeakMap.__interfaces__ = Array.new1(haxe.ds.WeakMap.__interfaces__,1);
haxe.ds.StringMap.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("StringMap")),3);
haxe.ds.StringMap.__interfaces__ = Array.new1(haxe.ds.StringMap.__interfaces__,1);
haxe.ds.ObjectMap.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("ObjectMap")),3);
haxe.ds.ObjectMap.__interfaces__ = Array.new1(haxe.ds.ObjectMap.__interfaces__,1);
haxe.ds.IntMap.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("IntMap")),3);
haxe.ds.IntMap.__interfaces__ = Array.new1(haxe.ds.IntMap.__interfaces__,1);
haxe.ds._HashMap.HashMap_Impl_.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("_HashMap"),String.new("HashMap_Impl_")),4);
haxe.ds.GenericStack.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("GenericStack")),3);
haxe.ds.GenericCell.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("GenericCell")),3);
haxe.ds.EnumValueMap.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("EnumValueMap")),3);
haxe.ds.EnumValueMap.__interfaces__ = Array.new1(haxe.ds.EnumValueMap.__interfaces__,1);
haxe.ds.TreeNode.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("TreeNode")),3);
haxe.ds.BalancedTree.__name__ = Array.new1($array(String.new("haxe"),String.new("ds"),String.new("BalancedTree")),3);
haxe.Log.__name__ = Array.new1($array(String.new("haxe"),String.new("Log")),2);
haxe._EnumFlags.EnumFlags_Impl_.__name__ = Array.new1($array(String.new("haxe"),String.new("_EnumFlags"),String.new("EnumFlags_Impl_")),3);
Type.__name__ = Array.new1($array(String.new("Type")),1);
ValueType.__ename__ = Array.new1($array(String.new("ValueType")),1);
ValueType.__constructs__ = Array.new1($array(String.new("TNull"),String.new("TInt"),String.new("TFloat"),String.new("TBool"),String.new("TObject"),String.new("TFunction"),String.new("TClass"),String.new("TEnum"),String.new("TUnknown")),9);
Test.__name__ = Array.new1($array(String.new("Test")),1);
StringTools.__name__ = Array.new1($array(String.new("StringTools")),1);
StringBuf.__name__ = Array.new1($array(String.new("StringBuf")),1);
String.__name__ = Array.new1($array(String.new("String")),1);
Std.__name__ = Array.new1($array(String.new("Std")),1);
neko.Boot.__name__ = Array.new1($array(String.new("neko"),String.new("Boot")),2);
Reflect.__name__ = Array.new1($array(String.new("Reflect")),1);
Math.__name__ = Array.new1($array(String.new("Math")),1);
IMap.__name__ = Array.new1($array(String.new("IMap")),1);
_Map.Map_Impl_.__name__ = Array.new1($array(String.new("_Map"),String.new("Map_Impl_")),2);
List.__name__ = Array.new1($array(String.new("List")),1);
IntIterator.__name__ = Array.new1($array(String.new("IntIterator")),1);
Array.__name__ = Array.new1($array(String.new("Array")),1);
neko.Lib.__name__ = Array.new1($array(String.new("neko"),String.new("Lib")),2);
try {
    var msort = $array(neko.Lib.load(String.new("std"),String.new("merge_sort"),3));
    Array.prototype.sort = function(cmp) {
        msort[0](this.__a,this.length,cmp);
        return null;
    }
}
catch @tmp {
    if $typeof(@tmp) == $tstring
        @tmp = String.new(@tmp);
    if true {
        var e = @tmp;
        {
        }
    }
    else
        $rethrow(@tmp)
}
{
    Math.__rnd = neko.Lib.load(String.new("std"),String.new("random_new"),0)();
    Math.PI = neko.Lib.load(String.new("std"),String.new("math_pi"),0)();
    Math.NaN = (0.0 / 0.0);
    Math.POSITIVE_INFINITY = (1.0 / 0.0);
    Math.NEGATIVE_INFINITY = (0 - Math.POSITIVE_INFINITY);
    var M = Math;
    M.abs = neko.Lib.load(String.new("std"),String.new("math_abs"),1);
    M.sin = neko.Lib.load(String.new("std"),String.new("math_sin"),1);
    M.cos = neko.Lib.load(String.new("std"),String.new("math_cos"),1);
    M.atan2 = neko.Lib.load(String.new("std"),String.new("math_atan2"),2);
    M.tan = neko.Lib.load(String.new("std"),String.new("math_tan"),1);
    M.exp = neko.Lib.load(String.new("std"),String.new("math_exp"),1);
    M.log = neko.Lib.load(String.new("std"),String.new("math_log"),1);
    M.sqrt = neko.Lib.load(String.new("std"),String.new("math_sqrt"),1);
    M.round = neko.Lib.load(String.new("std"),String.new("math_round"),1);
    M.floor = neko.Lib.load(String.new("std"),String.new("math_floor"),1);
    M.ceil = neko.Lib.load(String.new("std"),String.new("math_ceil"),1);
    M.atan = neko.Lib.load(String.new("std"),String.new("math_atan"),1);
    M.asin = neko.Lib.load(String.new("std"),String.new("math_asin"),1);
    M.acos = neko.Lib.load(String.new("std"),String.new("math_acos"),1);
    M.pow = neko.Lib.load(String.new("std"),String.new("math_pow"),2);
    try {
        M.fceil = neko.Lib.load(String.new("std"),String.new("math_fceil"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e = @tmp;
            {
                M.fceil = M.ceil;
            }
        }
        else
            $rethrow(@tmp)
    }
    try {
        M.ffloor = neko.Lib.load(String.new("std"),String.new("math_ffloor"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e = @tmp;
            {
                M.ffloor = M.floor;
            }
        }
        else
            $rethrow(@tmp)
    }
    try {
        M.fround = neko.Lib.load(String.new("std"),String.new("math_fround"),1);
    }
    catch @tmp {
        if $typeof(@tmp) == $tstring
            @tmp = String.new(@tmp);
        if true {
            var e = @tmp;
            {
                M.fround = M.round;
            }
        }
        else
            $rethrow(@tmp)
    }
}
{
    Int = {
        __name__ => Array.new1($array(String.new("Int")),1)

    };
    Float = {
        __name__ => Array.new1($array(String.new("Float")),1)

    };
    Bool = {
        __ename__ => Array.new1($array(String.new("Bool")),1)

    };
    Dynamic = {
        __name__ => Array.new1($array(String.new("Dynamic")),1)

    };
    Class = {
        __name__ => Array.new1($array(String.new("Class")),1)

    };
    Enum = $new(null);
    var cl = neko.Boot.__classes;
    cl.Int = Int;
    cl.Float = Float;
    cl.Bool = Bool;
    cl.Dynamic = Dynamic;
    cl.Class = Class;
    cl.Enum = Enum;
}
String.__is_String = true;
haxe.io.Input.prototype.bigEndian = false;
haxe.io.Output.prototype.bigEndian = false;
neko.Lib.__serialize = neko.Lib.load(String.new("std"),String.new("serialize"),1);
neko.Lib.__unserialize = neko.Lib.load(String.new("std"),String.new("unserialize"),2);
Math._rand_float = neko.Lib.load(String.new("std"),String.new("random_float"),1);
Math._rand_int = neko.Lib.load(String.new("std"),String.new("random_int"),2);
Reflect.same_closure = try {
    neko.Lib.load(String.new("std"),String.new("same_closure"),2);
}
catch @tmp {
    if $typeof(@tmp) == $tstring
        @tmp = String.new(@tmp);
    if true {
        var e = @tmp;
        {
            function(f1,f2) {
                return f1 == f2;
            }
        }
    }
    else
        $rethrow(@tmp)
}
String.__split = neko.Lib.load(String.new("std"),String.new("string_split"),2);
StringBuf.__make = neko.Lib.load(String.new("std"),String.new("buffer_new"),0);
StringBuf.__add = neko.Lib.load(String.new("std"),String.new("buffer_add"),2);
StringBuf.__add_char = neko.Lib.load(String.new("std"),String.new("buffer_add_char"),2);
StringBuf.__add_sub = neko.Lib.load(String.new("std"),String.new("buffer_add_sub"),4);
StringBuf.__to_string = neko.Lib.load(String.new("std"),String.new("buffer_string"),1);
StringTools._urlEncode = neko.Lib.load(String.new("std"),String.new("url_encode"),1);
StringTools._urlDecode = neko.Lib.load(String.new("std"),String.new("url_decode"),1);
haxe.ds.ObjectMap.count = 0;
haxe.io.Input._float_of_bytes = neko.Lib.load(String.new("std"),String.new("float_of_bytes"),2);
haxe.io.Input._double_of_bytes = neko.Lib.load(String.new("std"),String.new("double_of_bytes"),2);
haxe.io.Output.LN2 = Math.log(2);
haxe.io.Output._float_bytes = neko.Lib.load(String.new("std"),String.new("float_bytes"),2);
haxe.io.Output._double_bytes = neko.Lib.load(String.new("std"),String.new("double_bytes"),2);
hscript.Parser.p1 = 0;
hscript.Parser.readPos = 0;
hscript.Parser.tokenMin = 0;
hscript.Parser.tokenMax = 0;
sys.io.File.file_contents = neko.Lib.load(String.new("std"),String.new("file_contents"),1);
sys.io.File.file_open = neko.Lib.load(String.new("std"),String.new("file_open"),2);
sys.io.FileInput.file_eof = neko.Lib.load(String.new("std"),String.new("file_eof"),1);
sys.io.FileInput.file_read = neko.Lib.load(String.new("std"),String.new("file_read"),4);
sys.io.FileInput.file_read_char = neko.Lib.load(String.new("std"),String.new("file_read_char"),1);
sys.io.FileInput.file_close = neko.Lib.load(String.new("std"),String.new("file_close"),1);
sys.io.FileInput.file_seek = neko.Lib.load(String.new("std"),String.new("file_seek"),3);
sys.io.FileInput.file_tell = neko.Lib.load(String.new("std"),String.new("file_tell"),1);
sys.io.FileOutput.file_close = neko.Lib.load(String.new("std"),String.new("file_close"),1);
sys.io.FileOutput.file_seek = neko.Lib.load(String.new("std"),String.new("file_seek"),3);
sys.io.FileOutput.file_tell = neko.Lib.load(String.new("std"),String.new("file_tell"),1);
sys.io.FileOutput.file_flush = neko.Lib.load(String.new("std"),String.new("file_flush"),1);
sys.io.FileOutput.file_write = neko.Lib.load(String.new("std"),String.new("file_write"),4);
sys.io.FileOutput.file_write_char = neko.Lib.load(String.new("std"),String.new("file_write_char"),2);
Test.main();
